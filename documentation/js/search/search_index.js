var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/Node.html",[0,1.437,1,0.237]],["body/interfaces/Node.html",[0,2.44,1,0.477,2,3.94,3,0.612,4,0.612,5,0.514,6,3.19,7,1.395,8,1.085,9,1.478,10,4.417,11,4.253,12,3.733,13,2.009,14,1.502,15,0.049,16,1.674,17,2.146,18,3.236,19,0.514,20,0.04,21,0.04]],["title/modules/SmartNodeHashPackModule.html",[22,1.264,23,1.264]],["body/modules/SmartNodeHashPackModule.html",[1,0.413,3,0.637,4,0.637,5,0.535,15,0.049,19,0.535,20,0.041,21,0.041,23,2.499,24,1.283,25,1.514,26,3.322,27,3.322,28,2.206,29,1.94,30,1.644,31,1.453,32,2.808,33,4.102,34,1.94,35,0.752,36,1.94,37,0.637,38,1.13,39,2.808,40,1.644,41,1.862,42,0.637]],["title/injectables/SmartNodeHashPackService.html",[28,1.116,43,0.363]],["body/injectables/SmartNodeHashPackService.html",[1,0.437,3,0.255,4,0.255,5,0.215,7,1.123,8,0.453,9,0.805,13,1.784,14,1.357,15,0.05,16,1.378,17,2.536,18,2.952,19,0.215,20,0.022,21,0.022,28,1.437,32,3.481,35,0.641,37,0.255,42,0.255,43,0.336,44,0.583,45,1.332,46,2.153,47,3.892,48,3.892,49,4.693,50,3.342,51,2.13,52,3.892,53,0.911,54,2.388,55,2.574,56,3.586,57,3.586,58,4.127,59,3.586,60,4.127,61,4.127,62,2.574,63,1.437,64,1.645,65,1.788,66,2.019,67,1.645,68,2.07,69,1.437,70,1.437,71,2.574,72,2.904,73,3.152,74,1.645,75,1.521,76,1.521,77,2.567,78,2.054,79,2.36,80,1.645,81,2.574,82,2.119,83,2.904,84,2.574,85,1.637,86,1.637,87,3.17,88,1.645,89,2.455,90,1.126,91,1.645,92,1.645,93,1.645,94,1.645,95,2.574,96,2.664,97,3.342,98,3.055,99,4.127,100,1.645,101,2.084,102,2.664,103,1.851,104,2.13,105,1.873,106,1.521,107,1.332,108,2.574,109,1.645,110,3.326,111,1.974,112,1.873,113,1.645,114,1.645,115,1.126,116,3.152,117,3.586,118,3.586,119,1.873,120,1.645,121,1.645,122,2.574,123,1.645,124,1.332,125,1.332,126,1.645,127,1.645,128,0.849,129,1.762,130,1.645,131,1.126,132,1.126,133,1.645,134,1.332,135,1.332,136,0.747,137,0.747,138,0.972,139,1.88,140,1.645,141,1.645,142,0.849,143,1.645,144,1.645,145,1.126,146,1.645,147,1.332,148,1.645,149,1.645,150,1.645,151,3.892,152,1.645,153,1.645,154,1.645,155,2.171,156,2.574,157,3.17,158,1.645,159,2.574,160,3.17,161,1.645,162,1.645,163,2.084,164,1.645,165,2.574,166,1.645,167,1.788,168,1.958,169,1.958,170,1.958,171,2.026,172,1.645,173,1.645,174,3.17,175,2.574,176,1.645,177,1.645,178,1.645,179,2.026,180,1.788,181,1.958,182,1.645,183,1.332,184,1.645,185,3.17,186,2.904,187,1.762,188,2.084,189,1.645,190,2.574,191,1.645,192,1.645,193,0.849,194,1.645,195,2.574,196,2.574,197,1.645,198,1.645,199,1.645,200,1.645,201,1.645,202,1.645,203,1.645,204,0.849,205,2.17,206,0.747,207,1.332,208,1.332,209,2.574,210,1.645,211,1.645,212,1.645,213,1.332,214,1.645]],["title/modules/SmartNodeHederaModule.html",[22,1.264,215,1.437]],["body/modules/SmartNodeHederaModule.html",[1,0.446,3,0.604,4,0.604,5,0.507,15,0.049,19,0.507,20,0.04,21,0.04,23,2.469,24,1.217,25,1.467,29,1.88,30,1.559,31,1.378,34,1.88,35,0.812,36,1.88,37,0.604,38,1.072,40,1.88,41,1.766,42,0.604,215,2.899,216,3.151,217,3.151,218,3.151,219,2.469,220,2.469,221,2.663,222,3.891,223,3.151,224,3.151,225,3.151,226,3.151,227,3.151]],["title/injectables/SmartNodeHederaService.html",[43,0.363,220,1.264]],["body/injectables/SmartNodeHederaService.html",[1,0.412,3,0.236,4,0.236,5,0.198,7,0.539,8,0.419,9,0.757,13,1.966,14,1.312,15,0.05,16,1.538,17,2.473,19,0.198,20,0.021,21,0.021,28,1.74,35,0.582,37,0.236,39,1.042,42,0.236,43,0.316,44,0.539,46,1.207,51,1.559,53,0.857,54,2.312,63,1.376,66,1.838,68,2.041,69,1.74,70,1.74,78,2.024,79,1.812,85,1.772,86,1.772,90,2.35,96,3.354,97,4.29,98,3.458,102,3.261,106,2.214,107,3.232,111,2.041,119,1.78,136,0.691,137,0.691,139,2.139,155,2.293,163,1.232,167,1.677,168,1.812,169,1.812,170,1.812,171,1.812,179,1.812,180,1.599,181,1.812,193,0.785,206,1.701,220,1.701,221,3.204,223,1.232,225,1.232,228,1.232,229,2.973,230,2.78,231,3.748,232,3.748,233,3.991,234,3.434,235,3.748,236,3.434,237,3.748,238,1.522,239,1.793,240,2.35,241,2.42,242,2.42,243,1.522,244,1.522,245,1.522,246,5.338,247,3.434,248,1.96,249,3.916,250,1.522,251,4.475,252,1.522,253,3.434,254,1.522,255,1.522,256,2.42,257,1.522,258,1.522,259,1.522,260,2.42,261,1.522,262,2.062,263,1.522,264,3.434,265,3.434,266,3.232,267,1.522,268,1.042,269,2.42,270,1.522,271,2.42,272,1.96,273,1.522,274,3.748,275,1.522,276,1.042,277,1.522,278,1.522,279,1.232,280,1.522,281,3.013,282,1.042,283,1.78,284,2.42,285,1.656,286,3.232,287,2.42,288,2.42,289,1.656,290,1.43,291,2.42,292,1.522,293,1.522,294,1.522,295,1.522,296,1.522,297,1.522,298,3.991,299,1.522,300,1.522,301,1.522,302,3.748,303,3.748,304,2.928,305,3.748,306,3.748,307,3.748,308,3.748,309,3.748,310,3.748,311,3.748,312,1.232,313,1.522,314,1.522,315,1.522,316,3.434,317,3.434,318,4.764,319,3.013,320,3.434,321,3.434,322,3.434,323,3.013,324,3.013,325,3.991,326,3.434,327,3.013,328,1.522,329,4.343,330,3.434,331,1.522,332,1.522,333,1.522,334,1.522,335,1.522,336,1.522,337,1.522]],["title/modules/SmartNodeNetworkModule.html",[22,1.264,338,1.116]],["body/modules/SmartNodeNetworkModule.html",[1,0.413,3,0.637,4,0.637,5,0.535,15,0.049,19,0.535,20,0.041,21,0.041,24,1.283,25,1.514,29,1.94,30,1.644,31,1.453,34,1.94,35,0.752,36,1.94,37,0.637,38,1.13,40,1.644,41,1.862,42,0.637,338,2.206,339,3.322,340,3.322,341,1.949,342,2.808,343,4.102,344,2.424]],["title/injectables/SmartNodeNetworkService.html",[43,0.363,341,0.986]],["body/injectables/SmartNodeNetworkService.html",[1,0.478,3,0.196,4,0.196,5,0.165,7,0.447,8,0.731,9,0.651,10,4.318,11,4.318,12,3.65,13,1.601,14,1.385,15,0.05,16,1.485,17,2.451,18,0.865,19,0.165,20,0.018,21,0.018,35,0.529,37,0.196,42,0.196,43,0.271,44,0.447,46,2.109,51,2.091,53,0.737,54,2.283,63,1.364,66,1.966,68,2,69,1.681,70,1.681,78,2.053,79,2.371,85,1.758,86,1.758,98,2.871,103,2.23,104,2.165,105,0.747,106,1.23,111,1.731,112,1.819,115,0.865,119,2.479,124,1.023,125,1.023,128,0.652,136,0.574,137,0.574,138,2.165,139,1.966,147,3.278,155,1.904,167,1.681,168,1.546,169,1.759,170,1.546,171,1.759,179,1.663,180,1.468,181,1.546,186,1.023,187,0.865,188,1.023,193,1.075,204,0.652,206,0.945,207,1.023,208,1.023,240,2.331,262,2.771,266,2.967,282,0.865,283,1.23,285,2.107,290,1.23,304,2.289,341,1.09,342,3.389,345,1.023,346,3.405,347,2.757,348,2.617,349,2.655,350,2.082,351,3.079,352,3.405,353,3.079,354,2.082,355,2.082,356,2.082,357,2.082,358,2.082,359,1.686,360,2.082,361,1.263,362,1.263,363,3.663,364,4.906,365,3.89,366,4.32,367,3.079,368,1.263,369,3.079,370,2.652,371,2.082,372,1.263,373,1.263,374,2.493,375,1.263,376,1.263,377,1.23,378,2.082,379,1.263,380,4.195,381,2.082,382,1.263,383,2.082,384,2.082,385,1.263,386,2.082,387,1.263,388,2.967,389,2.082,390,1.263,391,2.082,392,1.263,393,2.15,394,1.686,395,2.082,396,1.263,397,2.082,398,2.082,399,2.082,400,4.804,401,3.079,402,2.082,403,2.082,404,3.079,405,2.082,406,2.082,407,3.079,408,3.079,409,3.079,410,3.079,411,2.082,412,2.082,413,2.082,414,2.082,415,2.082,416,2.082,417,2.082,418,2.082,419,2.082,420,2.082,421,3.079,422,3.079,423,3.079,424,3.079,425,3.079,426,3.079,427,3.079,428,3.079,429,2.082,430,2.082,431,2.082,432,2.082,433,1.263,434,1.263,435,2.082,436,1.263,437,1.263,438,1.263,439,1.263,440,2.082,441,1.263,442,1.023,443,1.263,444,1.023,445,1.263,446,2.082,447,1.263,448,1.263,449,0.747,450,0.865,451,1.263,452,2.967,453,1.263,454,1.263,455,2.082,456,1.263,457,1.263,458,1.263,459,1.263,460,1.263,461,1.263,462,1.263,463,1.686,464,1.263,465,1.263,466,1.263,467,1.023,468,0.865,469,1.263,470,1.263,471,0.865,472,1.263,473,1.263,474,1.263,475,1.263,476,1.263,477,2.082,478,1.263,479,2.082,480,0.865,481,1.263,482,1.263,483,1.263,484,1.263,485,2.655,486,1.263,487,1.023,488,1.263,489,1.263,490,1.263,491,1.263]],["title/modules/SmartNodeRestModule.html",[22,1.264,219,1.264]],["body/modules/SmartNodeRestModule.html",[1,0.434,3,0.618,4,0.618,5,0.52,15,0.049,19,0.52,20,0.041,21,0.041,24,1.246,25,1.488,29,1.907,30,1.596,31,1.411,34,1.907,35,0.79,36,1.907,37,0.618,38,1.097,40,1.907,41,1.809,42,0.618,219,2.53,239,2.191,276,2.727,338,2.191,492,3.226,493,3.984,494,3.226,495,2.727,496,3.984,497,2.354,498,2.727]],["title/injectables/SmartNodeRestService.html",[43,0.363,239,1.116]],["body/injectables/SmartNodeRestService.html",[1,0.468,3,0.682,4,0.244,5,0.205,7,0.556,8,0.433,13,1.91,14,1.21,15,0.05,16,1.555,17,2.556,19,0.205,20,0.021,21,0.021,35,0.385,37,0.244,38,0.683,42,0.244,43,0.324,44,0.556,46,0.629,53,0.879,54,2.491,63,1.401,66,1.953,68,2.103,69,1.76,70,1.76,78,2.123,79,2.491,90,1.075,96,3.288,111,1.925,136,0.713,137,0.713,139,1.812,142,1.804,155,2.181,167,1.925,168,2.181,169,2.406,170,2.181,171,2.181,179,2.181,180,1.925,181,2.181,229,1.699,239,1.401,249,2.01,272,2.83,304,3.131,312,3.996,341,1.555,344,0.928,365,3.431,467,3.889,468,3.288,495,3.378,497,0.928,499,1.272,500,3.806,501,2.482,502,3.495,503,4.237,504,3.806,505,3.806,506,3.076,507,3.076,508,3.076,509,3.806,510,3.495,511,3.806,512,1.075,513,1.571,514,2.482,515,1.571,516,2.482,517,1.571,518,3.495,519,2.482,520,2.482,521,1.571,522,1.571,523,1.571,524,2.482,525,2.482,526,1.571,527,2.482,528,2.482,529,1.571,530,2.482,531,2.482,532,2.482,533,1.571,534,3.495,535,2.482,536,2.482,537,1.571,538,2.482,539,1.571,540,1.571,541,3.806,542,3.076,543,3.076,544,3.076,545,3.076,546,3.076,547,1.571,548,3.495,549,3.806,550,1.571,551,1.571,552,3.889,553,1.571,554,3.076,555,1.571,556,1.571,557,1.571,558,4.046,559,1.571,560,1.571,561,1.571,562,1.571,563,1.571,564,1.571,565,1.571,566,1.571,567,1.571,568,1.571]],["title/modules/SmartNodeSdkModule.html",[22,1.264,569,1.437]],["body/modules/SmartNodeSdkModule.html",[1,0.462,3,0.564,4,0.564,5,0.474,15,0.05,19,0.474,20,0.039,21,0.039,23,2.429,24,1.137,25,1.407,29,1.803,30,1.456,31,1.287,34,1.803,35,0.842,36,1.803,37,0.564,38,1.001,40,1.803,41,1.65,42,0.564,215,2.762,219,2.429,224,2.943,226,2.943,338,2.144,498,2.488,569,2.935,570,2.943,571,2.943,572,2.943,573,2.762,574,2.429,575,2.488,576,3.635,577,2.943,578,2.943,579,3.635,580,2.943,581,2.943,582,2.943,583,3.635,584,3.635]],["title/injectables/SmartNodeSdkService.html",[43,0.363,574,1.264]],["body/injectables/SmartNodeSdkService.html",[1,0.46,3,0.251,4,0.251,5,0.211,7,0.899,8,0.445,9,0.794,13,1.367,14,1.128,15,0.05,16,1.367,17,2.279,19,0.211,20,0.022,21,0.022,28,2.012,35,0.689,37,0.251,39,1.107,42,0.251,43,0.331,44,0.572,46,2.227,50,3.125,51,2.196,53,0.899,54,2.071,63,1.423,65,2.012,66,1.99,68,1.939,69,1.546,70,1.546,72,1.309,75,1.5,76,0.955,77,1.309,78,2.09,79,2.301,82,2.42,83,1.309,85,1.992,86,1.992,89,2.431,103,1.618,104,1.618,110,2.804,111,1.828,112,1.852,128,0.834,129,1.738,131,1.107,132,3.258,134,3.317,135,1.309,136,0.734,137,0.734,138,2.28,139,2.048,142,0.834,145,2.431,155,2.227,167,1.717,168,0.734,169,0.734,170,0.734,171,1.612,179,1.612,180,1.828,181,0.734,183,2.056,193,1.31,204,1.31,205,2.431,206,1.423,213,1.309,220,2.161,227,1.309,229,1.107,239,2.012,240,2.642,268,1.107,276,1.107,279,1.309,282,1.738,283,2.28,290,2.28,341,1.794,344,0.955,347,1.309,348,1.5,370,2.804,377,1.5,449,0.955,450,1.738,471,1.107,480,1.107,512,1.107,552,2.056,574,1.612,575,3.436,577,1.309,578,1.309,580,1.309,581,1.309,582,1.309,585,1.309,586,3.859,587,3.125,588,3.859,589,2.539,590,3.551,591,3.551,592,2.876,593,3.551,594,3.551,595,3.551,596,2.539,597,2.539,598,2.539,599,2.539,600,2.539,601,1.617,602,2.056,603,2.538,604,1.617,605,4.838,606,3.123,607,2.539,608,3.918,609,1.617,610,3.781,611,1.617,612,1.617,613,1.617,614,3.551,615,1.617,616,3.125,617,2.539,618,1.617,619,2.932,620,2.539,621,1.617,622,2.539,623,1.617,624,2.539,625,1.617,626,1.617,627,1.617,628,2.539,629,1.617,630,1.617,631,1.617,632,1.617,633,2.539,634,2.539,635,1.617,636,1.617,637,2.056,638,1.617,639,1.617,640,1.617,641,2.539,642,2.539,643,2.876,644,2.539,645,2.539,646,2.538,647,1.617,648,1.617,649,1.617,650,1.617,651,1.617,652,2.538,653,1.617,654,1.617,655,1.617,656,1.309,657,1.309,658,1.617,659,1.617,660,1.617,661,1.617,662,1.617,663,1.617,664,1.617,665,1.617,666,1.617,667,1.617,668,1.617,669,1.617,670,1.309,671,1.617,672,1.617,673,1.309,674,3.551,675,1.617,676,1.617,677,2.538,678,1.617,679,1.617,680,1.617,681,1.617,682,2.539,683,1.617,684,1.617,685,2.539,686,2.539,687,1.617,688,1.309,689,1.107,690,1.309,691,1.309,692,2.539,693,2.056,694,1.617,695,1.617,696,1.617,697,1.617,698,1.617,699,1.617,700,1.617,701,1.617,702,1.617,703,1.617,704,1.617,705,1.617,706,1.617]],["title/injectables/SmartNodeSocket.html",[43,0.363,707,1.646]],["body/injectables/SmartNodeSocket.html",[1,0.47,3,0.534,4,0.534,5,0.448,7,1.218,8,0.947,9,1.359,12,2.354,13,1.774,14,1.313,15,0.05,16,1.218,19,0.448,20,0.037,21,0.037,35,0.675,37,0.534,38,0.947,42,0.534,43,0.567,44,1.218,46,2.07,53,1.539,63,2.007,66,1.91,68,2.007,69,1.378,70,1.378,76,3.118,78,1.91,110,2.976,115,3.429,139,1.91,167,1.378,206,1.561,268,2.354,452,3.52,677,2.785,707,3.053,708,4.056,709,3.429,710,2.785,711,4.347,712,4.056,713,5.277,714,3.439,715,5.009,716,4.347,717,3.439,718,3.439,719,3.439,720,4.767,721,4.347,722,3.439,723,3.439,724,3.439,725,3.439,726,3.439,727,3.439,728,3.439,729,2.785,730,3.439,731,3.439]],["title/modules/SmartNodeSocketsModule.html",[22,1.264,573,1.437]],["body/modules/SmartNodeSocketsModule.html",[1,0.434,3,0.618,4,0.618,5,0.52,15,0.049,19,0.52,20,0.041,21,0.041,24,1.246,25,1.488,29,1.907,30,1.596,31,1.411,34,1.907,35,0.79,36,1.907,37,0.618,38,1.097,40,1.907,41,1.809,42,0.618,65,2.191,131,2.727,338,2.191,497,2.354,498,2.727,573,2.876,732,3.226,733,3.226,734,3.984,735,2.727,736,3.984]],["title/injectables/SmartNodeSocketsService.html",[43,0.363,65,1.116]],["body/injectables/SmartNodeSocketsService.html",[1,0.476,3,0.257,4,0.257,5,0.216,7,0.586,8,0.456,9,0.809,13,1.747,14,1.414,15,0.05,16,1.465,19,0.216,20,0.022,21,0.022,35,0.642,37,0.257,38,0.712,42,0.257,43,0.337,44,0.586,46,2.186,51,2.24,53,0.916,54,2.266,63,1.442,65,1.442,66,2.04,68,1.732,69,1.658,70,1.658,73,2.577,75,2.306,76,2.876,78,2.098,79,2.174,82,2.126,101,2.094,103,1.857,104,1.857,105,0.978,106,1.881,111,2,112,2.126,116,2.913,119,3.008,128,0.854,129,1.77,136,0.752,137,0.752,138,2.306,139,1.95,142,0.854,155,1.174,167,1.842,168,1.445,169,1.633,170,1.445,171,1.445,179,1.445,180,1.442,181,1.174,187,1.133,193,0.854,204,1.857,205,2.179,206,1.878,262,2.671,285,1.133,341,1.584,344,0.978,348,2.778,359,2.913,374,1.34,377,1.528,388,2.094,393,2.577,394,1.34,449,0.978,450,1.133,463,1.34,468,1.133,471,1.133,480,1.133,487,1.34,497,0.978,512,1.133,602,3.35,606,1.77,616,2.094,619,2.958,637,1.34,643,3.621,652,3.16,657,1.34,670,1.34,673,1.34,689,1.133,690,2.094,691,1.34,693,1.34,707,2.778,709,1.133,712,3.35,735,3.513,737,1.34,738,3.903,739,3.183,740,3.903,741,3.903,742,3.598,743,3.598,744,3.598,745,3.598,746,3.598,747,2.586,748,2.586,749,2.586,750,2.586,751,2.586,752,1.655,753,1.655,754,2.913,755,1.655,756,4.137,757,4.866,758,1.655,759,2.586,760,3.598,761,1.655,762,4.596,763,2.586,764,1.655,765,2.586,766,1.655,767,2.586,768,1.655,769,2.586,770,1.655,771,1.655,772,1.655,773,1.655,774,2.586,775,1.655,776,1.655,777,1.655,778,1.655,779,1.655,780,1.655,781,1.655,782,1.655,783,3.598,784,1.655,785,2.586,786,1.655,787,1.655,788,1.655,789,1.655,790,3.598,791,1.655,792,2.586,793,1.655,794,1.655,795,3.903,796,3.903,797,1.655,798,1.655,799,1.655,800,2.586,801,3.183,802,1.655,803,1.34,804,1.655,805,1.655,806,1.655,807,1.34,808,1.655,809,1.655,810,1.655,811,1.34,812,1.655,813,1.655,814,1.655,815,1.655,816,1.655,817,1.655,818,3.183,819,1.655,820,1.655,821,1.655,822,1.655,823,1.655,824,1.655,825,1.655,826,1.655,827,1.655,828,1.655,829,1.655,830,1.655,831,1.655,832,1.655,833,1.655,834,1.655,835,1.655,836,1.655,837,1.655,838,1.655]],["title/coverage.html",[839,3.065]],["body/coverage.html",[0,2.018,1,0.469,5,0.51,6,3.165,14,1.077,15,0.049,20,0.04,21,0.04,28,1.566,32,2.676,43,0.718,45,3.165,65,1.566,111,1.566,220,1.775,221,2.676,228,3.165,239,1.566,341,1.384,342,2.676,345,3.165,495,2.676,499,3.165,574,1.775,575,2.676,585,3.165,707,2.31,708,3.165,709,2.676,710,3.165,735,2.676,737,3.165,839,3.165,840,3.909,841,3.909,842,3.909,843,5.621,844,3.909,845,4.705,846,3.909,847,3.909,848,3.909,849,3.909,850,3.909,851,3.81,852,4.705,853,3.165,854,4.705,855,3.165,856,3.909,857,3.909]],["title/dependencies.html",[25,1.046,858,1.889]],["body/dependencies.html",[15,0.049,20,0.042,21,0.042,25,1.318,37,0.654,128,2.175,859,4.214,860,5.625,861,4.214,862,4.214,863,4.214,864,4.919,865,3.983,866,4.214,867,4.214,868,4.214,869,4.214,870,4.214,871,4.214,872,4.214]],["title/index.html",[8,0.643,873,2.333,874,2.333]],["body/index.html",[0,2.308,1,0.455,15,0.049,19,0.337,20,0.031,21,0.031,31,1.273,34,1.036,35,0.642,36,1.036,38,1.424,40,1.036,42,0.401,51,2.266,53,1.664,75,2.125,82,2.125,85,1.856,86,2.135,89,2.831,102,1.769,132,1.769,142,2.308,145,2.831,180,1.657,204,1.334,230,2.093,283,2.642,286,2.093,289,1.769,290,2.642,304,1.527,348,2.875,370,2.831,377,1.527,442,3.349,444,2.093,449,3.093,569,1.856,574,1.877,587,2.093,592,2.093,603,3.349,606,3.484,608,3.349,610,3.94,619,2.831,646,2.093,656,2.093,688,3.349,689,1.769,729,2.093,754,2.093,803,2.093,807,3.349,811,2.093,875,4.471,876,5.235,877,2.584,878,2.584,879,2.584,880,4.471,881,4.471,882,2.584,883,2.584,884,2.584,885,2.584,886,2.584,887,3.596,888,2.584,889,2.584,890,2.584,891,2.584,892,2.584,893,2.584,894,2.584,895,2.584,896,2.584,897,2.584,898,2.584,899,3.596,900,2.584,901,3.596,902,2.584,903,2.584,904,2.584,905,2.584,906,4.135,907,2.584,908,2.584,909,2.584,910,3.596,911,2.584,912,2.584,913,2.584,914,2.584,915,2.584,916,2.584,917,2.584,918,2.584,919,2.584,920,3.596,921,2.584,922,2.584,923,3.596,924,2.584,925,2.584,926,2.584,927,4.135,928,2.584,929,2.584,930,2.584,931,2.584,932,3.596,933,2.584,934,4.865,935,2.584,936,4.135,937,2.584,938,4.135,939,2.584,940,2.584,941,2.584,942,3.596,943,2.584,944,2.584,945,3.596,946,2.584,947,3.596,948,2.584,949,2.584,950,2.584,951,2.584,952,2.584,953,2.584,954,2.584,955,2.584,956,3.596,957,2.584,958,2.584,959,2.584,960,2.584,961,2.584,962,2.584,963,2.584,964,2.584,965,2.584,966,2.584,967,2.584,968,4.135,969,2.584,970,4.471,971,4.135,972,2.584,973,2.584,974,2.584,975,2.584,976,2.584,977,2.584,978,3.596,979,2.584,980,3.596,981,2.584,982,3.596,983,3.596,984,2.584,985,2.584,986,2.584,987,2.584,988,2.584,989,2.584,990,2.584,991,2.584,992,3.596,993,2.584,994,4.135,995,2.584,996,2.584,997,2.584,998,2.584,999,2.584,1000,2.584,1001,2.584,1002,2.584,1003,2.584,1004,2.584,1005,2.584,1006,2.584,1007,2.584,1008,2.584,1009,2.584,1010,2.584,1011,2.584,1012,2.584,1013,2.584,1014,2.584,1015,2.584,1016,3.596,1017,2.584,1018,2.584,1019,2.584,1020,3.596,1021,2.584,1022,2.584,1023,2.584,1024,2.584,1025,2.584,1026,2.584,1027,2.584,1028,2.584,1029,2.584,1030,2.584,1031,2.584,1032,2.584,1033,2.584,1034,2.584,1035,2.584,1036,2.584,1037,2.584,1038,2.584,1039,2.584,1040,2.584,1041,2.584,1042,2.584,1043,2.584]],["title/modules.html",[24,1.184]],["body/modules.html",[15,0.042,20,0.042,21,0.042,23,1.933,24,1.331,215,2.197,219,1.933,338,1.706,569,2.197,573,2.197,865,4.494,1044,5.549,1045,5.549,1046,5.549]],["title/overview.html",[1047,3.065]],["body/overview.html",[0,1.933,15,0.049,20,0.039,21,0.039,23,2.447,24,1.171,25,1.433,26,3.032,27,3.032,28,1.985,29,1.837,30,1.5,31,1.326,44,1.326,65,1.985,215,2.866,216,3.032,217,3.032,218,3.032,219,2.502,220,2.249,239,1.985,289,2.563,338,2.187,339,3.032,340,3.032,341,1.754,492,3.032,494,3.032,569,2.929,570,3.032,571,3.032,572,3.032,573,2.817,574,2.249,732,3.032,733,3.032,1047,3.032,1048,3.744,1049,3.744]],["title/properties.html",[9,1.046,858,1.889]],["body/properties.html",[9,1.396,15,0.046,20,0.044,21,0.044,1050,4.463,1051,4.463]],["title/miscellaneous/variables.html",[1052,1.889,1053,2.709]],["body/miscellaneous/variables.html",[8,1.191,14,1.375,15,0.046,20,0.043,21,0.043,103,2.232,104,2.232,105,2.555,248,3.501,851,3.501,853,4.264,855,4.043,1052,3.501,1053,3.501,1054,4.993,1055,4.324,1056,4.324,1057,4.324]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/Node.html":{},"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":193,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["0.0.0",{"_index":1051,"title":{},"body":{"properties.html":{}}}],["0.0.1786344",{"_index":408,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.0.1786345",{"_index":412,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.0.1786347",{"_index":415,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.0.1786365",{"_index":418,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.0.1786597",{"_index":398,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.0.1786598",{"_index":402,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.0.1786599",{"_index":405,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.0.467726",{"_index":421,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.0.467732",{"_index":423,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.0.467734",{"_index":425,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.0.467737",{"_index":427,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.11.4",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":289,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"index.html":{},"overview.html":{}}}],["1/1",{"_index":854,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":843,"title":{},"body":{"coverage.html":{}}}],["11/11",{"_index":847,"title":{},"body":{"coverage.html":{}}}],["14.0.0",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["14/14",{"_index":849,"title":{},"body":{"coverage.html":{}}}],["15/15",{"_index":844,"title":{},"body":{"coverage.html":{}}}],["16/16",{"_index":846,"title":{},"body":{"coverage.html":{}}}],["17/17",{"_index":850,"title":{},"body":{"coverage.html":{}}}],["19/19",{"_index":848,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":939,"title":{},"body":{"index.html":{}}}],["2.3.0",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["28",{"_index":287,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["3",{"_index":286,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"index.html":{}}}],["302a300506032b6570032100077bfba9f0fb180026f0de51d4e1083d616eff34a8fe62a1c0e34dd975b7f8cf",{"_index":413,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["302a300506032b6570032100233b043e21d5e148f48e2c2da6607a1f5e6fc381781bd0561967743a8291785e",{"_index":403,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["302a300506032b65700321003f54816030c29221e4f228c76415cba0db1ab4c49827d9dbf580abc2f2b29c24",{"_index":399,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["302a300506032b65700321004530757c566a19027a02fc58c9387739661e727e09e1bc92f1ee2fcde530b391",{"_index":426,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["302a300506032b6570032100485e23e18834571e466f96de9f96f228a1f5da860b319f0f0cb2890f938f298d",{"_index":419,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["302a300506032b65700321004e3c29113c911ce6dba13669fda53ed1ab3d89547e23c0b7ab2275fd5dc05766",{"_index":409,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["302a300506032b657003210057a3ffed480e36faf916e032435368f2eb9f951a6b58de1a64829336516fdcbf",{"_index":422,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["302a300506032b6570032100c236c88b0aadccf86cc09c57734401409e301d45018ab179f8463801f486c89a",{"_index":406,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["302a300506032b6570032100c63e283249e90a6971d71e4c8a1f0bc26a7a7f61f8524c7866a1d8ff779a4ffb",{"_index":424,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["302a300506032b6570032100ecb67bdae47babf0d2df87f6b787562357550fac02a5e1ea44b22cc0c1ab2738",{"_index":428,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["302a300506032b6570032100ff792317f5a24278f1a2dddfc9a23670e158ccb9ecd42cdd0ab36e5ad8bc40a6",{"_index":416,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["4",{"_index":940,"title":{},"body":{"index.html":{}}}],["4/4",{"_index":845,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1048,"title":{},"body":{"overview.html":{}}}],["7",{"_index":1049,"title":{},"body":{"overview.html":{}}}],["7.5.0",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":291,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["_initsockets",{"_index":589,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["_initsockets(hashconnectdata",{"_index":600,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["access",{"_index":1012,"title":{},"body":{"index.html":{}}}],["account",{"_index":518,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["accountid",{"_index":96,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeRestService.html":{}}}],["accountid(nodeaccountid",{"_index":292,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["accountids",{"_index":118,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["accounttosign",{"_index":200,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["active",{"_index":393,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["activenodes",{"_index":394,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["activenodes.length",{"_index":477,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["activenodes[math.floor(math.random",{"_index":478,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["acts",{"_index":918,"title":{},"body":{"index.html":{}}}],["add",{"_index":948,"title":{},"body":{"index.html":{}}}],["addhbartransfer(fees.wallet",{"_index":326,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["addhbartransfer(senderid",{"_index":322,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["addtokentransfer(this.utilities.vehsuite.id",{"_index":329,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["advanced",{"_index":999,"title":{},"body":{"index.html":{}}}],["alternative",{"_index":902,"title":{},"body":{"index.html":{}}}],["angular",{"_index":875,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":37,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":370,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["apitestnet",{"_index":938,"title":{},"body":{"index.html":{}}}],["app",{"_index":691,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["app.component.ts",{"_index":960,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":950,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":956,"title":{},"body":{"index.html":{}}}],["appmetadata",{"_index":47,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["appmodule",{"_index":959,"title":{},"body":{"index.html":{}}}],["approves",{"_index":1005,"title":{},"body":{"index.html":{}}}],["array",{"_index":119,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["array.from(activenodes.values()).map(x",{"_index":833,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["array.from(this.nodesonline).filter(([key",{"_index":829,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["associatetoken",{"_index":230,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"index.html":{}}}],["associatetoken(tokenids",{"_index":242,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["async",{"_index":54,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["auth",{"_index":204,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["auth.isvalidsignature",{"_index":799,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["auth.value",{"_index":207,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["authenticate",{"_index":75,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["authenticatewallet",{"_index":55,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["authenticatewallet(walletid",{"_index":71,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["authentication",{"_index":82,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["authorizewallet",{"_index":742,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["authresponse",{"_index":205,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["authresponse.success",{"_index":213,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["authsession",{"_index":760,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["authstorage",{"_index":469,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["authstorage.signedpayload.originalpayload.node",{"_index":472,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["avoid",{"_index":1023,"title":{},"body":{"index.html":{}}}],["await",{"_index":155,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["axios",{"_index":440,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["axios.get(`${this.node.url}/${endpoint",{"_index":489,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["axios.post(`${this.node.url}/${endpoint",{"_index":490,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["balance",{"_index":519,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["based",{"_index":887,"title":{},"body":{"index.html":{}}}],["basic",{"_index":926,"title":{},"body":{"index.html":{}}}],["basically",{"_index":920,"title":{},"body":{"index.html":{}}}],["behavior",{"_index":962,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":98,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["bootstrap",{"_index":958,"title":{},"body":{"index.html":{}}}],["break",{"_index":290,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["browse",{"_index":1046,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":865,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["bytearray",{"_index":198,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["call",{"_index":369,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["callapiendpoint",{"_index":349,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["callapiendpoint(type",{"_index":362,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["called",{"_index":900,"title":{},"body":{"index.html":{}}}],["can't",{"_index":482,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["capacitor/storage",{"_index":125,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["case",{"_index":283,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["cases",{"_index":1043,"title":{},"body":{"index.html":{}}}],["catch",{"_index":179,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["catch(error",{"_index":672,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["chain",{"_index":535,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["check",{"_index":656,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["checks",{"_index":1004,"title":{},"body":{"index.html":{}}}],["class",{"_index":42,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["clear",{"_index":81,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["clearauthsession",{"_index":56,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["close",{"_index":823,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["cluster_smartnodehashpackmodule",{"_index":26,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"overview.html":{}}}],["cluster_smartnodehashpackmodule_providers",{"_index":27,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"overview.html":{}}}],["cluster_smartnodehederamodule",{"_index":216,"title":{},"body":{"modules/SmartNodeHederaModule.html":{},"overview.html":{}}}],["cluster_smartnodehederamodule_imports",{"_index":217,"title":{},"body":{"modules/SmartNodeHederaModule.html":{},"overview.html":{}}}],["cluster_smartnodehederamodule_providers",{"_index":218,"title":{},"body":{"modules/SmartNodeHederaModule.html":{},"overview.html":{}}}],["cluster_smartnodenetworkmodule",{"_index":339,"title":{},"body":{"modules/SmartNodeNetworkModule.html":{},"overview.html":{}}}],["cluster_smartnodenetworkmodule_providers",{"_index":340,"title":{},"body":{"modules/SmartNodeNetworkModule.html":{},"overview.html":{}}}],["cluster_smartnoderestmodule",{"_index":492,"title":{},"body":{"modules/SmartNodeRestModule.html":{},"overview.html":{}}}],["cluster_smartnoderestmodule_imports",{"_index":493,"title":{},"body":{"modules/SmartNodeRestModule.html":{}}}],["cluster_smartnoderestmodule_providers",{"_index":494,"title":{},"body":{"modules/SmartNodeRestModule.html":{},"overview.html":{}}}],["cluster_smartnodesdkmodule",{"_index":570,"title":{},"body":{"modules/SmartNodeSdkModule.html":{},"overview.html":{}}}],["cluster_smartnodesdkmodule_imports",{"_index":571,"title":{},"body":{"modules/SmartNodeSdkModule.html":{},"overview.html":{}}}],["cluster_smartnodesdkmodule_providers",{"_index":572,"title":{},"body":{"modules/SmartNodeSdkModule.html":{},"overview.html":{}}}],["cluster_smartnodesocketsmodule",{"_index":732,"title":{},"body":{"modules/SmartNodeSocketsModule.html":{},"overview.html":{}}}],["cluster_smartnodesocketsmodule_imports",{"_index":734,"title":{},"body":{"modules/SmartNodeSocketsModule.html":{}}}],["cluster_smartnodesocketsmodule_providers",{"_index":733,"title":{},"body":{"modules/SmartNodeSocketsModule.html":{},"overview.html":{}}}],["code",{"_index":629,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["coming",{"_index":988,"title":{},"body":{"index.html":{}}}],["common",{"_index":1042,"title":{},"body":{"index.html":{}}}],["config",{"_index":366,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["connect",{"_index":57,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["connect(network",{"_index":84,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["connected",{"_index":800,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["connection",{"_index":135,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["connections",{"_index":1032,"title":{},"body":{"index.html":{}}}],["connects",{"_index":808,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["console.error(error",{"_index":183,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["console.log(`network",{"_index":632,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["console.log(message",{"_index":645,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["const",{"_index":160,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["constructor",{"_index":63,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["constructor(node",{"_index":714,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["constructor(smartnodehashpackservice",{"_index":238,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["constructor(smartnodenetworkservice",{"_index":512,"title":{},"body":{"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["constructor(smartnodesocketsservice",{"_index":64,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["content",{"_index":796,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["context",{"_index":853,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["contract",{"_index":903,"title":{},"body":{"index.html":{}}}],["core",{"_index":445,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["correctly",{"_index":634,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["councilnftid",{"_index":315,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["coverage",{"_index":839,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createdaotransaction",{"_index":231,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["createdaotransaction(daotokenid",{"_index":245,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["createnftpooltransaction",{"_index":232,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["createnftpooltransaction(senderid",{"_index":252,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["creating",{"_index":828,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["current",{"_index":374,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["currentnode",{"_index":762,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["currentnode.operator",{"_index":791,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["danger",{"_index":695,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["dao",{"_index":986,"title":{},"body":{"index.html":{}}}],["daodocument",{"_index":247,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["daos",{"_index":543,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["daotokenid",{"_index":251,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["dapp",{"_index":807,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["data",{"_index":468,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["data.image",{"_index":564,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["dataobserver",{"_index":48,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["decentralised",{"_index":901,"title":{},"body":{"index.html":{}}}],["decided",{"_index":885,"title":{},"body":{"index.html":{}}}],["decimal",{"_index":277,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["decimal(fees.create.fixed.hbar).div(hsuiteinfos.price).times(0.1",{"_index":334,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["decimal(fees.fixed.hbar).div(hsuiteinfos.price).times(0.1",{"_index":319,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["decimal.js",{"_index":278,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["declarations",{"_index":955,"title":{},"body":{"index.html":{}}}],["default",{"_index":103,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":66,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["dependencies",{"_index":25,"title":{"dependencies.html":{}},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/Node.html":{},"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["develop",{"_index":892,"title":{},"body":{"index.html":{}}}],["dex",{"_index":985,"title":{},"body":{"index.html":{}}}],["different",{"_index":657,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["disconnect",{"_index":58,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["discord",{"_index":916,"title":{},"body":{"index.html":{}}}],["docs",{"_index":912,"title":{},"body":{"index.html":{}}}],["document.referrer",{"_index":731,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["documentation",{"_index":840,"title":{},"body":{"coverage.html":{}}}],["doing",{"_index":997,"title":{},"body":{"index.html":{}}}],["don't",{"_index":995,"title":{},"body":{"index.html":{}}}],["down",{"_index":649,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["dynamic",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":921,"title":{},"body":{"index.html":{}}}],["easiest",{"_index":1006,"title":{},"body":{"index.html":{}}}],["easy",{"_index":881,"title":{},"body":{"index.html":{}}}],["empty",{"_index":483,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["endpoint",{"_index":364,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["enhanching",{"_index":144,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["entire",{"_index":455,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["error",{"_index":180,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["error(`the",{"_index":481,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["error(error.message",{"_index":673,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["error.message",{"_index":694,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["errors",{"_index":670,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["establish",{"_index":660,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["etc",{"_index":987,"title":{},"body":{"index.html":{}}}],["event",{"_index":619,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["event.data.authresponse.payload",{"_index":683,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["event.data.authresponse.signeddata.serversigningaccount",{"_index":680,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["event.data.wallet",{"_index":682,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["event.event",{"_index":667,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["event.method",{"_index":675,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["event.type",{"_index":696,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["events",{"_index":606,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["eventsobservable",{"_index":586,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["eventsobserver",{"_index":587,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["example",{"_index":936,"title":{},"body":{"index.html":{}}}],["exchange",{"_index":546,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["export",{"_index":19,"title":{},"body":{"interfaces/Node.html":{},"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["exports",{"_index":41,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{}}}],["extends",{"_index":711,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["facilitate",{"_index":1041,"title":{},"body":{"index.html":{}}}],["failed",{"_index":687,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["false",{"_index":106,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["feature",{"_index":981,"title":{},"body":{"index.html":{}}}],["features",{"_index":883,"title":{},"body":{"index.html":{}}}],["fee",{"_index":549,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["feel",{"_index":888,"title":{},"body":{"index.html":{}}}],["fees",{"_index":249,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeRestService.html":{}}}],["fees.create.fixed.hbar",{"_index":336,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["fees.fixed.hbar",{"_index":324,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["fees/info",{"_index":561,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["fetch",{"_index":454,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["fetched",{"_index":635,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["few",{"_index":1008,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Node.html":{},"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{}}}],["finally",{"_index":466,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["finance",{"_index":143,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["find",{"_index":932,"title":{},"body":{"index.html":{}}}],["first",{"_index":443,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["follow",{"_index":913,"title":{},"body":{"index.html":{}}}],["following",{"_index":933,"title":{},"body":{"index.html":{}}}],["found",{"_index":929,"title":{},"body":{"index.html":{}}}],["framework",{"_index":893,"title":{},"body":{"index.html":{}}}],["free",{"_index":889,"title":{},"body":{"index.html":{}}}],["function",{"_index":467,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{}}}],["gameflipcoin",{"_index":500,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["gameflipcoin(transactionid",{"_index":514,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["generating",{"_index":284,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["generic",{"_index":977,"title":{},"body":{"index.html":{}}}],["getaccountbalance",{"_index":501,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["getaccountbalance(accountid",{"_index":516,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["getaccountinfos",{"_index":502,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["getaccountinfos(accountid",{"_index":520,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["getapiendpoint",{"_index":350,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["getapiendpoint(endpoint",{"_index":371,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["getauthsession",{"_index":59,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["getcurrentnode",{"_index":351,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["geteventsobserver",{"_index":590,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["geteventsobserver()the",{"_index":1014,"title":{},"body":{"index.html":{}}}],["getgametoken",{"_index":503,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["gethashpackservice",{"_index":591,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["gethashpackservice()the",{"_index":1025,"title":{},"body":{"index.html":{}}}],["gethederaservice",{"_index":592,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["gethsuiteholders",{"_index":504,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["gethsuitestaking",{"_index":505,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["getmainsocket",{"_index":743,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["getnetwork",{"_index":352,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["getnetworkservice",{"_index":593,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["getnetworkservice()the",{"_index":1018,"title":{},"body":{"index.html":{}}}],["getnftforholder",{"_index":506,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["getnftforholder(accountid",{"_index":528,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["getnode",{"_index":713,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["getnodeobserver",{"_index":353,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["getnodesonline",{"_index":744,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["getrandomnode",{"_index":354,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["getrandomnode(override",{"_index":378,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["getrandomnodefornetwork",{"_index":233,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["getrestservice",{"_index":594,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["getrestservice()the",{"_index":1029,"title":{},"body":{"index.html":{}}}],["getsigner",{"_index":60,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["getsocketobserver",{"_index":745,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["getsocketsservice",{"_index":595,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["getsocketsservice()the",{"_index":1038,"title":{},"body":{"index.html":{}}}],["getspecificnode",{"_index":355,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["getspecificnode(index",{"_index":381,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["getting",{"_index":873,"title":{"index.html":{}},"body":{}}],["gettokenchaininfos",{"_index":507,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["gettokenchaininfos(tokenid",{"_index":532,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["gettokeninfos",{"_index":508,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["gettokeninfos(tokenid",{"_index":536,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["getutilities",{"_index":509,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["goes",{"_index":648,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["grab",{"_index":462,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["handle",{"_index":978,"title":{},"body":{"index.html":{}}}],["handleauthevent",{"_index":596,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["handleauthevent(event",{"_index":617,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["handleerrors",{"_index":597,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["handleerrors(event",{"_index":620,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["handlegenericevents",{"_index":598,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["handlegenericevents(event",{"_index":622,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["handles",{"_index":1031,"title":{},"body":{"index.html":{}}}],["handling",{"_index":134,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["hashconnect",{"_index":49,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashconnect.auth",{"_index":186,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["hashconnect.data",{"_index":157,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashconnectdata",{"_index":50,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["hashconnectdata.value",{"_index":189,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashconnectresponse",{"_index":201,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashconnecttypes",{"_index":126,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashconnecttypes.appmetadata",{"_index":108,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashgraph",{"_index":904,"title":{},"body":{"index.html":{}}}],["hashgraph/sdk",{"_index":275,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hashpack",{"_index":89,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["hashpack.module",{"_index":224,"title":{},"body":{"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeSdkModule.html":{}}}],["hashpack.module.ts",{"_index":33,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{}}}],["hashpack.service",{"_index":39,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["hashpack.service.ts",{"_index":45,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"coverage.html":{}}}],["hashpack.service.ts:100",{"_index":88,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:127",{"_index":91,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:159",{"_index":94,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:19",{"_index":114,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:190",{"_index":100,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:220",{"_index":80,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:235",{"_index":92,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:24",{"_index":109,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:262",{"_index":74,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:29",{"_index":113,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:35",{"_index":123,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:40",{"_index":121,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:45",{"_index":120,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:49",{"_index":67,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:83",{"_index":93,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack/smart",{"_index":223,"title":{},"body":{"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{}}}],["hashpackservice",{"_index":1019,"title":{},"body":{"index.html":{}}}],["hashpackwallet",{"_index":588,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["hashpask",{"_index":1022,"title":{},"body":{"index.html":{}}}],["hbar",{"_index":269,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hbar(fees.create.fixed.hbar",{"_index":335,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hbar.from",{"_index":323,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hbar.from(fees.fixed.hbar",{"_index":327,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hbarunit",{"_index":270,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hbarunit.hbar",{"_index":325,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["headacke",{"_index":1024,"title":{},"body":{"index.html":{}}}],["healthy",{"_index":1036,"title":{},"body":{"index.html":{}}}],["hedera",{"_index":145,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["hedera.module",{"_index":579,"title":{},"body":{"modules/SmartNodeSdkModule.html":{}}}],["hedera.module.ts",{"_index":222,"title":{},"body":{"modules/SmartNodeHederaModule.html":{}}}],["hedera.service",{"_index":227,"title":{},"body":{"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeSdkService.html":{}}}],["hedera.service.ts",{"_index":228,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"coverage.html":{}}}],["hedera.service.ts:103",{"_index":243,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hedera.service.ts:138",{"_index":250,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hedera.service.ts:194",{"_index":267,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hedera.service.ts:242",{"_index":259,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hedera.service.ts:28",{"_index":241,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hedera.service.ts:287",{"_index":254,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hedera.service.ts:48",{"_index":261,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hedera.service.ts:56",{"_index":255,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hedera.service.ts:80",{"_index":257,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hederaservice",{"_index":1039,"title":{},"body":{"index.html":{}}}],["help",{"_index":1009,"title":{},"body":{"index.html":{}}}],["here",{"_index":976,"title":{},"body":{"index.html":{}}}],["hidenft",{"_index":99,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["high",{"_index":993,"title":{},"body":{"index.html":{}}}],["holder",{"_index":531,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["holders",{"_index":525,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["hsuite",{"_index":142,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["hsuite/angular",{"_index":963,"title":{},"body":{"index.html":{}}}],["hsuite/smart",{"_index":945,"title":{},"body":{"index.html":{}}}],["hsuiteinfos",{"_index":316,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hsuiteinfos.decimals).todecimalplaces(hsuiteinfos.decimals).tonumber",{"_index":321,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["http",{"_index":1027,"title":{},"body":{"index.html":{}}}],["http://localhost:3001",{"_index":429,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["http://localhost:3002",{"_index":430,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["http://localhost:3003",{"_index":431,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["http://localhost:3004",{"_index":432,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["https://mainnet",{"_index":400,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["https://testnet",{"_index":147,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["icon",{"_index":146,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["identical",{"_index":924,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":841,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":313,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["import",{"_index":35,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["imports",{"_index":40,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{},"index.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/Node.html":{},"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Node.html":{},"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["infos",{"_index":538,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["init",{"_index":746,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["init(currentnode",{"_index":759,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["initauth",{"_index":747,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["initauth(wallet",{"_index":763,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["initdata",{"_index":172,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["initdata.pairingstring",{"_index":175,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["initdata.savedpairings[0]?.accountids",{"_index":176,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["initialize",{"_index":602,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["initialized",{"_index":633,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["initializing",{"_index":628,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["initmainsocket",{"_index":748,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["initmainsocket(currentnode",{"_index":765,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["initnodes",{"_index":749,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["initnodes(wallet",{"_index":767,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["inject",{"_index":268,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{}}}],["inject('network",{"_index":279,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["inject('node",{"_index":627,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["inject(object",{"_index":720,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["injectable",{"_index":43,"title":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{}}}],["injectables",{"_index":44,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{},"overview.html":{}}}],["inspiration",{"_index":891,"title":{},"body":{"index.html":{}}}],["install",{"_index":944,"title":{},"body":{"index.html":{}}}],["installation",{"_index":941,"title":{},"body":{"index.html":{}}}],["instance",{"_index":931,"title":{},"body":{"index.html":{}}}],["integrate",{"_index":882,"title":{},"body":{"index.html":{}}}],["interact",{"_index":610,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["interacting",{"_index":983,"title":{},"body":{"index.html":{}}}],["interaction",{"_index":971,"title":{},"body":{"index.html":{}}}],["interactions",{"_index":1021,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Node.html":{}},"body":{"interfaces/Node.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Node.html":{}}}],["interfaces/node.interface",{"_index":439,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["io",{"_index":719,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["itself",{"_index":991,"title":{},"body":{"index.html":{}}}],["json.parse(auth.value",{"_index":208,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["json.parse(hashconnectdata.value",{"_index":191,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["json.stringify(authresponse",{"_index":214,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["json.stringify(this.hashconnectdata",{"_index":158,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["keeping",{"_index":1034,"title":{},"body":{"index.html":{}}}],["key",{"_index":18,"title":{},"body":{"interfaces/Node.html":{},"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["know",{"_index":906,"title":{},"body":{"index.html":{}}}],["launchpad",{"_index":984,"title":{},"body":{"index.html":{}}}],["launchpads",{"_index":542,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["layer",{"_index":1011,"title":{},"body":{"index.html":{}}}],["level",{"_index":994,"title":{},"body":{"index.html":{}}}],["lib/utils/smart",{"_index":777,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["library",{"_index":878,"title":{},"body":{"index.html":{}}}],["limited",{"_index":314,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["links",{"_index":910,"title":{},"body":{"index.html":{}}}],["list",{"_index":463,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["listeners",{"_index":961,"title":{},"body":{"index.html":{}}}],["literal",{"_index":248,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"miscellaneous/variables.html":{}}}],["load",{"_index":548,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["loadfees",{"_index":510,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["loadfees(fee",{"_index":540,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["loadhashconnectdata",{"_index":61,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["loading",{"_index":811,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["loadtokens",{"_index":511,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["local",{"_index":240,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["lodash",{"_index":129,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["lodash.first(this.hashconnectdata.accountids",{"_index":164,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["lodash.get(authsession.accountids",{"_index":780,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["lodash.get(hashconnectdata.accountids",{"_index":642,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["logic",{"_index":979,"title":{},"body":{"index.html":{}}}],["login",{"_index":975,"title":{},"body":{"index.html":{}}}],["login/logout",{"_index":664,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["login/logout/connection",{"_index":990,"title":{},"body":{"index.html":{}}}],["low",{"_index":1033,"title":{},"body":{"index.html":{}}}],["lower",{"_index":1017,"title":{},"body":{"index.html":{}}}],["main",{"_index":754,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["mainnet",{"_index":85,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["mainsocket",{"_index":652,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["mainsocket.getnode().operator",{"_index":658,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["makebytes",{"_index":234,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["makebytes(transaction",{"_index":256,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["makes",{"_index":896,"title":{},"body":{"index.html":{}}}],["manner",{"_index":919,"title":{},"body":{"index.html":{}}}],["map",{"_index":757,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["mapping",{"_index":832,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["matching",{"_index":21,"title":{},"body":{"interfaces/Node.html":{},"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":288,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["meant",{"_index":879,"title":{},"body":{"index.html":{}}}],["memo",{"_index":253,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["message",{"_index":643,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["messagetypes",{"_index":127,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["messagetypes.transaction",{"_index":197,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["metadata",{"_index":199,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["method",{"_index":68,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["methods",{"_index":53,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["miscellaneous",{"_index":1052,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":692,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["module",{"_index":22,"title":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{}},"body":{}}],["modules",{"_index":24,"title":{"modules.html":{}},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{},"modules.html":{},"overview.html":{}}}],["monitor",{"_index":647,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["more",{"_index":907,"title":{},"body":{"index.html":{}}}],["multisig",{"_index":544,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["name",{"_index":16,"title":{},"body":{"interfaces/Node.html":{},"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["namespace",{"_index":715,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["need",{"_index":688,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["network",{"_index":51,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["network's",{"_index":937,"title":{},"body":{"index.html":{}}}],["network.foreach(node",{"_index":816,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["network.module",{"_index":498,"title":{},"body":{"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{}}}],["network.module.ts",{"_index":343,"title":{},"body":{"modules/SmartNodeNetworkModule.html":{}}}],["network.service",{"_index":344,"title":{},"body":{"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["network.service.ts",{"_index":345,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"coverage.html":{}}}],["network.service.ts:134",{"_index":361,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:145",{"_index":376,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:156",{"_index":390,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:186",{"_index":375,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:19",{"_index":437,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:207",{"_index":373,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:216",{"_index":387,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:225",{"_index":379,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:244",{"_index":382,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:25",{"_index":436,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:253",{"_index":396,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:262",{"_index":392,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:278",{"_index":385,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:295",{"_index":372,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:31",{"_index":438,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:315",{"_index":368,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:37",{"_index":434,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:47",{"_index":433,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network/interfaces/node.interface",{"_index":779,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["network/smart",{"_index":497,"title":{},"body":{"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["networkservice",{"_index":1015,"title":{},"body":{"index.html":{}}}],["new",{"_index":111,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{}}}],["nft",{"_index":530,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["nft_exchange",{"_index":545,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["ngmodule",{"_index":36,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{},"index.html":{}}}],["ngx",{"_index":718,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["node",{"_index":1,"title":{"interfaces/Node.html":{}},"body":{"interfaces/Node.html":{},"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{},"index.html":{}}}],["node.node.operator",{"_index":831,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["node.online",{"_index":830,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["node.operator",{"_index":471,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["node.url",{"_index":721,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["node.url.replace('https",{"_index":722,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["node.url}/${data.image",{"_index":565,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["node/hsuite/holders",{"_index":556,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["node/hsuite/staking",{"_index":557,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["node/network",{"_index":465,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["node/utilities",{"_index":555,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["nodeaccountid",{"_index":281,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["nodeobservable",{"_index":346,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["nodeobserver",{"_index":347,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["nodes",{"_index":348,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["nodesocket",{"_index":792,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["nodesocket.connect",{"_index":825,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["nodesocket.getnode",{"_index":790,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["nodesocket.getnode().operator",{"_index":821,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["nodesocket.on(\"connect",{"_index":819,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["nodesocket.on(\"disconnect",{"_index":820,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["nodesonline",{"_index":738,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["nodessockets",{"_index":739,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["notification",{"_index":655,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["now",{"_index":803,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["npm",{"_index":942,"title":{},"body":{"index.html":{}}}],["null",{"_index":206,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["number",{"_index":266,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["object",{"_index":115,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocket.html":{}}}],["observable",{"_index":138,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["observehashpackconnection",{"_index":52,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["observer",{"_index":377,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["obtain",{"_index":922,"title":{},"body":{"index.html":{}}}],["offers",{"_index":1040,"title":{},"body":{"index.html":{}}}],["official",{"_index":909,"title":{},"body":{"index.html":{}}}],["one",{"_index":450,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["online",{"_index":756,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["open",{"_index":966,"title":{},"body":{"index.html":{}}}],["operator",{"_index":10,"title":{},"body":{"interfaces/Node.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["optional",{"_index":70,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["options",{"_index":726,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["order",{"_index":689,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["out",{"_index":31,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{},"index.html":{},"overview.html":{}}}],["override",{"_index":380,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["overview",{"_index":1047,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":858,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pairingdata",{"_index":150,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["pairingdata.accountids",{"_index":154,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["pairingdata.topic",{"_index":152,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["pairingstring",{"_index":117,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["param",{"_index":139,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["parameters",{"_index":69,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["params",{"_index":365,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{}}}],["parsedhashconnectdata",{"_index":190,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["parsedhashconnectdata.accountids.length",{"_index":192,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["payload",{"_index":73,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["picking",{"_index":836,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["please",{"_index":810,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["post",{"_index":363,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["postapiendpoint",{"_index":356,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["postapiendpoint(endpoint",{"_index":384,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["power",{"_index":898,"title":{},"body":{"index.html":{}}}],["previewnet",{"_index":87,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["private",{"_index":46,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["project",{"_index":908,"title":{},"body":{"index.html":{}}}],["projects/.../test.ts",{"_index":1054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/sdk/src/lib/smart",{"_index":575,"title":{},"body":{"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"coverage.html":{}}}],["projects/sdk/src/lib/utils/smart",{"_index":708,"title":{},"body":{"injectables/SmartNodeSocket.html":{},"coverage.html":{}}}],["projects/sdk/src/services/hashpack/smart",{"_index":32,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"coverage.html":{}}}],["projects/sdk/src/services/hedera/smart",{"_index":221,"title":{},"body":{"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"coverage.html":{}}}],["projects/sdk/src/services/network/interfaces/node.interface.ts",{"_index":6,"title":{},"body":{"interfaces/Node.html":{},"coverage.html":{}}}],["projects/sdk/src/services/network/smart",{"_index":342,"title":{},"body":{"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"coverage.html":{}}}],["projects/sdk/src/services/rest/smart",{"_index":495,"title":{},"body":{"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"coverage.html":{}}}],["projects/sdk/src/services/sockets/smart",{"_index":735,"title":{},"body":{"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{}}}],["projects/sdk/src/test.ts",{"_index":851,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":79,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["promise(async",{"_index":168,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"interfaces/Node.html":{},"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{},"properties.html":{}}}],["property",{"_index":110,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{}}}],["proposaldocument",{"_index":264,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["proposaltransaction",{"_index":235,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["proposaltransaction(daotokenid",{"_index":258,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["provide",{"_index":880,"title":{},"body":{"index.html":{}}}],["provided",{"_index":925,"title":{},"body":{"index.html":{}}}],["providedin",{"_index":136,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["provider",{"_index":161,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["providers",{"_index":34,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{},"index.html":{}}}],["provides",{"_index":1016,"title":{},"body":{"index.html":{}}}],["providing",{"_index":1037,"title":{},"body":{"index.html":{}}}],["publc",{"_index":524,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["public",{"_index":17,"title":{},"body":{"interfaces/Node.html":{},"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["publickey",{"_index":11,"title":{},"body":{"interfaces/Node.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["query",{"_index":729,"title":{},"body":{"injectables/SmartNodeSocket.html":{},"index.html":{}}}],["random",{"_index":285,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["re",{"_index":659,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["read",{"_index":1028,"title":{},"body":{"index.html":{}}}],["ready",{"_index":636,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["reasons",{"_index":805,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["receipt",{"_index":307,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["received",{"_index":654,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["referrer",{"_index":730,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["reject",{"_index":170,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["reject(error",{"_index":181,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["rejected",{"_index":974,"title":{},"body":{"index.html":{}}}],["related",{"_index":980,"title":{},"body":{"index.html":{}}}],["release",{"_index":886,"title":{},"body":{"index.html":{}}}],["request",{"_index":967,"title":{},"body":{"index.html":{}}}],["requested",{"_index":1001,"title":{},"body":{"index.html":{}}}],["require",{"_index":855,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":1055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":487,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["reset",{"_index":30,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{},"overview.html":{}}}],["resolve",{"_index":169,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["resolve(\"all",{"_index":700,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["resolve(authresponse",{"_index":209,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["resolve(await",{"_index":460,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["resolve(false",{"_index":195,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["resolve(hashconnectresponse",{"_index":203,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["resolve(response",{"_index":485,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["resolve(response.data",{"_index":491,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["resolve(responsedata",{"_index":311,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["resolve(this.hashconnectdata",{"_index":194,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["resolve(this.hashconnectdata.pairingstring",{"_index":178,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["resolve(this.nodessockets",{"_index":827,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["resolve(transaction.tobytes",{"_index":297,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["resolve(true",{"_index":187,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["response",{"_index":304,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"index.html":{}}}],["response.foreach((data",{"_index":563,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["response.success",{"_index":308,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["responsedata",{"_index":306,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["responsedata.receipt",{"_index":309,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["responsible",{"_index":133,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["rest",{"_index":614,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["rest.module",{"_index":226,"title":{},"body":{"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeSdkModule.html":{}}}],["rest.module.ts",{"_index":496,"title":{},"body":{"modules/SmartNodeRestModule.html":{}}}],["rest.service",{"_index":276,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeSdkService.html":{}}}],["rest.service.ts",{"_index":499,"title":{},"body":{"injectables/SmartNodeRestService.html":{},"coverage.html":{}}}],["rest.service.ts:10",{"_index":513,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:113",{"_index":526,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:134",{"_index":521,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:163",{"_index":517,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:192",{"_index":547,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:223",{"_index":550,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:24",{"_index":522,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:249",{"_index":537,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:277",{"_index":529,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:305",{"_index":533,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:46",{"_index":515,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:73",{"_index":539,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:93",{"_index":523,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest/smart",{"_index":225,"title":{},"body":{"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{}}}],["restservice",{"_index":1026,"title":{},"body":{"index.html":{}}}],["results",{"_index":20,"title":{},"body":{"interfaces/Node.html":{},"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":605,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["return",{"_index":167,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["returns",{"_index":78,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["returntransaction",{"_index":97,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{}}}],["right",{"_index":884,"title":{},"body":{"index.html":{}}}],["root",{"_index":137,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["run",{"_index":899,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":128,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"dependencies.html":{}}}],["safely",{"_index":690,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["same",{"_index":923,"title":{},"body":{"index.html":{}}}],["sdk",{"_index":876,"title":{},"body":{"index.html":{}}}],["sdk.module",{"_index":954,"title":{},"body":{"index.html":{}}}],["sdk.module.ts",{"_index":576,"title":{},"body":{"modules/SmartNodeSdkModule.html":{}}}],["sdk.service",{"_index":584,"title":{},"body":{"modules/SmartNodeSdkModule.html":{}}}],["sdk.service.ts",{"_index":585,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"coverage.html":{}}}],["sdk.service.ts:115",{"_index":621,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:124",{"_index":623,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:133",{"_index":618,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:191",{"_index":601,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:20",{"_index":626,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:211",{"_index":604,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:219",{"_index":612,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:227",{"_index":609,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:235",{"_index":613,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:243",{"_index":615,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:25",{"_index":625,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:251",{"_index":611,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:30",{"_index":599,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdkhow",{"_index":949,"title":{},"body":{"index.html":{}}}],["sdkinstead",{"_index":946,"title":{},"body":{"index.html":{}}}],["secure",{"_index":661,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["security",{"_index":804,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["send",{"_index":101,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["senderid",{"_index":246,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["sendmessagetosmartnodes",{"_index":750,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sendmessagetosmartnodes(payload",{"_index":769,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sendtransaction",{"_index":62,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["sendtransaction(transaction",{"_index":95,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["serversigningaccount",{"_index":679,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["service",{"_index":132,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["services",{"_index":992,"title":{},"body":{"index.html":{}}}],["services/hashpack/smart",{"_index":577,"title":{},"body":{"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{}}}],["services/hedera/smart",{"_index":578,"title":{},"body":{"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{}}}],["services/network/smart",{"_index":580,"title":{},"body":{"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{}}}],["services/rest/smart",{"_index":581,"title":{},"body":{"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{}}}],["services/sockets/smart",{"_index":582,"title":{},"body":{"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{}}}],["session",{"_index":83,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["set",{"_index":388,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["setaccountid(accountid",{"_index":301,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["setcurrentnode",{"_index":357,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["setcurrentnode(node",{"_index":386,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["setnetwork",{"_index":358,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["setnetwork(network",{"_index":389,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["setnodeaccountids([this.getrandomnodefornetwork",{"_index":295,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["setnodefromactivenodes",{"_index":359,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["setnodefromactivenodes(activenodes",{"_index":391,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["setting",{"_index":448,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["settokenids(tokenids",{"_index":300,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["settransactionmemo(`${daotokenid",{"_index":332,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["settransactionmemo(`${daotokenid}/${daodocument.limited.councilnftid",{"_index":328,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["settransactionmemo(`${daotokenid}/${proposaldocument.consensus_timestamp}/${proposaldocument.type}/${votedoption",{"_index":331,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["settransactionmemo(memo",{"_index":337,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["setup",{"_index":444,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"index.html":{}}}],["setutilities",{"_index":236,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["setutilities(utilities",{"_index":260,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["shall",{"_index":943,"title":{},"body":{"index.html":{}}}],["show",{"_index":968,"title":{},"body":{"index.html":{}}}],["shuffle",{"_index":397,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["shufflenode",{"_index":360,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["shufflenode(override",{"_index":395,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["sign",{"_index":1002,"title":{},"body":{"index.html":{}}}],["signature",{"_index":72,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["signature.serversigningaccount",{"_index":211,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["signature.signature",{"_index":212,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["signed",{"_index":973,"title":{},"body":{"index.html":{}}}],["signeddata",{"_index":677,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{}}}],["signer",{"_index":165,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["single",{"_index":917,"title":{},"body":{"index.html":{}}}],["smart",{"_index":38,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["smartnode",{"_index":608,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["smartnodehashpackmodule",{"_index":23,"title":{"modules/SmartNodeHashPackModule.html":{}},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules.html":{},"overview.html":{}}}],["smartnodehashpackservice",{"_index":28,"title":{"injectables/SmartNodeHashPackService.html":{}},"body":{"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeSdkService.html":{},"coverage.html":{},"overview.html":{}}}],["smartnodehederamodule",{"_index":215,"title":{"modules/SmartNodeHederaModule.html":{}},"body":{"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules.html":{},"overview.html":{}}}],["smartnodehederaservice",{"_index":220,"title":{"injectables/SmartNodeHederaService.html":{}},"body":{"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeSdkService.html":{},"coverage.html":{},"overview.html":{}}}],["smartnodenetworkmodule",{"_index":338,"title":{"modules/SmartNodeNetworkModule.html":{}},"body":{"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{},"modules.html":{},"overview.html":{}}}],["smartnodenetworkservice",{"_index":341,"title":{"injectables/SmartNodeNetworkService.html":{}},"body":{"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{},"overview.html":{}}}],["smartnoderestmodule",{"_index":219,"title":{"modules/SmartNodeRestModule.html":{}},"body":{"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules.html":{},"overview.html":{}}}],["smartnoderestservice",{"_index":239,"title":{"injectables/SmartNodeRestService.html":{}},"body":{"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"coverage.html":{},"overview.html":{}}}],["smartnodesdkmodule",{"_index":569,"title":{"modules/SmartNodeSdkModule.html":{}},"body":{"modules/SmartNodeSdkModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["smartnodesdkservice",{"_index":574,"title":{"injectables/SmartNodeSdkService.html":{}},"body":{"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["smartnodesocket",{"_index":707,"title":{"injectables/SmartNodeSocket.html":{}},"body":{"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{}}}],["smartnodesocket(node",{"_index":817,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["smartnodesocketsmodule",{"_index":573,"title":{"modules/SmartNodeSocketsModule.html":{}},"body":{"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{},"modules.html":{},"overview.html":{}}}],["smartnodesocketsservice",{"_index":65,"title":{"injectables/SmartNodeSocketsService.html":{}},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{},"overview.html":{}}}],["sn1.hbarsuite.network",{"_index":401,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["sn1.hbarsuite.network/public/logos/rounded_logo.png",{"_index":148,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["sn2.hbarsuite.network",{"_index":404,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["sn3.hbarsuite.network",{"_index":407,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["sn4.hbarsuite.network",{"_index":410,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["sn5.hbarsuite.network",{"_index":411,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["sn6.hbarsuite.network",{"_index":414,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["sn7.hbarsuite.network",{"_index":417,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["sn8.hbarsuite.network",{"_index":420,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["socials",{"_index":914,"title":{},"body":{"index.html":{}}}],["socket",{"_index":712,"title":{},"body":{"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["socket.class",{"_index":778,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["socket.class.ts",{"_index":710,"title":{},"body":{"injectables/SmartNodeSocket.html":{},"coverage.html":{}}}],["socket.class.ts:14",{"_index":716,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["socket.class.ts:49",{"_index":717,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["socket.disconnect",{"_index":814,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["socket/smart",{"_index":709,"title":{},"body":{"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{}}}],["socketobservable",{"_index":740,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["socketobserver",{"_index":741,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets",{"_index":616,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["sockets.module",{"_index":583,"title":{},"body":{"modules/SmartNodeSdkModule.html":{}}}],["sockets.module.ts",{"_index":736,"title":{},"body":{"modules/SmartNodeSocketsModule.html":{}}}],["sockets.service",{"_index":131,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{},"modules/SmartNodeSocketsModule.html":{}}}],["sockets.service.ts",{"_index":737,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{},"coverage.html":{}}}],["sockets.service.ts:106",{"_index":770,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:115",{"_index":752,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:125",{"_index":766,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:143",{"_index":764,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:20",{"_index":773,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:215",{"_index":768,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:26",{"_index":772,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:269",{"_index":771,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:32",{"_index":776,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:38",{"_index":775,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:44",{"_index":751,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:61",{"_index":761,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:80",{"_index":753,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:88",{"_index":758,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:96",{"_index":755,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets/smart",{"_index":130,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["socketservice",{"_index":1030,"title":{},"body":{"index.html":{}}}],["something",{"_index":998,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Node.html":{},"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["spec\\.ts",{"_index":1056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["specific",{"_index":383,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["spinner",{"_index":969,"title":{},"body":{"index.html":{}}}],["src/app/services/src/lib/smart",{"_index":953,"title":{},"body":{"index.html":{}}}],["staking",{"_index":527,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["started",{"_index":874,"title":{"index.html":{}},"body":{}}],["statements",{"_index":842,"title":{},"body":{"coverage.html":{}}}],["storage",{"_index":124,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["storage.get",{"_index":188,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["storage.remove",{"_index":185,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["storage.set",{"_index":156,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["string",{"_index":13,"title":{},"body":{"interfaces/Node.html":{},"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["subject",{"_index":112,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["subscribe",{"_index":607,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["subscribing",{"_index":646,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["success",{"_index":802,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["super",{"_index":725,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["support",{"_index":1044,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1045,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":927,"title":{},"body":{"index.html":{}}}],["switch",{"_index":282,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["switch(event.method",{"_index":965,"title":{},"body":{"index.html":{}}}],["switches",{"_index":650,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["table",{"_index":857,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":856,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":890,"title":{},"body":{"index.html":{}}}],["technology",{"_index":895,"title":{},"body":{"index.html":{}}}],["test",{"_index":1057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["testnet",{"_index":86,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["this._initsockets(hashconnectdata",{"_index":644,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.appmetadata",{"_index":141,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.callapiendpoint('get",{"_index":486,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.callapiendpoint('post",{"_index":484,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.dataobserver.asobservable",{"_index":122,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.dataobserver.next(this.hashconnectdata",{"_index":159,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.eventsobservable",{"_index":701,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.eventsobserver.asobservable",{"_index":624,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.eventsobserver.next",{"_index":685,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.eventsobserver.next(event",{"_index":674,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.getapiendpoint('smart",{"_index":464,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.getnetwork",{"_index":458,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.getrandomnode(override",{"_index":476,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.getspecificnode(number(node",{"_index":453,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.handleauthevent(event.content",{"_index":668,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.handleerrors(event.content",{"_index":671,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.handlegenericevents(event.content",{"_index":669,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.hashconnect",{"_index":140,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnect.authenticate",{"_index":210,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnect.clearconnectionsanddata",{"_index":184,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnect.connecttolocalwallet",{"_index":177,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnect.disconnect(this.hashconnectdata.topic",{"_index":182,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnect.getprovider",{"_index":162,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnect.getsigner(provider",{"_index":166,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnect.init(this.appmetadata",{"_index":173,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnect.pairingevent.on(async",{"_index":149,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnect.sendtransaction",{"_index":202,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnectdata",{"_index":174,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnectdata.accountids",{"_index":153,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnectdata.topic",{"_index":151,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashpackwallet",{"_index":641,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.initauth(wallet",{"_index":782,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.initmainsocket(currentnode",{"_index":793,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.initnodes(wallet",{"_index":781,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.mainsocket",{"_index":783,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.mainsocket.connect",{"_index":788,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.mainsocket.disconnect",{"_index":787,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.mainsocket.emit(topic",{"_index":786,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.mainsocket.fromevent('authenticate').subscribe(async",{"_index":798,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.mainsocket.fromevent('authentication').subscribe(async",{"_index":809,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.mainsocket.fromevent('errors').subscribe(async",{"_index":797,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.mainsocket.fromevent('events').subscribe((message",{"_index":794,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.mainsocket.getnode().operator",{"_index":801,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.makebytes(transaction",{"_index":303,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["this.network",{"_index":163,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{}}}],["this.network[network",{"_index":447,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.node",{"_index":452,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocket.html":{}}}],["this.node).then(async",{"_index":631,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.node.url",{"_index":488,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.nodeobservable",{"_index":441,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.nodeobserver.asobservable",{"_index":435,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.nodeobserver.next(this.node",{"_index":479,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.nodes",{"_index":446,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.nodes.find(node",{"_index":470,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.nodes.length",{"_index":474,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.nodes[index",{"_index":475,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.nodes[math.floor(math.random",{"_index":473,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.nodesonline",{"_index":785,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.nodesonline.set(nodesocket.getnode().url",{"_index":818,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.nodessockets",{"_index":815,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.nodessockets.foreach(nodesocket",{"_index":789,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.nodessockets.foreach(socket",{"_index":813,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.nodessockets.length",{"_index":812,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.nodessockets.push(nodesocket",{"_index":826,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.setnetwork(network",{"_index":461,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.setnodefromactivenodes",{"_index":824,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.shufflenode(override",{"_index":451,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.smartnodehashpackservice",{"_index":703,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodehashpackservice.authenticatewallet",{"_index":681,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodehashpackservice.clearauthsession",{"_index":697,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodehashpackservice.getauthsession",{"_index":676,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodehashpackservice.loadhashconnectdata",{"_index":640,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodehashpackservice.observehashpackconnection.subscribe(async",{"_index":665,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodehashpackservice.sendtransaction(transbytes",{"_index":305,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["this.smartnodehederaservice",{"_index":706,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodehederaservice.setutilities(utilities",{"_index":639,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodenetworkservice",{"_index":702,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodenetworkservice.getapiendpoint",{"_index":558,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["this.smartnodenetworkservice.getapiendpoint(`games/coin/flip",{"_index":553,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["this.smartnodenetworkservice.getapiendpoint(`games/token",{"_index":551,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["this.smartnodenetworkservice.getapiendpoint(`smart",{"_index":554,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["this.smartnodenetworkservice.getapiendpoint(`tokens/list",{"_index":562,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["this.smartnodenetworkservice.getcurrentnode",{"_index":552,"title":{},"body":{"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodenetworkservice.getnetwork()).data",{"_index":699,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodenetworkservice.getnodeobserver().subscribe(async",{"_index":651,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodenetworkservice.setnetwork(this.network",{"_index":630,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodenetworkservice.setnodefromactivenodes(network",{"_index":838,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.smartnoderestservice",{"_index":704,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnoderestservice.gettokeninfos(this.utilities.hsuite.id)).data",{"_index":317,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["this.smartnoderestservice.getutilities()).data",{"_index":638,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnoderestservice.loadfees('nft_exchange')).data",{"_index":333,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["this.smartnodesdkservice.geteventsobserver().subscribe(async(event",{"_index":964,"title":{},"body":{"index.html":{}}}],["this.smartnodesdkservice.gethashpackservice().observehashpackconnection.subscribe(async(saveddata",{"_index":989,"title":{},"body":{"index.html":{}}}],["this.smartnodesocketsservice",{"_index":705,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodesocketsservice.authorizewallet",{"_index":663,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodesocketsservice.getmainsocket",{"_index":653,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodesocketsservice.getmainsocket().emit('authenticate",{"_index":684,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodesocketsservice.getsocketobserver().subscribe(async",{"_index":666,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodesocketsservice.init",{"_index":698,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodesocketsservice.initauth(this.hashpackwallet",{"_index":662,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.socketobservable",{"_index":784,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.socketobserver.asobservable",{"_index":774,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.socketobserver.next",{"_index":795,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.utilities",{"_index":280,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["this.utilities.vehsuite.treasury",{"_index":330,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["those",{"_index":934,"title":{},"body":{"index.html":{}}}],["throw",{"_index":480,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["time",{"_index":806,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["times(10",{"_index":320,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["title",{"_index":686,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["token",{"_index":534,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["tokenassociatetransaction",{"_index":271,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["tokenid",{"_index":312,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeRestService.html":{}}}],["tokenids",{"_index":244,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["tokens",{"_index":541,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["tokens/chain",{"_index":568,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["tokens/info",{"_index":566,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["topic",{"_index":116,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["track",{"_index":1035,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":102,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"index.html":{}}}],["transaction.freeze",{"_index":296,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["transaction.settransactionid(transactionid",{"_index":294,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["transactionbytes",{"_index":299,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["transactionhashpack",{"_index":196,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["transactionid",{"_index":272,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeRestService.html":{}}}],["transactionid.generate(accountid",{"_index":293,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["transactionreceipt",{"_index":273,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["transactionreceipt.frombytes(response.receipt",{"_index":310,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["transbytes",{"_index":302,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["transfertransaction",{"_index":274,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["transport",{"_index":822,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["transports",{"_index":727,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["trials",{"_index":367,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["triggered",{"_index":1013,"title":{},"body":{"index.html":{}}}],["true",{"_index":105,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":171,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["tslib",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["twitter",{"_index":915,"title":{},"body":{"index.html":{}}}],["type",{"_index":14,"title":{},"body":{"interfaces/Node.html":{},"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ui",{"_index":970,"title":{},"body":{"index.html":{}}}],["uint8array",{"_index":298,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["uint8array(event.data.authresponse.signeddata.signature",{"_index":678,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["under",{"_index":930,"title":{},"body":{"index.html":{}}}],["underlying",{"_index":1010,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":107,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{}}}],["unless",{"_index":996,"title":{},"body":{"index.html":{}}}],["up",{"_index":837,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["update",{"_index":456,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["updating",{"_index":835,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["url",{"_index":12,"title":{},"body":{"interfaces/Node.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocket.html":{}}}],["urls",{"_index":935,"title":{},"body":{"index.html":{}}}],["use",{"_index":449,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["used",{"_index":637,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["user",{"_index":972,"title":{},"body":{"index.html":{}}}],["uses",{"_index":897,"title":{},"body":{"index.html":{}}}],["usevalue",{"_index":957,"title":{},"body":{"index.html":{}}}],["utilities",{"_index":229,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["validating",{"_index":1000,"title":{},"body":{"index.html":{}}}],["validators",{"_index":1003,"title":{},"body":{"index.html":{}}}],["value",{"_index":104,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":852,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1053,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vehsuitereward",{"_index":318,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["version",{"_index":1050,"title":{},"body":{"properties.html":{}}}],["very",{"_index":442,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"index.html":{}}}],["void",{"_index":262,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["votedoption",{"_index":265,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["votetransaction",{"_index":237,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["votetransaction(daotokenid",{"_index":263,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["wallet",{"_index":76,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["walletid",{"_index":77,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["wallets/balance",{"_index":560,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["wallets/info",{"_index":559,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["wallets/nfts",{"_index":567,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["want",{"_index":905,"title":{},"body":{"index.html":{}}}],["warning",{"_index":693,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["way",{"_index":1007,"title":{},"body":{"index.html":{}}}],["website",{"_index":911,"title":{},"body":{"index.html":{}}}],["websocket",{"_index":728,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["websockets",{"_index":603,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["welcome",{"_index":877,"title":{},"body":{"index.html":{}}}],["well",{"_index":928,"title":{},"body":{"index.html":{}}}],["what's",{"_index":894,"title":{},"body":{"index.html":{}}}],["whitelistednetwork",{"_index":457,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["whitelistednetwork.data",{"_index":459,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["wish",{"_index":951,"title":{},"body":{"index.html":{}}}],["work",{"_index":952,"title":{},"body":{"index.html":{}}}],["wrapping",{"_index":1020,"title":{},"body":{"index.html":{}}}],["ws://')}/${namespace",{"_index":724,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["wss://').replace('http",{"_index":723,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["x.node",{"_index":834,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["yarn",{"_index":947,"title":{},"body":{"index.html":{}}}],["yes",{"_index":90,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeRestService.html":{}}}],["you're",{"_index":982,"title":{},"body":{"index.html":{}}}],["zone.js",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":29,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Node.html":{"url":"interfaces/Node.html","title":"interface - Node","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Node\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/sdk/src/services/network/interfaces/node.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Node interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            operator\n                                        \n                                \n                                \n                                        \n                                            publicKey\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        operator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operator:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the node operator\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publicKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The public key of the node\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The url of the node\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Node {\n  /**\n   * The name of the node operator\n   * @type {string}\n   */\n  operator: string,\n\n  /**\n   * The public key of the node\n   * @type {string}\n   */\n  publicKey: string,\n\n  /**\n   * The url of the node\n   * @type {string}\n   */\n  url: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SmartNodeHashPackModule.html":{"url":"modules/SmartNodeHashPackModule.html","title":"module - SmartNodeHashPackModule","body":"\n                   \n\n\n\n\n    Modules\n    SmartNodeHashPackModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SmartNodeHashPackModule\n\n\n\ncluster_SmartNodeHashPackModule_providers\n\n\n\n\nSmartNodeHashPackService\n\nSmartNodeHashPackService\n\n\n\nSmartNodeHashPackModule\n\nSmartNodeHashPackModule\n\nSmartNodeHashPackModule -->\n\nSmartNodeHashPackService->SmartNodeHashPackModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/sdk/src/services/hashpack/smart-node-hashpack.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SmartNodeHashPackService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SmartNodeHashPackService } from './smart-node-hashpack.service';\n\n@NgModule({\n  imports: [],\n  providers: [\n    SmartNodeHashPackService\n  ],\n  exports: [],\n})\nexport class SmartNodeHashPackModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SmartNodeHashPackService.html":{"url":"injectables/SmartNodeHashPackService.html","title":"injectable - SmartNodeHashPackService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SmartNodeHashPackService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts\n        \n\n\n            \n                Description\n            \n            \n                 SmartNodeHashPackService\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                appMetadata\n                            \n                            \n                                    Private\n                                dataObserver\n                            \n                            \n                                    Private\n                                hashconnect\n                            \n                            \n                                    Private\n                                hashconnectData\n                            \n                            \n                                    Private\n                                network\n                            \n                            \n                                    Public\n                                observeHashpackConnection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticateWallet\n                            \n                            \n                                    Public\n                                    Async\n                                clearAuthSession\n                            \n                            \n                                    Public\n                                    Async\n                                connect\n                            \n                            \n                                    Public\n                                    Async\n                                disconnect\n                            \n                            \n                                    Public\n                                    Async\n                                getAuthSession\n                            \n                            \n                                    Public\n                                getSigner\n                            \n                            \n                                    Public\n                                    Async\n                                loadHashconnectData\n                            \n                            \n                                    Public\n                                    Async\n                                sendTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(smartNodeSocketsService: SmartNodeSocketsService)\n                    \n                \n                        \n                            \n                                Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:49\n                            \n                        \n\n                \n                    \n                            Constructor Method\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        smartNodeSocketsService\n                                                  \n                                                        \n                                                                        SmartNodeSocketsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        authenticateWallet\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticateWallet(walletId: string, signature: any, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:262\n                \n            \n\n\n            \n                \n                    Public method to authenticate a wallet\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    walletId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signature\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        clearAuthSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearAuthSession()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:220\n                \n            \n\n\n            \n                \n                    Public method to clear an authentication session\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        connect\n                        \n                    \n                \n            \n            \n                \n                    \n                    connect(network: \"mainnet\" | \"testnet\" | \"previewnet\", type?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:100\n                \n            \n\n\n            \n                \n                    Public method to connect to HashPack\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    network\n                                    \n                                            \"mainnet\" | \"testnet\" | \"previewnet\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        disconnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    disconnect()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:127\n                \n            \n\n\n            \n                \n                     Public method disconnect\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAuthSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthSession()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:235\n                \n            \n\n\n            \n                \n                    Public method to get an authentication session\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getSigner\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSigner()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:83\n                \n            \n\n\n            \n                \n                    Public method getSigner\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        loadHashconnectData\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadHashconnectData()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:159\n                \n            \n\n\n            \n                \n                    Public method loadHashconnectData\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendTransaction(transaction: any, accountId: string, returnTransaction: boolean, hideNft: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:190\n                \n            \n\n\n            \n                \n                    Public method to send a transaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    transaction\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    returnTransaction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                                \n                                    hideNft\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        appMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HashConnectTypes.AppMetadata\n\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:24\n                        \n                    \n\n            \n                \n                    Private property appMetadata\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dataObserver\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:29\n                        \n                    \n\n            \n                \n                    Private property dataObserver\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hashconnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HashConnect\n\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:19\n                        \n                    \n\n            \n                \n                    Private property hashconnect\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hashconnectData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    topic: '',\n    pairingString: '',\n    accountIds: new Array()\n  }\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:45\n                        \n                    \n\n            \n                \n                    Private property hashconnectData\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:40\n                        \n                    \n\n            \n                \n                    Private property network\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        observeHashpackConnection\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.dataObserver.asObservable()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:35\n                        \n                    \n\n            \n                \n                    Public property observeHashpackConnection\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Storage } from '@capacitor/storage';\nimport { HashConnect, HashConnectTypes, MessageTypes } from 'hashconnect';\nimport { Subject } from 'rxjs';\nimport * as lodash from 'lodash';\nimport { SmartNodeSocketsService } from '../sockets/smart-node-sockets.service';\n\n/**\n *  SmartNodeHashPackService\n * @description This service is responsible for handling the HashPack connection\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SmartNodeHashPackService {\n  /**\n   * Private property hashconnect\n   */\n  private hashconnect: HashConnect;\n\n  /**\n   * Private property appMetadata\n   */\n  private appMetadata: HashConnectTypes.AppMetadata;\n\n  /**\n   * Private property dataObserver\n   */\n  private dataObserver = new Subject();\n\n  /**\n   * Public property observeHashpackConnection\n   * @returns {Observable}\n   */\n  public observeHashpackConnection = this.dataObserver.asObservable();\n\n  /**\n   * Private property network\n   */\n  private network: string;\n\n  /**\n   * Private property hashconnectData\n   */\n  private hashconnectData = {\n    topic: '',\n    pairingString: '',\n    accountIds: new Array()\n  }\n\n  /**\n   * Constructor Method\n   * @param {smartNodeSocketsService} smartNodeSocketsService\n   */\n  constructor(\n    private smartNodeSocketsService: SmartNodeSocketsService\n  ) {\n    this.hashconnect = new HashConnect();\n\n    this.appMetadata = {\n      name: \"HSuite Finance\",\n      description: \"Enhanching the Hedera Network\",\n      icon: \"https://testnet-sn1.hbarsuite.network/public/logos/rounded_logo.png\"\n    };\n\n    this.hashconnect.pairingEvent.on(async (pairingData) => {\n      this.hashconnectData.topic = pairingData.topic;\n      this.hashconnectData.accountIds = pairingData.accountIds;\n\n      await Storage.set({\n        key: 'hashconnect.data',\n        value: JSON.stringify(this.hashconnectData),\n      });\n\n      this.dataObserver.next(this.hashconnectData);\n    });\n  }\n\n  /**\n   * Public method getSigner\n   * @returns {any}\n   */\n  public getSigner(): any {\n    const provider = this.hashconnect.getProvider(\n      this.network,\n      this.hashconnectData.topic,\n      lodash.first(this.hashconnectData.accountIds)\n    );\n\n    const signer = this.hashconnect.getSigner(provider);\n    return signer;\n  }\n\n  /**\n   * Public method to connect to HashPack\n   * @param {string} network\n   * @param {string} type\n   * @returns {Promise}\n   */\n  public async connect(network: 'mainnet' | 'testnet' | 'previewnet', type?: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        this.network = network;\n        let initData = await this.hashconnect.init(this.appMetadata, network, true);\n\n        this.hashconnectData = {\n          topic: initData.pairingString,\n          pairingString: initData.pairingString,\n          accountIds: initData.savedPairings[0]?.accountIds\n        }\n\n        if (type == 'hashpack') {\n          this.hashconnect.connectToLocalWallet();\n        }\n\n        resolve(this.hashconnectData.pairingString);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   *  Public method disconnect\n   * @returns {Promise}\n   */\n  public async disconnect(): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        try {\n          await this.hashconnect.disconnect(this.hashconnectData.topic);\n        } catch (error) {\n          console.error(error);\n        }\n\n        this.hashconnect.clearConnectionsAndData();\n\n        await Storage.remove({ key: 'hashconnect.data' });\n        await Storage.remove({ key: 'hashconnect.auth' });\n\n        this.hashconnectData = {\n          topic: '',\n          pairingString: '',\n          accountIds: new Array()\n        }\n\n        this.dataObserver.next(this.hashconnectData);\n        resolve(true);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Public method loadHashconnectData\n   * @returns {Promise}\n   */\n  public async loadHashconnectData(): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let hashconnectData = await Storage.get({ key: 'hashconnect.data' });\n\n        if (hashconnectData.value) {\n          let parsedHashconnectData = JSON.parse(hashconnectData.value);\n\n          if (parsedHashconnectData.accountIds.length > 0) {\n            this.hashconnectData = parsedHashconnectData;\n            resolve(this.hashconnectData);\n          } else {\n            resolve(false);\n          }\n        } else {\n          resolve(false);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Public method to send a transaction\n   * @param {any} transaction\n   * @param {string} accountId\n   * @param {boolean} returnTransaction\n   * @param {boolean} hideNft\n   * @returns {Promise}\n   */\n  public async sendTransaction(transaction: any, accountId: string, returnTransaction: boolean = true, hideNft: boolean = false) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const transactionHashPack: MessageTypes.Transaction = {\n          topic: this.hashconnectData.topic,\n          byteArray: transaction,\n\n          metadata: {\n            accountToSign: accountId,\n            returnTransaction: returnTransaction,\n            hideNft: hideNft\n          }\n        };\n\n        let hashconnectResponse = await this.hashconnect.sendTransaction(\n          this.hashconnectData.topic,\n          transactionHashPack\n        );\n\n        resolve(hashconnectResponse);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Public method to clear an authentication session\n   * @returns {Promise}\n   */\n  public async clearAuthSession(): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        await Storage.remove({ key: 'hashconnect.auth' });\n        resolve(true);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Public method to get an authentication session\n   * @returns {Promise}\n   */\n  public async getAuthSession(): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let auth = await Storage.get({\n          key: 'hashconnect.auth'\n        });\n\n        let authResponse = null;\n\n        if (auth.value) {\n          authResponse = JSON.parse(auth.value);\n        }\n\n        resolve(authResponse);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Public method to authenticate a wallet\n   * @param {string} walletId\n   * @param {any} signature\n   * @param {any} payload\n   * @returns {Promise}\n   */\n  public async authenticateWallet(walletId: string, signature: any, payload: any): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let authResponse = await this.hashconnect.authenticate(\n          this.hashconnectData.topic,\n          walletId,\n          signature.serverSigningAccount,\n          signature.signature,\n          payload);\n\n        if (authResponse.success) {\n          await Storage.set({\n            key: 'hashconnect.auth',\n            value: JSON.stringify(authResponse),\n          });\n        }\n\n        resolve(authResponse);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SmartNodeHederaModule.html":{"url":"modules/SmartNodeHederaModule.html","title":"module - SmartNodeHederaModule","body":"\n                   \n\n\n\n\n    Modules\n    SmartNodeHederaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SmartNodeHederaModule\n\n\n\ncluster_SmartNodeHederaModule_imports\n\n\n\ncluster_SmartNodeHederaModule_providers\n\n\n\n\nSmartNodeHashPackModule\n\nSmartNodeHashPackModule\n\n\n\nSmartNodeHederaModule\n\nSmartNodeHederaModule\n\nSmartNodeHederaModule -->\n\nSmartNodeHashPackModule->SmartNodeHederaModule\n\n\n\n\n\nSmartNodeRestModule\n\nSmartNodeRestModule\n\nSmartNodeHederaModule -->\n\nSmartNodeRestModule->SmartNodeHederaModule\n\n\n\n\n\nSmartNodeHederaService\n\nSmartNodeHederaService\n\nSmartNodeHederaModule -->\n\nSmartNodeHederaService->SmartNodeHederaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/sdk/src/services/hedera/smart-node-hedera.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SmartNodeHederaService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SmartNodeHashPackModule\n                        \n                        \n                            SmartNodeRestModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SmartNodeHashPackModule } from '../hashpack/smart-node-hashpack.module';\nimport { SmartNodeRestModule } from '../rest/smart-node-rest.module';\nimport { SmartNodeHederaService } from './smart-node-hedera.service';\n\n@NgModule({\n  imports: [\n    SmartNodeHashPackModule,\n    SmartNodeRestModule\n  ],\n  providers: [\n    SmartNodeHederaService\n  ],\n  exports: [],\n})\nexport class SmartNodeHederaModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SmartNodeHederaService.html":{"url":"injectables/SmartNodeHederaService.html","title":"injectable - SmartNodeHederaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SmartNodeHederaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/sdk/src/services/hedera/smart-node-hedera.service.ts\n        \n\n\n            \n                Description\n            \n            \n                SmartNodeHederaService\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                utilities\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                associateToken\n                            \n                            \n                                    Public\n                                    Async\n                                createDaoTransaction\n                            \n                            \n                                    Public\n                                    Async\n                                createNftPoolTransaction\n                            \n                            \n                                getRandomNodeForNetwork\n                            \n                            \n                                    Public\n                                    Async\n                                makeBytes\n                            \n                            \n                                    Public\n                                    Async\n                                proposalTransaction\n                            \n                            \n                                setUtilities\n                            \n                            \n                                    Public\n                                    Async\n                                voteTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(smartNodeHashPackService: SmartNodeHashPackService, smartNodeRestService: SmartNodeRestService, network: \"mainnet\" | \"testnet\" | \"local\")\n                    \n                \n                        \n                            \n                                Defined in projects/sdk/src/services/hedera/smart-node-hedera.service.ts:28\n                            \n                        \n\n                \n                    \n                            Constructor Method\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        smartNodeHashPackService\n                                                  \n                                                        \n                                                                        SmartNodeHashPackService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        smartNodeRestService\n                                                  \n                                                        \n                                                                        SmartNodeRestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        network\n                                                  \n                                                        \n                                                                    \"mainnet\" | \"testnet\" | \"local\"\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        associateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    associateToken(tokenIds: Array, accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hedera/smart-node-hedera.service.ts:103\n                \n            \n\n\n            \n                \n                    Public method associateToken\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenIds\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createDaoTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    createDaoTransaction(daoTokenId: string, senderId: string, daoDocument: literal type, fees: any, returnTransaction?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hedera/smart-node-hedera.service.ts:138\n                \n            \n\n\n            \n                \n                    Public method createDaoTransaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    daoTokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    daoDocument\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fees\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    returnTransaction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createNftPoolTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    createNftPoolTransaction(senderId: string, memo: string, returnTransaction?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hedera/smart-node-hedera.service.ts:287\n                \n            \n\n\n            \n                \n                    Public method createNftPoolTransaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    returnTransaction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRandomNodeForNetwork\n                        \n                    \n                \n            \n            \n                \ngetRandomNodeForNetwork()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hedera/smart-node-hedera.service.ts:56\n                \n            \n\n\n            \n                \n                    Public method getRandomNodeForNetwork\n\n\n                    \n                    \n                    \n                        Returns :     AccountId\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        makeBytes\n                        \n                    \n                \n            \n            \n                \n                    \n                    makeBytes(transaction: Transaction, accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hedera/smart-node-hedera.service.ts:80\n                \n            \n\n\n            \n                \n                    Public method makeBytes\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transaction\n                                    \n                                            Transaction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        proposalTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    proposalTransaction(daoTokenId: string, senderId: string, fees: any, returnTransaction?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hedera/smart-node-hedera.service.ts:242\n                \n            \n\n\n            \n                \n                    Public method proposalTransaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    daoTokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fees\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    returnTransaction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUtilities\n                        \n                    \n                \n            \n            \n                \nsetUtilities(utilities: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hedera/smart-node-hedera.service.ts:48\n                \n            \n\n\n            \n                \n                    Public method setUtilities\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    utilities\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        voteTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteTransaction(daoTokenId: string, proposalDocument: any, votedOption: number, senderId: string, fees: any, returnTransaction?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hedera/smart-node-hedera.service.ts:194\n                \n            \n\n\n            \n                \n                    Public method voteTransaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    daoTokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    proposalDocument\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    votedOption\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fees\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    returnTransaction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        utilities\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/hedera/smart-node-hedera.service.ts:28\n                        \n                    \n\n            \n                \n                    Utilities\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@angular/core';\nimport {\n  AccountId,\n  Hbar,\n  HbarUnit,\n  TokenAssociateTransaction,\n  Transaction,\n  TransactionId,\n  TransactionReceipt,\n  TransferTransaction\n} from '@hashgraph/sdk';\nimport { SmartNodeHashPackService } from '../hashpack/smart-node-hashpack.service';\nimport { SmartNodeRestService } from '../rest/smart-node-rest.service';\nimport Decimal from 'decimal.js';\n\n/**\n * SmartNodeHederaService\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SmartNodeHederaService {\n\n  /**\n   * Utilities\n   * @type {any}\n   */\n  utilities: any;\n\n  /**\n   * Constructor Method\n   * @param {SmartNodeHashPackService} smartNodeHashPackService\n   * @param {SmartNodeRestService} smartNodeRestService\n   * @param {string} network\n   * @returns {SmartNodeHederaService}\n   */\n  constructor(\n    private smartNodeHashPackService: SmartNodeHashPackService,\n    private smartNodeRestService: SmartNodeRestService,\n    @Inject('network') private network: 'mainnet' | 'testnet' | 'local'\n  ) { }\n\n  /**\n   * Public method setUtilities\n   * @param {any} utilities\n   * @returns {void}\n   */\n  setUtilities(utilities: any): void {\n    this.utilities = utilities;\n  }\n\n  /**\n   * Public method getRandomNodeForNetwork\n   * @returns {AccountId}\n   */\n  getRandomNodeForNetwork(): AccountId {\n    let nodeAccountId = 0;\n\n    switch (this.network) {\n      case 'mainnet':\n        // generating random number from 3 to 28...\n        nodeAccountId = Math.floor(Math.random() * (28 - 3 + 1) + 3);\n        break;\n      case 'testnet':\n      case 'local':\n        // generating random number from 3 to 9...\n        nodeAccountId = Math.floor(Math.random() * (9 - 3 + 1) + 3);\n        break;\n    }\n\n    return new AccountId(nodeAccountId);\n  }\n\n  /**\n   * Public method makeBytes\n   * @param {Transaction} transaction\n   * @param {string} accountId\n   * @returns {Promise}\n   */\n  public async makeBytes(transaction: Transaction, accountId: string) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let transactionId = TransactionId.generate(accountId);\n\n        transaction.setTransactionId(transactionId)\n          .setNodeAccountIds([this.getRandomNodeForNetwork()]);\n\n        await transaction.freeze();\n        resolve(transaction.toBytes());\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Public method associateToken\n   * @param {Uint8Array} transactionBytes\n   * @param {string} accountId\n   * @param {boolean} returnTransaction\n   * @returns {Promise}\n   */\n  public async associateToken(tokenIds: Array, accountId: string) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let transaction = await new TokenAssociateTransaction()\n          .setTokenIds(tokenIds)\n          .setAccountId(accountId);\n\n        let transBytes = await this.makeBytes(transaction, accountId);\n        let response: any = await this.smartNodeHashPackService.sendTransaction(transBytes, accountId, false);\n\n        let responseData: any = {\n          response: response,\n          receipt: null\n        }\n\n        if (response.success) {\n          responseData.receipt = TransactionReceipt.fromBytes(response.receipt as Uint8Array);\n        }\n\n        resolve(responseData);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Public method createDaoTransaction\n   * @param {string} daoTokenId\n   * @param {string} senderId\n   * @param {any} daoDocument\n   * @param {any} fees\n   * @param {boolean} returnTransaction\n   * @returns {Promise}\n   */\n  public async createDaoTransaction(\n    daoTokenId: string,\n    senderId: string,\n    daoDocument: {\n      about: string\n      tokenId: string\n      image: string\n      limited: {\n        councilNftId: string\n      }\n    },\n    fees: any,\n    returnTransaction?: boolean\n  ) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let hsuiteInfos = (await this.smartNodeRestService.getTokenInfos(this.utilities.hsuite.id)).data;\n        let veHsuiteReward = new Decimal(fees.fixed.hbar).div(hsuiteInfos.price).times(0.1)\n          .times(10 ** hsuiteInfos.decimals).toDecimalPlaces(hsuiteInfos.decimals).toNumber();\n\n        let transaction = new TransferTransaction()\n          .addHbarTransfer(senderId, Hbar.from(-fees.fixed.hbar, HbarUnit.Hbar))\n          .addHbarTransfer(fees.wallet, Hbar.from(fees.fixed.hbar, HbarUnit.Hbar))\n          .setTransactionMemo(`${daoTokenId}/${daoDocument.limited.councilNftId}`)\n          .addTokenTransfer(this.utilities.veHsuite.id, senderId, veHsuiteReward)\n          .addTokenTransfer(this.utilities.veHsuite.id, this.utilities.veHsuite.treasury, -veHsuiteReward);\n\n        let transBytes = await this.makeBytes(transaction, senderId);\n        let response: any = await this.smartNodeHashPackService.sendTransaction(transBytes, senderId, returnTransaction);\n\n        let responseData: any = {\n          response: response,\n          receipt: null\n        }\n\n        if (response.success && returnTransaction === false) {\n          responseData.receipt = TransactionReceipt.fromBytes(response.receipt as Uint8Array);\n        }\n\n        resolve(responseData);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Public method voteTransaction\n   * @param {string} daoTokenId\n   * @param {any} proposalDocument\n   * @param {number} votedOption\n   * @param {string} senderId\n   * @param {any} fees\n   * @param {boolean} returnTransaction\n   * @returns {Promise}\n   */\n  public async voteTransaction(\n    daoTokenId: string,\n    proposalDocument: any,\n    votedOption: number,\n    senderId: string,\n    fees: any,\n    returnTransaction?: boolean\n  ) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let hsuiteInfos = (await this.smartNodeRestService.getTokenInfos(this.utilities.hsuite.id)).data;\n        let veHsuiteReward = new Decimal(fees.fixed.hbar).div(hsuiteInfos.price).times(0.1)\n          .times(10 ** hsuiteInfos.decimals).toDecimalPlaces(hsuiteInfos.decimals).toNumber();\n\n        let transaction = new TransferTransaction()\n          .addHbarTransfer(senderId, Hbar.from(-fees.fixed.hbar, HbarUnit.Hbar))\n          .addHbarTransfer(fees.wallet, Hbar.from(fees.fixed.hbar, HbarUnit.Hbar))\n          .setTransactionMemo(`${daoTokenId}/${proposalDocument.consensus_timestamp}/${proposalDocument.type}/${votedOption}`)\n          .addTokenTransfer(this.utilities.veHsuite.id, senderId, veHsuiteReward)\n          .addTokenTransfer(this.utilities.veHsuite.id, this.utilities.veHsuite.treasury, -veHsuiteReward);\n\n        let transBytes = await this.makeBytes(transaction, senderId);\n        let response: any = await this.smartNodeHashPackService.sendTransaction(transBytes, senderId, returnTransaction);\n\n        let responseData: any = {\n          response: response,\n          receipt: null\n        }\n\n        if (response.success && returnTransaction === false) {\n          responseData.receipt = TransactionReceipt.fromBytes(response.receipt as Uint8Array);\n        }\n\n        resolve(responseData);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Public method proposalTransaction\n   * @param {string} daoTokenId\n   * @param {string} senderId\n   * @param {any} fees\n   * @param {boolean} returnTransaction\n   * @returns {Promise}\n   */\n  public async proposalTransaction(\n    daoTokenId: string,\n    senderId: string,\n    fees: any,\n    returnTransaction?: boolean\n  ) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let hsuiteInfos = (await this.smartNodeRestService.getTokenInfos(this.utilities.hsuite.id)).data;\n        let veHsuiteReward = new Decimal(fees.fixed.hbar).div(hsuiteInfos.price).times(0.1)\n          .times(10 ** hsuiteInfos.decimals).toDecimalPlaces(hsuiteInfos.decimals).toNumber();\n\n        let transaction = new TransferTransaction()\n          .addHbarTransfer(senderId, Hbar.from(-fees.fixed.hbar, HbarUnit.Hbar))\n          .addHbarTransfer(fees.wallet, Hbar.from(fees.fixed.hbar, HbarUnit.Hbar))\n          .setTransactionMemo(`${daoTokenId}`)\n          .addTokenTransfer(this.utilities.veHsuite.id, senderId, veHsuiteReward)\n          .addTokenTransfer(this.utilities.veHsuite.id, this.utilities.veHsuite.treasury, -veHsuiteReward);\n\n        let transBytes = await this.makeBytes(transaction, senderId);\n        let response: any = await this.smartNodeHashPackService.sendTransaction(transBytes, senderId, returnTransaction);\n\n        let responseData: any = {\n          response: response,\n          receipt: null\n        }\n\n        if (response.success && returnTransaction === false) {\n          responseData.receipt = TransactionReceipt.fromBytes(response.receipt as Uint8Array);\n        }\n\n        resolve(responseData);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Public method createNftPoolTransaction\n   * @param {string} senderId\n   * @param {string} memo\n   * @param {boolean} returnTransaction\n   * @returns {Promise}\n   */\n  public async createNftPoolTransaction(\n    senderId: string,\n    memo: string,\n    returnTransaction?: boolean\n  ) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let fees = (await this.smartNodeRestService.loadFees('nft_exchange')).data;\n        let hsuiteInfos = (await this.smartNodeRestService.getTokenInfos(this.utilities.hsuite.id)).data;\n        let veHsuiteReward = new Decimal(fees.create.fixed.hbar).div(hsuiteInfos.price).times(0.1)\n          .times(10 ** hsuiteInfos.decimals).toDecimalPlaces(hsuiteInfos.decimals).toNumber();\n\n        let transaction = new TransferTransaction()\n          .addHbarTransfer(fees.wallet, new Hbar(fees.create.fixed.hbar))\n          .addHbarTransfer(senderId, new Hbar(-fees.create.fixed.hbar))\n          .addTokenTransfer(this.utilities.veHsuite.id, senderId, veHsuiteReward)\n          .addTokenTransfer(this.utilities.veHsuite.id, this.utilities.veHsuite.treasury, -veHsuiteReward)\n          .setTransactionMemo(memo);\n\n        let transBytes = await this.makeBytes(transaction, senderId);\n        let response: any = await this.smartNodeHashPackService.sendTransaction(transBytes, senderId, returnTransaction);\n\n        let responseData: any = {\n          response: response,\n          receipt: null\n        }\n\n        if (response.success && returnTransaction === false) {\n          responseData.receipt = TransactionReceipt.fromBytes(response.receipt as Uint8Array);\n        }\n\n        resolve(responseData);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SmartNodeNetworkModule.html":{"url":"modules/SmartNodeNetworkModule.html","title":"module - SmartNodeNetworkModule","body":"\n                   \n\n\n\n\n    Modules\n    SmartNodeNetworkModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SmartNodeNetworkModule\n\n\n\ncluster_SmartNodeNetworkModule_providers\n\n\n\n\nSmartNodeNetworkService\n\nSmartNodeNetworkService\n\n\n\nSmartNodeNetworkModule\n\nSmartNodeNetworkModule\n\nSmartNodeNetworkModule -->\n\nSmartNodeNetworkService->SmartNodeNetworkModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/sdk/src/services/network/smart-node-network.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SmartNodeNetworkService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SmartNodeNetworkService } from './smart-node-network.service';\n\n@NgModule({\n  imports: [],\n  providers: [\n    SmartNodeNetworkService\n  ],\n  exports: []\n})\nexport class SmartNodeNetworkModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SmartNodeNetworkService.html":{"url":"injectables/SmartNodeNetworkService.html","title":"injectable - SmartNodeNetworkService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SmartNodeNetworkService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/sdk/src/services/network/smart-node-network.service.ts\n        \n\n\n            \n                Description\n            \n            \n                SmartNodeNetworkService\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                network\n                            \n                            \n                                    Private\n                                node\n                            \n                            \n                                    Private\n                                nodeObservable\n                            \n                            \n                                    Private\n                                nodeObserver\n                            \n                            \n                                    Private\n                                nodes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                callApiEndpoint\n                            \n                            \n                                    Async\n                                getApiEndpoint\n                            \n                            \n                                    Public\n                                getCurrentNode\n                            \n                            \n                                    Async\n                                getNetwork\n                            \n                            \n                                getNodeObserver\n                            \n                            \n                                    Public\n                                    Async\n                                getRandomNode\n                            \n                            \n                                    Public\n                                getSpecificNode\n                            \n                            \n                                    Async\n                                postApiEndpoint\n                            \n                            \n                                    Public\n                                setCurrentNode\n                            \n                            \n                                    Public\n                                    Async\n                                setNetwork\n                            \n                            \n                                    Public\n                                setNodeFromActiveNodes\n                            \n                            \n                                    Public\n                                    Async\n                                shuffleNode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in projects/sdk/src/services/network/smart-node-network.service.ts:134\n                            \n                        \n\n                \n                    \n                            constructor\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        callApiEndpoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    callApiEndpoint(type: \"get\" | \"post\", endpoint: string, params: any, config: any, trials: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:315\n                \n            \n\n\n            \n                \n                    private method to call the api endpoint\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                            \"get\" | \"post\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    config\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    trials\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getApiEndpoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    getApiEndpoint(endpoint: string, params: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:295\n                \n            \n\n\n            \n                \n                    Get API endpoint\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCurrentNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCurrentNode()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:207\n                \n            \n\n\n            \n                \n                    public method to get the current node\n\n\n                    \n                    \n                    \n                        Returns :         Node\n\n                    \n                    \n                        Node\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNetwork\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNetwork()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:186\n                \n            \n\n\n            \n                \n                    public method to get the network\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeObserver\n                        \n                    \n                \n            \n            \n                \ngetNodeObserver()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:145\n                \n            \n\n\n            \n                \n                    public method to get the node observer\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getRandomNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRandomNode(override: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:225\n                \n            \n\n\n            \n                \n                    public method to get a random node\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    override\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getSpecificNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSpecificNode(index: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:244\n                \n            \n\n\n            \n                \n                    public method to get a specific node\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Node\n\n                    \n                    \n                        Node\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postApiEndpoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    postApiEndpoint(endpoint: string, params: any, config: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:278\n                \n            \n\n\n            \n                \n                    Post API endpoint\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    config\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setCurrentNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentNode(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:216\n                \n            \n\n\n            \n                \n                    public method to set the current node\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        setNetwork\n                        \n                    \n                \n            \n            \n                \n                    \n                    setNetwork(network: \"mainnet\" | \"testnet\" | \"local\", node: string, override: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:156\n                \n            \n\n\n            \n                \n                    public method to set the network\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    network\n                                    \n                                            \"mainnet\" | \"testnet\" | \"local\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    node\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    override\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setNodeFromActiveNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    setNodeFromActiveNodes(activeNodes: Array)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:262\n                \n            \n\n\n            \n                \n                    public method to set node from active nodes\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activeNodes\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        shuffleNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    shuffleNode(override: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:253\n                \n            \n\n\n            \n                \n                    public method to shuffle the node\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    override\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    mainnet: [\n      {\n        \"operator\": \"0.0.1786597\",\n        \"publicKey\": \"302a300506032b65700321003f54816030c29221e4f228c76415cba0db1ab4c49827d9dbf580abc2f2b29c24\",\n        \"url\": \"https://mainnet-sn1.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786598\",\n        \"publicKey\": \"302a300506032b6570032100233b043e21d5e148f48e2c2da6607a1f5e6fc381781bd0561967743a8291785e\",\n        \"url\": \"https://mainnet-sn2.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786599\",\n        \"publicKey\": \"302a300506032b6570032100c236c88b0aadccf86cc09c57734401409e301d45018ab179f8463801f486c89a\",\n        \"url\": \"https://mainnet-sn3.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786344\",\n        \"publicKey\": \"302a300506032b65700321004e3c29113c911ce6dba13669fda53ed1ab3d89547e23c0b7ab2275fd5dc05766\",\n        \"url\": \"https://mainnet-sn4.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786344\",\n        \"publicKey\": \"302a300506032b65700321004e3c29113c911ce6dba13669fda53ed1ab3d89547e23c0b7ab2275fd5dc05766\",\n        \"url\": \"https://mainnet-sn5.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786345\",\n        \"publicKey\": \"302a300506032b6570032100077bfba9f0fb180026f0de51d4e1083d616eff34a8fe62a1c0e34dd975b7f8cf\",\n        \"url\": \"https://mainnet-sn6.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786347\",\n        \"publicKey\": \"302a300506032b6570032100ff792317f5a24278f1a2dddfc9a23670e158ccb9ecd42cdd0ab36e5ad8bc40a6\",\n        \"url\": \"https://mainnet-sn7.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786365\",\n        \"publicKey\": \"302a300506032b6570032100485e23e18834571e466f96de9f96f228a1f5da860b319f0f0cb2890f938f298d\",\n        \"url\": \"https://mainnet-sn8.hbarsuite.network\"\n      }\n    ],\n    testnet: [\n      {\n        \"operator\": \"0.0.467726\",\n        \"publicKey\": \"302a300506032b657003210057a3ffed480e36faf916e032435368f2eb9f951a6b58de1a64829336516fdcbf\",\n        \"url\": \"https://testnet-sn1.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.467732\",\n        \"publicKey\": \"302a300506032b6570032100c63e283249e90a6971d71e4c8a1f0bc26a7a7f61f8524c7866a1d8ff779a4ffb\",\n        \"url\": \"https://testnet-sn2.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.467734\",\n        \"publicKey\": \"302a300506032b65700321004530757c566a19027a02fc58c9387739661e727e09e1bc92f1ee2fcde530b391\",\n        \"url\": \"https://testnet-sn3.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.467737\",\n        \"publicKey\": \"302a300506032b6570032100ecb67bdae47babf0d2df87f6b787562357550fac02a5e1ea44b22cc0c1ab2738\",\n        \"url\": \"https://testnet-sn4.hbarsuite.network\"\n      }\n    ],\n    local: [\n      {\n        \"operator\": \"0.0.467726\",\n        \"publicKey\": \"302a300506032b657003210057a3ffed480e36faf916e032435368f2eb9f951a6b58de1a64829336516fdcbf\",\n        \"url\": \"http://localhost:3001\"\n      },\n      {\n        \"operator\": \"0.0.467732\",\n        \"publicKey\": \"302a300506032b6570032100c63e283249e90a6971d71e4c8a1f0bc26a7a7f61f8524c7866a1d8ff779a4ffb\",\n        \"url\": \"http://localhost:3002\"\n      },\n      {\n        \"operator\": \"0.0.467734\",\n        \"publicKey\": \"302a300506032b65700321004530757c566a19027a02fc58c9387739661e727e09e1bc92f1ee2fcde530b391\",\n        \"url\": \"http://localhost:3003\"\n      },\n      {\n        \"operator\": \"0.0.467737\",\n        \"publicKey\": \"302a300506032b6570032100ecb67bdae47babf0d2df87f6b787562357550fac02a5e1ea44b22cc0c1ab2738\",\n        \"url\": \"http://localhost:3004\"\n      }\n    ]\n  }\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/network/smart-node-network.service.ts:47\n                        \n                    \n\n            \n                \n                    private network\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        node\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Node\n\n                    \n                \n                \n                    \n                        Default value : {\n    operator: '',\n    publicKey: '',\n    url: ''\n  }\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/network/smart-node-network.service.ts:37\n                        \n                    \n\n            \n                \n                    private node\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodeObservable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.nodeObserver.asObservable()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/network/smart-node-network.service.ts:25\n                        \n                    \n\n            \n                \n                    private nodeObservable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodeObserver\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/network/smart-node-network.service.ts:19\n                        \n                    \n\n            \n                \n                    private nodeObserver\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : new Array()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/network/smart-node-network.service.ts:31\n                        \n                    \n\n            \n                \n                    private nodes\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Node } from './interfaces/node.interface';\nimport { Observable, Subject } from 'rxjs';\nimport { Storage } from '@capacitor/storage';\nimport axios from 'axios';\n\n/**\n * SmartNodeNetworkService\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SmartNodeNetworkService {\n\n  /**\n   * private nodeObserver\n   * @type {Subject}\n   */\n  private nodeObserver = new Subject();\n\n  /**\n   * private nodeObservable\n   * @type {Observable}\n   */\n  private nodeObservable = this.nodeObserver.asObservable();\n\n  /**\n   * private nodes\n   * @type {Array}\n   */\n  private nodes: Array = new Array();\n\n  /**\n   * private node\n   * @type {Node}\n   */\n  private node: Node = {\n    operator: '',\n    publicKey: '',\n    url: ''\n  };\n\n  /**\n   * private network\n   * @type {any}\n   */\n  private network = {\n    mainnet: [\n      {\n        \"operator\": \"0.0.1786597\",\n        \"publicKey\": \"302a300506032b65700321003f54816030c29221e4f228c76415cba0db1ab4c49827d9dbf580abc2f2b29c24\",\n        \"url\": \"https://mainnet-sn1.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786598\",\n        \"publicKey\": \"302a300506032b6570032100233b043e21d5e148f48e2c2da6607a1f5e6fc381781bd0561967743a8291785e\",\n        \"url\": \"https://mainnet-sn2.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786599\",\n        \"publicKey\": \"302a300506032b6570032100c236c88b0aadccf86cc09c57734401409e301d45018ab179f8463801f486c89a\",\n        \"url\": \"https://mainnet-sn3.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786344\",\n        \"publicKey\": \"302a300506032b65700321004e3c29113c911ce6dba13669fda53ed1ab3d89547e23c0b7ab2275fd5dc05766\",\n        \"url\": \"https://mainnet-sn4.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786344\",\n        \"publicKey\": \"302a300506032b65700321004e3c29113c911ce6dba13669fda53ed1ab3d89547e23c0b7ab2275fd5dc05766\",\n        \"url\": \"https://mainnet-sn5.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786345\",\n        \"publicKey\": \"302a300506032b6570032100077bfba9f0fb180026f0de51d4e1083d616eff34a8fe62a1c0e34dd975b7f8cf\",\n        \"url\": \"https://mainnet-sn6.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786347\",\n        \"publicKey\": \"302a300506032b6570032100ff792317f5a24278f1a2dddfc9a23670e158ccb9ecd42cdd0ab36e5ad8bc40a6\",\n        \"url\": \"https://mainnet-sn7.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786365\",\n        \"publicKey\": \"302a300506032b6570032100485e23e18834571e466f96de9f96f228a1f5da860b319f0f0cb2890f938f298d\",\n        \"url\": \"https://mainnet-sn8.hbarsuite.network\"\n      }\n    ],\n    testnet: [\n      {\n        \"operator\": \"0.0.467726\",\n        \"publicKey\": \"302a300506032b657003210057a3ffed480e36faf916e032435368f2eb9f951a6b58de1a64829336516fdcbf\",\n        \"url\": \"https://testnet-sn1.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.467732\",\n        \"publicKey\": \"302a300506032b6570032100c63e283249e90a6971d71e4c8a1f0bc26a7a7f61f8524c7866a1d8ff779a4ffb\",\n        \"url\": \"https://testnet-sn2.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.467734\",\n        \"publicKey\": \"302a300506032b65700321004530757c566a19027a02fc58c9387739661e727e09e1bc92f1ee2fcde530b391\",\n        \"url\": \"https://testnet-sn3.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.467737\",\n        \"publicKey\": \"302a300506032b6570032100ecb67bdae47babf0d2df87f6b787562357550fac02a5e1ea44b22cc0c1ab2738\",\n        \"url\": \"https://testnet-sn4.hbarsuite.network\"\n      }\n    ],\n    local: [\n      {\n        \"operator\": \"0.0.467726\",\n        \"publicKey\": \"302a300506032b657003210057a3ffed480e36faf916e032435368f2eb9f951a6b58de1a64829336516fdcbf\",\n        \"url\": \"http://localhost:3001\"\n      },\n      {\n        \"operator\": \"0.0.467732\",\n        \"publicKey\": \"302a300506032b6570032100c63e283249e90a6971d71e4c8a1f0bc26a7a7f61f8524c7866a1d8ff779a4ffb\",\n        \"url\": \"http://localhost:3002\"\n      },\n      {\n        \"operator\": \"0.0.467734\",\n        \"publicKey\": \"302a300506032b65700321004530757c566a19027a02fc58c9387739661e727e09e1bc92f1ee2fcde530b391\",\n        \"url\": \"http://localhost:3003\"\n      },\n      {\n        \"operator\": \"0.0.467737\",\n        \"publicKey\": \"302a300506032b6570032100ecb67bdae47babf0d2df87f6b787562357550fac02a5e1ea44b22cc0c1ab2738\",\n        \"url\": \"http://localhost:3004\"\n      }\n    ]\n  };\n\n  /**\n   * constructor\n   */\n  constructor() { }\n\n  /**\n   * public method to get the node observer\n   * @returns Observable\n   */\n  getNodeObserver(): Observable {\n    return this.nodeObservable;\n  }\n\n  /**\n   * public method to set the network\n   * @param network\n   * @param node\n   * @param override\n   * @returns Promise\n    */\n  public async setNetwork(network: 'mainnet' | 'testnet' | 'local', node: string, override: boolean = false): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // as very first, we setup the core network...\n        this.nodes = this.network[network];\n        // setting a random node to use as default one...\n        if (node == 'random') {\n          await this.shuffleNode(override);\n        } else {\n          this.node = this.getSpecificNode(Number(node));\n        }\n\n        // then we fetch the entire network of nodes, and we update our nodes array...\n        try {\n          let whitelistedNetwork = await this.getNetwork();\n          this.nodes = whitelistedNetwork.data;\n          resolve(true);\n        } catch (error) {\n          resolve(await this.setNetwork(network, node, true));\n        }\n      } catch (error) {\n        reject(error);\n      }\n    })\n  }\n\n  /**\n   * public method to get the network\n   * @returns Promise\n   */\n  async getNetwork(): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // then we call the endpoint to grab the entire list of nodes...\n        let response = await this.getApiEndpoint('smart-node/network');\n        // finally, we can resolve it...\n        resolve({\n          function: 'getNetwork',\n          node: this.node,\n          data: response\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * public method to get the current node\n   * @returns Node\n   */\n  public getCurrentNode(): Node {\n    return this.node;\n  }\n\n  /**\n   * public method to set the current node\n   * @param node\n   * @returns void\n   */\n  public setCurrentNode(node: Node): void {\n    this.node = node;\n  }\n\n  /**\n   * public method to get a random node\n   * @param override\n   * @returns Promise\n   */\n  public async getRandomNode(override: boolean): Promise {\n    let auth = await Storage.get({ key: 'hashconnect.auth' });\n    let node = null;\n\n    if (auth.value && !override) {\n      let authStorage = JSON.parse(auth.value);\n      node = this.nodes.find(node => node.operator == authStorage.signedPayload.originalPayload.node);\n    } else {\n      node = this.nodes[Math.floor(Math.random() * this.nodes.length)];\n    }\n\n    return node;\n  }\n\n  /**\n   * public method to get a specific node\n   * @param index\n   * @returns Node\n   */\n  public getSpecificNode(index: number): Node {\n    return this.nodes[index];\n  }\n\n  /**\n   * public method to shuffle the node\n   * @param override\n   * @returns Promise\n   */\n  public async shuffleNode(override: boolean): Promise {\n    this.node = await this.getRandomNode(override);\n  }\n\n  /**\n   * public method to set node from active nodes\n   * @param activeNodes\n   * @returns void\n   */\n  public setNodeFromActiveNodes(activeNodes: Array): void {\n    if (activeNodes.length) {\n      this.node = activeNodes[Math.floor(Math.random() * activeNodes.length)];\n      this.nodeObserver.next(this.node);\n    } else {\n      throw new Error(`the list of active nodes can't be empty`);\n    }\n  }\n\n  /**\n   * Post API endpoint\n   * @param endpoint\n   * @param params\n   * @param config\n   * @returns Promise\n   */\n  async postApiEndpoint(endpoint: string, params: any = {}, config: any = {}): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.callApiEndpoint('post', endpoint, params, config);\n        resolve(response);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get API endpoint\n   * @param endpoint\n   * @param params\n   * @returns Promise\n   */\n  async getApiEndpoint(endpoint: string, params: any = {}): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.callApiEndpoint('get', endpoint, params);\n        resolve(response);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * private method to call the api endpoint\n   * @param type\n   * @param endpoint\n   * @param params\n   * @param config\n   * @param trials\n   * @returns Promise\n   */\n  private async callApiEndpoint(\n    type: 'get' | 'post',\n    endpoint: string,\n    params: any = {},\n    config: any = {},\n    trials: number = 0\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // try to call the required api endpoint...\n        let response = null;\n\n        if (this.node.url != '') {\n          switch (type) {\n            case 'get':\n              response = await axios.get(`${this.node.url}/${endpoint}`, params);\n              break;\n            case 'post':\n              response = await axios.post(`${this.node.url}/${endpoint}`, params, config);\n              break;\n          }\n\n          this.nodeObserver.next(this.node);\n          resolve(response.data);\n        } else {\n          resolve(response);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SmartNodeRestModule.html":{"url":"modules/SmartNodeRestModule.html","title":"module - SmartNodeRestModule","body":"\n                   \n\n\n\n\n    Modules\n    SmartNodeRestModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SmartNodeRestModule\n\n\n\ncluster_SmartNodeRestModule_imports\n\n\n\ncluster_SmartNodeRestModule_providers\n\n\n\n\nSmartNodeNetworkModule\n\nSmartNodeNetworkModule\n\n\n\nSmartNodeRestModule\n\nSmartNodeRestModule\n\nSmartNodeRestModule -->\n\nSmartNodeNetworkModule->SmartNodeRestModule\n\n\n\n\n\nSmartNodeRestService\n\nSmartNodeRestService\n\nSmartNodeRestModule -->\n\nSmartNodeRestService->SmartNodeRestModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/sdk/src/services/rest/smart-node-rest.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SmartNodeRestService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SmartNodeNetworkModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SmartNodeNetworkModule } from '../network/smart-node-network.module';\nimport { SmartNodeRestService } from './smart-node-rest.service';\n\n@NgModule({\n  imports: [\n    SmartNodeNetworkModule\n  ],\n  providers: [\n    SmartNodeRestService\n  ],\n  exports: [],\n})\nexport class SmartNodeRestModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SmartNodeRestService.html":{"url":"injectables/SmartNodeRestService.html","title":"injectable - SmartNodeRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SmartNodeRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/sdk/src/services/rest/smart-node-rest.service.ts\n        \n\n\n            \n                Description\n            \n            \n                SmartNodeRestService\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                gameFlipCoin\n                            \n                            \n                                    Public\n                                    Async\n                                getAccountBalance\n                            \n                            \n                                    Public\n                                    Async\n                                getAccountInfos\n                            \n                            \n                                    Public\n                                    Async\n                                getGameToken\n                            \n                            \n                                    Public\n                                    Async\n                                getHsuiteHolders\n                            \n                            \n                                    Public\n                                    Async\n                                getHsuiteStaking\n                            \n                            \n                                    Public\n                                    Async\n                                getNftForHolder\n                            \n                            \n                                    Public\n                                    Async\n                                getTokenChainInfos\n                            \n                            \n                                    Public\n                                    Async\n                                getTokenInfos\n                            \n                            \n                                    Public\n                                    Async\n                                getUtilities\n                            \n                            \n                                    Public\n                                    Async\n                                loadFees\n                            \n                            \n                                    Public\n                                    Async\n                                loadTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(smartNodeNetworkService: SmartNodeNetworkService)\n                    \n                \n                        \n                            \n                                Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:10\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        smartNodeNetworkService\n                                                  \n                                                        \n                                                                        SmartNodeNetworkService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        gameFlipCoin\n                        \n                    \n                \n            \n            \n                \n                    \n                    gameFlipCoin(transactionId: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:46\n                \n            \n\n\n            \n                \n                    public method for gameFlipCoin\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAccountBalance\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAccountBalance(accountId: string, tokenId?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:163\n                \n            \n\n\n            \n                \n                    public method to get account balance\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAccountInfos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAccountInfos(accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:134\n                \n            \n\n\n            \n                \n                    public method to get all the account info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getGameToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getGameToken()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:24\n                \n            \n\n\n            \n                \n                    getGameToken\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getHsuiteHolders\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHsuiteHolders()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:93\n                \n            \n\n\n            \n                \n                    publc method to get all the hsuite holders\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getHsuiteStaking\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHsuiteStaking()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:113\n                \n            \n\n\n            \n                \n                    public method to get all the hsuite staking info\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getNftForHolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNftForHolder(accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:277\n                \n            \n\n\n            \n                \n                    public method to get the NFT for holder\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getTokenChainInfos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokenChainInfos(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:305\n                \n            \n\n\n            \n                \n                    public method to get a token chain info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getTokenInfos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokenInfos(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:249\n                \n            \n\n\n            \n                \n                    public method to get the token infos\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getUtilities\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUtilities()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:73\n                \n            \n\n\n            \n                \n                    public method to get Smart Node Utilities\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        loadFees\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadFees(fee: \"tokens\" | \"launchpads\" | \"daos\" | \"multisig\" | \"nft_exchange\" | \"exchange\")\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:192\n                \n            \n\n\n            \n                \n                    public method to load the fees\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fee\n                                    \n                                            \"tokens\" | \"launchpads\" | \"daos\" | \"multisig\" | \"nft_exchange\" | \"exchange\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        loadTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadTokens()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:223\n                \n            \n\n\n            \n                \n                    public method to load the tokens\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { SmartNodeNetworkService } from '../network/smart-node-network.service';\n\n/**\n * SmartNodeRestService\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SmartNodeRestService {\n\n  /**\n   * Constructor\n   * @param {SmartNodeNetworkService} smartNodeNetworkService\n   */\n  constructor(\n    private smartNodeNetworkService: SmartNodeNetworkService\n  ) { }\n\n  /**\n   * getGameToken\n   * @returns {Promise}\n   */\n  public async getGameToken(): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(`games/token`);\n        let node = this.smartNodeNetworkService.getCurrentNode();\n\n        resolve({\n          function: 'getGameToken',\n          node: node,\n          data: response\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * public method for gameFlipCoin\n   * @param {string} transactionId\n   * @returns {Promise}\n   */\n  public async gameFlipCoin(transactionId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(`games/coin/flip`,\n          {\n            params: {\n              transactionId: transactionId\n            }\n          });\n\n        let node = this.smartNodeNetworkService.getCurrentNode();\n\n        resolve({\n          function: 'gameFlipCoin',\n          node: node,\n          data: response\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * public method to get Smart Node Utilities\n   * @returns {Promise}\n   */\n  public async getUtilities(): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(`smart-node/utilities`);\n\n        resolve({\n          function: 'getUtilities',\n          node: this.smartNodeNetworkService.getCurrentNode(),\n          data: response\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * publc method to get all the hsuite holders\n   * @returns {Promise}\n   */\n  public async getHsuiteHolders(): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(`smart-node/hsuite/holders`);\n\n        resolve({\n          function: 'getHsuiteHolders',\n          node: this.smartNodeNetworkService.getCurrentNode(),\n          data: response\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * public method to get all the hsuite staking info\n   * @returns {Promise}\n   */\n  public async getHsuiteStaking(): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(`smart-node/hsuite/staking`);\n\n        resolve({\n          function: 'getHsuiteStaking',\n          node: this.smartNodeNetworkService.getCurrentNode(),\n          data: response\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * public method to get all the account info\n   * @param {string} accountId\n   * @returns {Promise}\n   */\n  public async getAccountInfos(accountId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(\n          `wallets/info`,\n          {\n            params: {\n              accountId: accountId\n            }\n          }\n        );\n\n        resolve({\n          function: 'getAccountInfos',\n          node: this.smartNodeNetworkService.getCurrentNode(),\n          data: response\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * public method to get account balance\n   * @param {string} accountId\n   * @param {string} tokenId\n   * @returns {Promise}\n   */\n  public async getAccountBalance(accountId: string, tokenId?: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(\n          `wallets/balance`,\n          {\n            params: {\n              accountId: accountId,\n              tokenId: tokenId\n            }\n          }\n        );\n\n        resolve({\n          function: 'getAccountInfos',\n          node: this.smartNodeNetworkService.getCurrentNode(),\n          data: response\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * public method to load the fees\n   * @param {string} fee\n   * @returns {Promise}\n   */\n  public async loadFees(\n    fee: 'tokens' | 'launchpads' | 'daos' | 'multisig' | 'nft_exchange' | 'exchange'\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(\n          `fees/info`,\n          {\n            params: {\n              fee: fee\n            }\n          }\n        );\n\n        let node = this.smartNodeNetworkService.getCurrentNode();\n\n        resolve({\n          function: 'loadFees',\n          node: node,\n          data: response\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * public method to load the tokens\n   * @returns {Promise}\n   */\n  public async loadTokens(): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(`tokens/list`);\n        let node = this.smartNodeNetworkService.getCurrentNode();\n\n        response.forEach((data: any) => {\n          data.image = `${node.url}/${data.image}`\n        });\n\n        resolve({\n          function: 'loadTokens',\n          node: node,\n          data: response\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * public method to get the token infos\n   * @param {string} tokenId\n   * @returns {Promise}\n   */\n  public async getTokenInfos(tokenId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(\n          `tokens/info`,\n          {\n            params: {\n              tokenId: tokenId\n            }\n          }\n        );\n\n        resolve({\n          function: 'getTokenInfos',\n          node: this.smartNodeNetworkService.getCurrentNode(),\n          data: response\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * public method to get the NFT for holder\n   * @param {string} accountId\n   * @returns {Promise}\n   */\n  public async getNftForHolder(accountId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(\n          `wallets/nfts`,\n          {\n            params: {\n              accountId: accountId\n            }\n          }\n        );\n\n        resolve({\n          function: 'getNftForHolder',\n          node: this.smartNodeNetworkService.getCurrentNode(),\n          data: response\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * public method to get a token chain info\n   * @param {string} tokenId\n   * @returns {Promise}\n   */\n  public async getTokenChainInfos(tokenId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(\n          `tokens/chain-info`,\n          {\n            params: {\n              tokenId: tokenId\n            }\n          }\n        );\n\n        resolve({\n          function: 'getTokenChainInfos',\n          node: this.smartNodeNetworkService.getCurrentNode(),\n          data: response\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SmartNodeSdkModule.html":{"url":"modules/SmartNodeSdkModule.html","title":"module - SmartNodeSdkModule","body":"\n                   \n\n\n\n\n    Modules\n    SmartNodeSdkModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SmartNodeSdkModule\n\n\n\ncluster_SmartNodeSdkModule_imports\n\n\n\ncluster_SmartNodeSdkModule_providers\n\n\n\n\nSmartNodeHashPackModule\n\nSmartNodeHashPackModule\n\n\n\nSmartNodeSdkModule\n\nSmartNodeSdkModule\n\nSmartNodeSdkModule -->\n\nSmartNodeHashPackModule->SmartNodeSdkModule\n\n\n\n\n\nSmartNodeHederaModule\n\nSmartNodeHederaModule\n\nSmartNodeSdkModule -->\n\nSmartNodeHederaModule->SmartNodeSdkModule\n\n\n\n\n\nSmartNodeNetworkModule\n\nSmartNodeNetworkModule\n\nSmartNodeSdkModule -->\n\nSmartNodeNetworkModule->SmartNodeSdkModule\n\n\n\n\n\nSmartNodeRestModule\n\nSmartNodeRestModule\n\nSmartNodeSdkModule -->\n\nSmartNodeRestModule->SmartNodeSdkModule\n\n\n\n\n\nSmartNodeSocketsModule\n\nSmartNodeSocketsModule\n\nSmartNodeSdkModule -->\n\nSmartNodeSocketsModule->SmartNodeSdkModule\n\n\n\n\n\nSmartNodeSdkService\n\nSmartNodeSdkService\n\nSmartNodeSdkModule -->\n\nSmartNodeSdkService->SmartNodeSdkModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/sdk/src/lib/smart-node-sdk.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SmartNodeSdkService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SmartNodeHashPackModule\n                        \n                        \n                            SmartNodeHederaModule\n                        \n                        \n                            SmartNodeNetworkModule\n                        \n                        \n                            SmartNodeRestModule\n                        \n                        \n                            SmartNodeSocketsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SmartNodeHashPackModule } from '../services/hashpack/smart-node-hashpack.module';\nimport { SmartNodeHederaModule } from '../services/hedera/smart-node-hedera.module';\nimport { SmartNodeNetworkModule } from '../services/network/smart-node-network.module';\nimport { SmartNodeRestModule } from '../services/rest/smart-node-rest.module';\nimport { SmartNodeSocketsModule } from '../services/sockets/smart-node-sockets.module';\nimport { SmartNodeSdkService } from './smart-node-sdk.service';\n\n@NgModule({\n  imports: [\n    SmartNodeRestModule,\n    SmartNodeNetworkModule,\n    SmartNodeSocketsModule,\n    SmartNodeHashPackModule,\n    SmartNodeHederaModule\n  ],\n  providers: [\n    SmartNodeSdkService\n  ],\n  exports: []\n})\nexport class SmartNodeSdkModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SmartNodeSdkService.html":{"url":"injectables/SmartNodeSdkService.html","title":"injectable - SmartNodeSdkService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SmartNodeSdkService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/sdk/src/lib/smart-node-sdk.service.ts\n        \n\n\n            \n                Description\n            \n            \n                SmartNodeSdkService\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                eventsObservable\n                            \n                            \n                                    Private\n                                eventsObserver\n                            \n                            \n                                    Private\n                                hashpackWallet\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _initSockets\n                            \n                            \n                                getEventsObserver\n                            \n                            \n                                    Public\n                                getHashPackService\n                            \n                            \n                                    Public\n                                getHederaService\n                            \n                            \n                                    Public\n                                getNetworkService\n                            \n                            \n                                    Public\n                                getRestService\n                            \n                            \n                                    Public\n                                getSocketsService\n                            \n                            \n                                    Private\n                                    Async\n                                handleAuthEvent\n                            \n                            \n                                    Private\n                                    Async\n                                handleErrors\n                            \n                            \n                                    Private\n                                    Async\n                                handleGenericEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(smartNodeNetworkService: SmartNodeNetworkService, smartNodeRestService: SmartNodeRestService, smartNodeSocketsService: SmartNodeSocketsService, smartNodeHashPackService: SmartNodeHashPackService, smartNodeHederaService: SmartNodeHederaService, network: \"mainnet\" | \"testnet\" | \"local\", node: string)\n                    \n                \n                        \n                            \n                                Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:30\n                            \n                        \n\n                \n                    \n                            Constructor Method\n\n@param {smartNodeRestService} smartNodeRestService\n@param {smartNodeSocketsService} smartNodeSocketsService\n@param {smartNodeHashPackService} smartNodeHashPackService\n@param {smartNodeNetworkService} smartNodeNetworkService\n@param {'mainnet' | 'testnet' | 'local'} network\n@param {string} node\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        smartNodeNetworkService\n                                                  \n                                                        \n                                                                        SmartNodeNetworkService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \n\n\n\n                                                        \n                                                \n                                                \n                                                        smartNodeRestService\n                                                  \n                                                        \n                                                                        SmartNodeRestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \n\n\n\n                                                        \n                                                \n                                                \n                                                        smartNodeSocketsService\n                                                  \n                                                        \n                                                                        SmartNodeSocketsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \n\n\n\n                                                        \n                                                \n                                                \n                                                        smartNodeHashPackService\n                                                  \n                                                        \n                                                                        SmartNodeHashPackService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \n\n\n\n                                                        \n                                                \n                                                \n                                                        smartNodeHederaService\n                                                  \n                                                        \n                                                                        SmartNodeHederaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        network\n                                                  \n                                                        \n                                                                    \"mainnet\" | \"testnet\" | \"local\"\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \n\n\n\n                                                        \n                                                \n                                                \n                                                        node\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _initSockets\n                        \n                    \n                \n            \n            \n                \n                    \n                    _initSockets(hashconnectData: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:191\n                \n            \n\n\n            \n                \n                    Private method to initialize the websockets.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hashconnectData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEventsObserver\n                        \n                    \n                \n            \n            \n                \ngetEventsObserver()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:211\n                \n            \n\n\n            \n                \n                    Retrieves the events observer, to subscribe to events from the SmartNode Network.\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getHashPackService\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHashPackService()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:227\n                \n            \n\n\n            \n                \n                    Retrieves HashPack Service, to interact with the SmartNode HashPack.\n\n\n                    \n                    \n                    \n                        Returns :         SmartNodeHashPackService\n\n                    \n                    \n                        SmartNodeHashPackService\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getHederaService\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHederaService()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:251\n                \n            \n\n\n            \n                \n                    Retrieves the Hedera Service, to interact with the SmartNode Hedera API.\n\n\n                    \n                    \n                    \n                        Returns :         SmartNodeHederaService\n\n                    \n                    \n                        SmartNodeHederaService\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getNetworkService\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNetworkService()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:219\n                \n            \n\n\n            \n                \n                    Retrieves Network Service, to interact with the SmartNode Network.\n\n\n                    \n                    \n                    \n                        Returns :         SmartNodeNetworkService\n\n                    \n                    \n                        SmartNodeNetworkService\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getRestService\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRestService()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:235\n                \n            \n\n\n            \n                \n                    Retrieves the Rest Service, to interact with the SmartNode Rest API.\n\n\n                    \n                    \n                    \n                        Returns :         SmartNodeRestService\n\n                    \n                    \n                        SmartNodeRestService\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getSocketsService\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSocketsService()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:243\n                \n            \n\n\n            \n                \n                    Retrieves the Sockets Service, to interact with the SmartNode Sockets API.\n\n\n                    \n                    \n                    \n                        Returns :         SmartNodeSocketsService\n\n                    \n                    \n                        SmartNodeSocketsService\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        handleAuthEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleAuthEvent(event: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:133\n                \n            \n\n\n            \n                \n                    Private method for authentication handling.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        handleErrors\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleErrors(event: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:115\n                \n            \n\n\n            \n                \n                    Private method for error handling.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        handleGenericEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleGenericEvents(event: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:124\n                \n            \n\n\n            \n                \n                    Private method for events handling.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        eventsObservable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.eventsObserver.asObservable()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:25\n                        \n                    \n\n            \n                \n                    Private property eventsObservable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        eventsObserver\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:20\n                        \n                    \n\n            \n                \n                    Private property eventsObserver\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hashpackWallet\n                        \n                    \n                \n            \n                \n                    \n                        Type :     null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:30\n                        \n                    \n\n            \n                \n                    Private property hashpackWallet\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { SmartNodeHashPackService } from '../services/hashpack/smart-node-hashpack.service';\nimport { SmartNodeHederaService } from '../services/hedera/smart-node-hedera.service';\nimport { SmartNodeNetworkService } from '../services/network/smart-node-network.service';\nimport { SmartNodeRestService } from '../services/rest/smart-node-rest.service';\nimport { SmartNodeSocketsService } from '../services/sockets/smart-node-sockets.service';\nimport * as lodash from 'lodash';\n\n/**\n * SmartNodeSdkService\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SmartNodeSdkService {\n  /**\n   * Private property eventsObserver\n   */\n  private eventsObserver = new Subject();\n\n  /**\n   * Private property eventsObservable\n   */\n  private eventsObservable = this.eventsObserver.asObservable();\n\n  /**\n   * Private property hashpackWallet\n   */\n  private hashpackWallet = null;\n\n  /**\n   * Constructor Method\n   * @param {smartNodeNetworkService} smartNodeNetworkService\n   * * @param {smartNodeRestService} smartNodeRestService\n   * * @param {smartNodeSocketsService} smartNodeSocketsService\n   * * @param {smartNodeHashPackService} smartNodeHashPackService\n   * * @param {smartNodeNetworkService} smartNodeNetworkService\n   * * @param {'mainnet' | 'testnet' | 'local'} network\n   * * @param {string} node\n   */\n  constructor(\n    private smartNodeNetworkService: SmartNodeNetworkService,\n    private smartNodeRestService: SmartNodeRestService,\n    private smartNodeSocketsService: SmartNodeSocketsService,\n    private smartNodeHashPackService: SmartNodeHashPackService,\n    private smartNodeHederaService: SmartNodeHederaService,\n    @Inject('network') private network: 'mainnet' | 'testnet' | 'local',\n    @Inject('node') private node: string\n  ) {\n    // initializing the HSuite Network from the code-nodes...\n    this.smartNodeNetworkService.setNetwork(this.network, this.node).then(async () => {\n      console.log(`network has been initialized correctly, all new nodes have been fetched and ready to be used.`);\n\n      try {\n        let utilities = (await this.smartNodeRestService.getUtilities()).data;\n        this.smartNodeHederaService.setUtilities(utilities);\n\n        let hashconnectData = await this.smartNodeHashPackService.loadHashconnectData();\n        this.hashpackWallet = lodash.get(hashconnectData.accountIds, 0);\n\n        let message = await this._initSockets(hashconnectData);\n        console.log(message);\n\n        // subscribing to the nodeObserver, to monitor if a node goes down, and the service switches to a new one...\n        this.smartNodeNetworkService.getNodeObserver().subscribe(async (node) => {\n          let mainSocket = this.smartNodeSocketsService.getMainSocket();\n\n          // if we received a notification, we check if the new node is different than the one used with the mainSocket...\n          if (mainSocket && mainSocket.getNode().operator != node.operator) {\n            // and we re-establish a secure connection by initializing an new auth session...\n            await this.smartNodeSocketsService.initAuth(this.hashpackWallet, this.smartNodeNetworkService.getCurrentNode());\n            await this.smartNodeSocketsService.authorizeWallet();\n          }\n        });\n      } catch (error) {\n        console.error(error);\n      }\n\n      // subscribing to login/logout events...\n      this.smartNodeHashPackService.observeHashpackConnection.subscribe(async (hashconnectData) => {\n        try {\n          let message = await this._initSockets(hashconnectData);\n          this.hashpackWallet = lodash.get(hashconnectData.accountIds, 0);\n          console.log(message);\n        } catch (error) {\n          console.error(error);\n        }\n      });\n\n      // subscribing to websockets authentication events...\n      this.smartNodeSocketsService.getSocketObserver().subscribe(async (event) => {\n        switch (event.event) {\n          case 'auth':\n            await this.handleAuthEvent(event.content);\n            break;\n          case 'events':\n            await this.handleGenericEvents(event.content);\n            break;\n          case 'errors':\n            await this.handleErrors(event.content);\n            break;\n        }\n      });\n    }).catch(error => {\n      throw new Error(error.message);\n    });\n  }\n\n  /**\n   * Private method for error handling.\n   * @param event\n   * @returns Promise\n   */\n  private async handleErrors(event: any): Promise {\n    this.eventsObserver.next(event);\n  }\n\n  /**\n   * Private method for events handling.\n   * @param event\n   * @returns Promise\n   */\n  private async handleGenericEvents(event: any): Promise {\n    this.eventsObserver.next(event);\n  }\n\n  /**\n   * Private method for authentication handling.\n   * @param event\n   * @returns Promise\n   */\n  private async handleAuthEvent(event: any): Promise {\n    switch (event.method) {\n      case 'authentication':\n        try {\n          let authResponse = await this.smartNodeHashPackService.getAuthSession();\n\n          if (!authResponse) {\n            this.eventsObserver.next(event);\n\n            let signedData = {\n              signature: new Uint8Array(event.data.authResponse.signedData.signature),\n              serverSigningAccount: event.data.authResponse.signedData.serverSigningAccount\n            };\n\n            authResponse = await this.smartNodeHashPackService.authenticateWallet(\n              event.data.wallet,\n              signedData,\n              event.data.authResponse.payload\n            );\n          }\n\n          if (authResponse.success) {\n            this.smartNodeSocketsService.getMainSocket().emit('authenticate', {\n              signedData: authResponse,\n              walletId: event.data.wallet\n            });\n          } else {\n            this.eventsObserver.next({\n              title: 'Authentication Failed',\n              message: 'You need to authenticate your wallet in order to safely use the app.',\n              method: 'error',\n              mode: 'warning'\n            });\n          }\n        } catch (error: any) {\n          this.eventsObserver.next({\n            title: 'Authentication Error',\n            message: error.message,\n            method: 'error',\n            mode: 'danger'\n          });\n        }\n        break;\n      case 'authenticate':\n        if (event.type == 'warning') {\n          this.smartNodeHashPackService.clearAuthSession();\n        }\n\n        this.eventsObserver.next(event);\n        break;\n    }\n  }\n\n  /**\n   * Private method to initialize the websockets.\n   * @param hashconnectData\n   * @returns Promise\n   */\n  private _initSockets(hashconnectData: any): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        await this.smartNodeSocketsService.init(\n          this.smartNodeNetworkService.getCurrentNode(),\n          hashconnectData,\n          (await this.smartNodeNetworkService.getNetwork()).data\n        );\n\n        resolve(\"all sockets have been initialized correctly.\");\n      } catch (error) {\n        reject(error);\n      }\n    })\n  }\n\n  /**\n   * Retrieves the events observer, to subscribe to events from the SmartNode Network.\n   * @returns Observable\n   */\n  getEventsObserver(): Observable {\n    return this.eventsObservable;\n  }\n\n  /**\n   * Retrieves Network Service, to interact with the SmartNode Network.\n   * @returns SmartNodeNetworkService\n   */\n  public getNetworkService(): SmartNodeNetworkService {\n    return this.smartNodeNetworkService;\n  }\n\n  /**\n   * Retrieves HashPack Service, to interact with the SmartNode HashPack.\n   * @returns SmartNodeHashPackService\n   */\n  public getHashPackService(): SmartNodeHashPackService {\n    return this.smartNodeHashPackService;\n  }\n\n  /**\n   * Retrieves the Rest Service, to interact with the SmartNode Rest API.\n   * @returns SmartNodeRestService\n   */\n  public getRestService(): SmartNodeRestService {\n    return this.smartNodeRestService;\n  }\n\n  /**\n   * Retrieves the Sockets Service, to interact with the SmartNode Sockets API.\n   * @returns SmartNodeSocketsService\n   */\n  public getSocketsService(): SmartNodeSocketsService {\n    return this.smartNodeSocketsService;\n  }\n\n  /**\n   * Retrieves the Hedera Service, to interact with the SmartNode Hedera API.\n   * @returns SmartNodeHederaService\n   */\n  public getHederaService(): SmartNodeHederaService {\n    return this.smartNodeHederaService;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SmartNodeSocket.html":{"url":"injectables/SmartNodeSocket.html","title":"injectable - SmartNodeSocket","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SmartNodeSocket\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/sdk/src/lib/utils/smart-socket/smart-socket.class.ts\n        \n\n\n            \n                Description\n            \n            \n                SmartNodeSocket\n\n            \n\n            \n                Extends\n            \n            \n                    Socket\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                node\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getNode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(node: any, wallet: any, namespace: string)\n                    \n                \n                        \n                            \n                                Defined in projects/sdk/src/lib/utils/smart-socket/smart-socket.class.ts:14\n                            \n                        \n\n                \n                    \n                            Constructor Method\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        node\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        wallet\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getNode\n                        \n                    \n                \n            \n            \n                \ngetNode()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/utils/smart-socket/smart-socket.class.ts:49\n                \n            \n\n\n            \n                \n                    getNode Method\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        node\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/lib/utils/smart-socket/smart-socket.class.ts:14\n                        \n                    \n\n            \n                \n                    Private property node\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@angular/core\";\nimport { Socket } from 'ngx-socket-io';\n\n/**\n * SmartNodeSocket\n */\n@Injectable()\n\nexport class SmartNodeSocket extends Socket {\n  /**\n   * Private property node\n   * @type {Object}\n  */\n  private node: any;\n\n  /**\n   * Constructor Method\n   * @param {Object} node\n   * @param {Object} wallet\n   * @param {string} namespace\n   * @returns {SmartNodeSocket}\n   */\n  constructor(\n    @Inject(Object) node: any,\n    @Inject(Object) wallet: any,\n    @Inject(Object) namespace: string = 'smart-node'\n  ) {\n    node.url = `${node.url.replace('https://', 'wss://').replace('http://', 'ws://')}/${namespace}`;\n\n    super({\n      url: node.url,\n      options: {\n        transports: [\"websocket\"],\n        query: {\n          wallet: wallet,\n          signedData: null,\n          referrer: document.referrer\n        }\n      }\n    });\n\n    this.node = node;\n  }\n\n  /**\n   * getNode Method\n   * @returns {Object}\n   */\n  getNode(): any {\n    return this.node;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SmartNodeSocketsModule.html":{"url":"modules/SmartNodeSocketsModule.html","title":"module - SmartNodeSocketsModule","body":"\n                   \n\n\n\n\n    Modules\n    SmartNodeSocketsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SmartNodeSocketsModule\n\n\n\ncluster_SmartNodeSocketsModule_providers\n\n\n\ncluster_SmartNodeSocketsModule_imports\n\n\n\n\nSmartNodeNetworkModule\n\nSmartNodeNetworkModule\n\n\n\nSmartNodeSocketsModule\n\nSmartNodeSocketsModule\n\nSmartNodeSocketsModule -->\n\nSmartNodeNetworkModule->SmartNodeSocketsModule\n\n\n\n\n\nSmartNodeSocketsService\n\nSmartNodeSocketsService\n\nSmartNodeSocketsModule -->\n\nSmartNodeSocketsService->SmartNodeSocketsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/sdk/src/services/sockets/smart-node-sockets.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SmartNodeSocketsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SmartNodeNetworkModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SmartNodeNetworkModule } from '../network/smart-node-network.module';\nimport { SmartNodeSocketsService } from './smart-node-sockets.service';\n\n@NgModule({\n  imports: [\n    SmartNodeNetworkModule\n  ],\n  providers: [\n    SmartNodeSocketsService\n  ],\n  exports: []\n})\nexport class SmartNodeSocketsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SmartNodeSocketsService.html":{"url":"injectables/SmartNodeSocketsService.html","title":"injectable - SmartNodeSocketsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SmartNodeSocketsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/sdk/src/services/sockets/smart-node-sockets.service.ts\n        \n\n\n            \n                Description\n            \n            \n                SmartNodeSocketsService\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                mainSocket\n                            \n                            \n                                    Private\n                                nodesOnline\n                            \n                            \n                                    Private\n                                nodesSockets\n                            \n                            \n                                    Private\n                                socketObservable\n                            \n                            \n                                    Private\n                                socketObserver\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authorizeWallet\n                            \n                            \n                                getMainSocket\n                            \n                            \n                                getNodesOnline\n                            \n                            \n                                getSocketObserver\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                    Async\n                                initAuth\n                            \n                            \n                                initMainSocket\n                            \n                            \n                                    Async\n                                initNodes\n                            \n                            \n                                    Async\n                                sendMessageToSmartNodes\n                            \n                            \n                                    Private\n                                setNodeFromActiveNodes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(smartNodeNetworkService: SmartNodeNetworkService)\n                    \n                \n                        \n                            \n                                Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:44\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        smartNodeNetworkService\n                                                  \n                                                        \n                                                                        SmartNodeNetworkService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authorizeWallet\n                        \n                    \n                \n            \n            \n                \nauthorizeWallet()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:115\n                \n            \n\n\n            \n                \n                    authenticate the wallet\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMainSocket\n                        \n                    \n                \n            \n            \n                \ngetMainSocket()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:80\n                \n            \n\n\n            \n                \n                    get the main socket\n\n\n                    \n                    \n                    \n                        Returns :         SmartNodeSocket\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodesOnline\n                        \n                    \n                \n            \n            \n                \ngetNodesOnline()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:96\n                \n            \n\n\n            \n                \n                    get the nodes online\n\n\n                    \n                    \n                    \n                        Returns :     Map\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSocketObserver\n                        \n                    \n                \n            \n            \n                \ngetSocketObserver()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:88\n                \n            \n\n\n            \n                \n                    get the socket observer\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                    \n                    init(currentNode: Node, authSession: any, network: Array)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:61\n                \n            \n\n\n            \n                \n                    init the node\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentNode\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    authSession\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    network\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        initAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    initAuth(wallet: string | null, currentNode: Node)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:143\n                \n            \n\n\n            \n                \n                    initialize authentication\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    wallet\n                                    \n                                            string | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentNode\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initMainSocket\n                        \n                    \n                \n            \n            \n                \ninitMainSocket(currentNode: Node)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:125\n                \n            \n\n\n            \n                \n                    initialize main socket\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentNode\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SmartNodeSocket\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        initNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    initNodes(wallet: string | null, network: Array)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:215\n                \n            \n\n\n            \n                \n                    initialize nodes\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    wallet\n                                    \n                                            string | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    network\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMessageToSmartNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessageToSmartNodes(payload: any, topic: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:106\n                \n            \n\n\n            \n                \n                    send message to smart nodes\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topic\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        setNodeFromActiveNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    setNodeFromActiveNodes()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:269\n                \n            \n\n\n            \n                \n                    private method to set node from active nodes\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mainSocket\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SmartNodeSocket\n\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:44\n                        \n                    \n\n            \n                \n                    private mainSocket\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodesOnline\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:26\n                        \n                    \n\n            \n                \n                    private nodesOnline\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodesSockets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : new Array()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:20\n                        \n                    \n\n            \n                \n                    private nodes sockets\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        socketObservable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.socketObserver.asObservable()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:38\n                        \n                    \n\n            \n                \n                    private socketObservable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        socketObserver\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:32\n                        \n                    \n\n            \n                \n                    private socketObserver\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { SmartNodeSocket } from '../../lib/utils/smart-socket/smart-socket.class';\nimport { Node } from '../network/interfaces/node.interface';\nimport * as lodash from 'lodash';\nimport { SmartNodeNetworkService } from '../network/smart-node-network.service';\n\n/**\n * SmartNodeSocketsService\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SmartNodeSocketsService {\n\n  /**\n   * private nodes sockets\n   * @type {Array}\n   */\n  private nodesSockets: Array = new Array();\n\n  /**\n   * private nodesOnline\n   * @type {Map}\n   */\n  private nodesOnline: Map = new Map();\n\n  /**\n   * private socketObserver\n   * @type {Subject}\n   */\n  private socketObserver = new Subject();\n\n  /**\n   * private socketObservable\n   * @type {Observable}\n   */\n  private socketObservable = this.socketObserver.asObservable();\n\n  /**\n   * private mainSocket\n   * @type {SmartNodeSocket}\n   */\n  private mainSocket: SmartNodeSocket;\n\n  /**\n   * Constructor\n   * @param {SmartNodeNetworkService} smartNodeNetworkService\n   */\n  constructor(\n    private smartNodeNetworkService: SmartNodeNetworkService\n  ) { }\n\n  /**\n   * init the node\n   * @param {Node} currentNode\n   * @param {any} authSession\n   * @param {Array} network\n   * @returns {Promise}\n   */\n  async init(currentNode: Node, authSession: any, network: Array): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let wallet = lodash.get(authSession.accountIds, 0);\n\n        await this.initNodes(wallet, network);\n        await this.initAuth(wallet, currentNode);\n\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * get the main socket\n   * @returns {SmartNodeSocket}\n   */\n  getMainSocket(): SmartNodeSocket {\n    return this.mainSocket;\n  }\n\n  /**\n   * get the socket observer\n   * @returns {Observable}\n   */\n  getSocketObserver(): Observable {\n    return this.socketObservable;\n  }\n\n  /**\n   * get the nodes online\n   * @returns {Map}\n   */\n  getNodesOnline(): Map {\n    return this.nodesOnline;\n  }\n\n  /**\n   * send message to smart nodes\n   * @param {any} payload\n   * @param {string} topic\n   * @returns {Promise}\n   */\n  async sendMessageToSmartNodes(payload: any, topic: string) {\n    this.mainSocket.emit(topic, payload);\n  }\n\n  /**\n   * authenticate the wallet\n   * @param {string} wallet\n   * @returns {Promise}\n   */\n  authorizeWallet(): void {\n    this.mainSocket.disconnect();\n    this.mainSocket.connect();\n  }\n\n  /**\n   * initialize main socket\n   * @param {Node} currentNode\n   * @returns {SmartNodeSocket}\n   */\n  initMainSocket(currentNode: Node): SmartNodeSocket {\n    this.nodesSockets.forEach(nodeSocket => {\n      let node = nodeSocket.getNode();\n\n      if (node.operator == currentNode.operator) {\n        this.mainSocket = nodeSocket;\n      }\n    });\n\n    return this.mainSocket;\n  }\n\n  /**\n   * initialize authentication\n   * @param {string} wallet\n   * @param {Node} currentNode\n   * @returns {Promise}\n   */\n  async initAuth(wallet: string | null, currentNode: Node): Promise {\n    return new Promise(async (resolve, reject) => {\n      this.mainSocket = this.initMainSocket(currentNode);\n\n      this.mainSocket.fromEvent('events').subscribe((message: any) => {\n        this.socketObserver.next({\n          event: 'events',\n          content: {\n            method: 'events',\n            ...message\n          }\n        });\n      });\n\n      this.mainSocket.fromEvent('errors').subscribe(async (message: any) => {\n        this.socketObserver.next({\n          event: 'errors',\n          content: {\n            method: 'error',\n            ...message\n          }\n        });\n      });\n\n      this.mainSocket.fromEvent('authenticate').subscribe(async (auth: any) => {\n        if (auth.isValidSignature) {\n          this.socketObserver.next({\n            event: 'auth',\n            content: {\n              message: `You are safely connected to the node ${this.mainSocket.getNode().operator} on Hsuite Network`,\n              method: 'authenticate',\n              type: 'success'\n            }\n          });\n        } else {\n          this.socketObserver.next({\n            event: 'auth',\n            content: {\n              message: `You are now connected to node ${this.mainSocket.getNode().operator} \n              For security reasons, authentication will be required every time the DAPP connects to a different node of the network.`,\n              method: 'authenticate',\n              type: 'warning'\n            }\n          });\n        }\n      });\n\n      this.mainSocket.fromEvent('authentication').subscribe(async (authResponse: any) => {\n        this.socketObserver.next({\n          event: 'auth',\n          content: {\n            message: 'Please authenticate your wallet in order to safely use the app...',\n            method: 'authentication',\n            type: 'loading',\n            data: {\n              authResponse: authResponse,\n              wallet: wallet\n            }\n          }\n        });\n      });\n\n      resolve(true);\n    });\n  }\n\n  /**\n   * initialize nodes\n   * @param {string} wallet\n   * @param {Array} network\n   * @returns {Promise>}\n   */\n  async initNodes(wallet: string | null, network: Array): Promise> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (this.nodesSockets.length) {\n          this.nodesSockets.forEach(socket => {\n            socket.disconnect();\n          });\n        }\n\n        this.nodesSockets = new Array();\n        this.nodesOnline = new Map();\n\n        network.forEach(node => {\n          let nodeSocket = new SmartNodeSocket(node, wallet);\n\n          this.nodesOnline.set(nodeSocket.getNode().url, {\n            node: nodeSocket.getNode(),\n            online: false\n          });\n\n          nodeSocket.on(\"connect\", async () => {\n            this.nodesOnline.set(nodeSocket.getNode().url, {\n              node: nodeSocket.getNode(),\n              online: true\n            });\n          });\n\n          nodeSocket.on(\"disconnect\", async (event) => {\n            this.nodesOnline.set(nodeSocket.getNode().url, {\n              node: nodeSocket.getNode(),\n              online: false\n            });\n\n            if (nodeSocket.getNode().operator == this.mainSocket.getNode().operator\n              && event == 'transport close') {\n              this.setNodeFromActiveNodes();\n            }\n          });\n\n          nodeSocket.connect();\n          this.nodesSockets.push(nodeSocket);\n        });\n\n        resolve(this.nodesSockets);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * private method to set node from active nodes\n   * @returns {void}\n   */\n  private setNodeFromActiveNodes(): void {\n    try {\n      // creating a Map of active node of the network...\n      let activeNodes = new Map(\n        Array.from(this.nodesOnline).filter(([key, node]) => {\n          if (node.online) {\n            return node.node.operator;\n          }\n\n          return false;\n        })\n      );\n\n      // mapping the Map into Array...\n      let network: Array = Array.from(activeNodes.values()).map(x => x.node);\n\n      // updating the current used node, picking up a random one from the online list...\n      this.smartNodeNetworkService.setNodeFromActiveNodes(network);\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                projects/sdk/src/lib/smart-node-sdk.service.ts\n            \n            injectable\n            SmartNodeSdkService\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                projects/sdk/src/lib/utils/smart-socket/smart-socket.class.ts\n            \n            injectable\n            SmartNodeSocket\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts\n            \n            injectable\n            SmartNodeHashPackService\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                projects/sdk/src/services/hedera/smart-node-hedera.service.ts\n            \n            injectable\n            SmartNodeHederaService\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                projects/sdk/src/services/network/interfaces/node.interface.ts\n            \n            interface\n            Node\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/sdk/src/services/network/smart-node-network.service.ts\n            \n            injectable\n            SmartNodeNetworkService\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                projects/sdk/src/services/rest/smart-node-rest.service.ts\n            \n            injectable\n            SmartNodeRestService\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                projects/sdk/src/services/sockets/smart-node-sockets.service.ts\n            \n            injectable\n            SmartNodeSocketsService\n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                projects/sdk/src/test.ts\n            \n            variable\n            context\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/sdk/src/test.ts\n            \n            variable\n            require\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^14.0.0\n        \n            @angular/common : ^14.0.0\n        \n            @angular/compiler : ^14.0.0\n        \n            @angular/core : ^14.0.0\n        \n            @angular/forms : ^14.0.0\n        \n            @angular/platform-browser : ^14.0.0\n        \n            @angular/platform-browser-dynamic : ^14.0.0\n        \n            @angular/router : ^14.0.0\n        \n            rxjs : ~7.5.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nHSuite - Smart Node - Angular SDK\nWelcome to Hsuite Angular SDK!\nThis library is meant to provide an easy-to-use interface to interact with our Smart Node Network, and to integrate our features into your own DAPP.\nRight now we decided to release just an Angular-SDK because our DAPP is Angular based, but feel free to take this as an inspiration to develop the SDK into any other framework you like.\nWhat's Hsuite?\nHsuite is an Hedera based technology, it makes uses of the power of Hedera to run the so called \"Smart Nodes\", which are a decentralised alternative to Smart Contract for Hedera Hashgraph.\nIf you want to know more about the project, check out the official links:\nWebsite |\nDocs\nfollow us on socials:\nTwitter |\nDiscord\nEvery single node of the network acts in a decentralised manner, so you can basically query each node and obtain the same identical response.\nWe provided also very basic swagger interface as well, which can be found under /api of every node, so for instance you will find the swagger for testnet nodes by following those links (those urls are just an example, you will find the same /api swagger interface on any of our network's nodes):\nTestnet - Smart Node 1 - APITestnet - Smart Node 2 - APITestnet - Smart Node 3 - APITestnet - Smart Node 4 - API\nInstallation\nIf you use npm, you shall run:\nnpm install @hsuite/smart-node-sdkinstead, if you use yarn:\nyarn add @hsuite/smart-node-sdkHow to Use the SDK\nInto your app.module.ts you should import our SDK and also provide the network you wish to work with, either 'testnet' | 'mainnet'.\nimport { SmartNodeSdkModule } from 'src/app/services/src/lib/smart-node-sdk.module';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    SmartNodeSdkModule\n  ],\n  providers: [\n    { provide: 'network', useValue: 'mainnet'}\n  ],\n  bootstrap: [AppComponent]\n})\n\nexport class AppModule { }Then, you can use the SDK in your app.component.ts to setup the events listeners and the main behavior, like in this example:\nimport { SmartNodeSdkService } from '@hsuite/angular-sdk';\n\n// subscribing to webSockets authentication events...\nthis.smartNodeSdkService.getEventsObserver().subscribe(async(event) => {\n  switch(event.method) {\n    case 'authentication':\n      // this event will open an authenticate request on hashpack, you can\n      // use this event to show a loading spinner, or any other UI interaction...\n      break;\n    case 'authenticate':\n      // this event will let you know if the user signed the auth on hashpack,\n      // or either rejected it, so you can do your UI login in here...\n      break;\n    case 'events':\n      // those are generic events, so you can handle all your UI logic related to\n      // any of the feature you're interacting with (launchpad, dex, dao, etc)\n      break;\n    case 'error':\n      // those events will show you any error coming from your interaction with smart nodes\n      // you can use those events to show those error in your UI...\n      break;\n  }    \n});  \n\nthis.smartNodeSdkService.getHashPackService().observeHashpackConnection.subscribe(async(savedData) => {\n  // this observer will let your DAPP know any login/logout/connection events related to hashpack itself...\n});Services\nYou can interact with the SDK on a very high level, you don't need to interact with the websockets \nor the network services unless you're doing something very advanced.\nNodes will be validating the requested transaction, and sign it if all the validators checks approves it.\nSmartNodeSdkService\nThe easiest way to use this SDK is to interact only with the SmartNodeSdkService.\nThere are few methods to help you out interacting with the all underlying layer.\nThe EventsObserver will provide you an easy access to all events triggered by the SmartNode Network.\ngetEventsObserver()The NetworkService provides all the methods you might need in order to interact with the SmartNode Network on a lower level.\ngetNetworkService()The HashPackService is basically wrapping all the interactions with HashPask into an easy-to-use service, so to avoid any headacke. \ngetHashPackService()The RestService provides all the methods you need to interact with the SmartNode HTTP GET Methods (read-only)\ngetRestService()The SocketService handles all the websockets connections on a low level, keeping track of healthy nodes and providing an easy-to-handle interface.\ngetSocketsService()The HederaService offers some methods (like AssociateToken for example), to facilitate some interaction by wrapping the most common use cases.\ngetHederaService()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        SmartNodeHashPackModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SmartNodeHederaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SmartNodeNetworkModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SmartNodeRestModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SmartNodeSdkModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SmartNodeSocketsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SmartNodeHashPackModule\n\n\n\ncluster_SmartNodeHashPackModule_providers\n\n\n\ncluster_SmartNodeHederaModule\n\n\n\ncluster_SmartNodeHederaModule_imports\n\n\n\ncluster_SmartNodeHederaModule_providers\n\n\n\ncluster_SmartNodeNetworkModule\n\n\n\ncluster_SmartNodeNetworkModule_providers\n\n\n\ncluster_SmartNodeRestModule\n\n\n\ncluster_SmartNodeRestModule_providers\n\n\n\ncluster_SmartNodeSdkModule\n\n\n\ncluster_SmartNodeSdkModule_imports\n\n\n\ncluster_SmartNodeSdkModule_providers\n\n\n\ncluster_SmartNodeSocketsModule\n\n\n\ncluster_SmartNodeSocketsModule_providers\n\n\n\n\nSmartNodeHashPackService\n\nSmartNodeHashPackService\n\n\n\nSmartNodeHashPackModule\n\nSmartNodeHashPackModule\n\nSmartNodeHashPackModule -->\n\nSmartNodeHashPackService->SmartNodeHashPackModule\n\n\n\n\n\nSmartNodeHederaModule\n\nSmartNodeHederaModule\n\nSmartNodeHederaModule -->\n\nSmartNodeHashPackModule->SmartNodeHederaModule\n\n\n\n\n\nSmartNodeSdkModule\n\nSmartNodeSdkModule\n\nSmartNodeSdkModule -->\n\nSmartNodeHashPackModule->SmartNodeSdkModule\n\n\n\n\n\nSmartNodeRestModule\n\nSmartNodeRestModule\n\nSmartNodeHederaModule -->\n\nSmartNodeRestModule->SmartNodeHederaModule\n\n\n\nSmartNodeSdkModule -->\n\nSmartNodeRestModule->SmartNodeSdkModule\n\n\n\nSmartNodeSdkModule -->\n\nSmartNodeHederaModule->SmartNodeSdkModule\n\n\n\n\n\nSmartNodeHederaService\n\nSmartNodeHederaService\n\nSmartNodeHederaModule -->\n\nSmartNodeHederaService->SmartNodeHederaModule\n\n\n\n\n\nSmartNodeNetworkService\n\nSmartNodeNetworkService\n\n\n\nSmartNodeNetworkModule\n\nSmartNodeNetworkModule\n\nSmartNodeNetworkModule -->\n\nSmartNodeNetworkService->SmartNodeNetworkModule\n\n\n\nSmartNodeRestModule -->\n\nSmartNodeNetworkModule->SmartNodeRestModule\n\n\n\n\n\nSmartNodeSocketsModule\n\nSmartNodeSocketsModule\n\nSmartNodeSocketsModule -->\n\nSmartNodeNetworkModule->SmartNodeSocketsModule\n\n\n\nSmartNodeSdkModule -->\n\nSmartNodeNetworkModule->SmartNodeSdkModule\n\n\n\n\n\nSmartNodeRestService\n\nSmartNodeRestService\n\nSmartNodeRestModule -->\n\nSmartNodeRestService->SmartNodeRestModule\n\n\n\nSmartNodeSdkModule -->\n\nSmartNodeSocketsModule->SmartNodeSdkModule\n\n\n\n\n\nSmartNodeSdkService\n\nSmartNodeSdkService\n\nSmartNodeSdkModule -->\n\nSmartNodeSdkService->SmartNodeSdkModule\n\n\n\n\n\nSmartNodeSocketsService\n\nSmartNodeSocketsService\n\nSmartNodeSocketsModule -->\n\nSmartNodeSocketsService->SmartNodeSocketsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            context   (projects/.../test.ts)\n                        \n                        \n                            require   (projects/.../test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/sdk/src/test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require.context('./', true, /\\.spec\\.ts$/)\n                    \n                \n\n            \n                \n                    context\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        require\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n\n            \n                \n                    test\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
