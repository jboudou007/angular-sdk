var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/Node.html",[0,1.437,1,0.237]],["body/interfaces/Node.html",[0,2.118,1,0.413,2,4.103,3,0.637,4,0.637,5,0.535,6,3.322,7,1.13,8,1.514,9,4.31,10,4.31,11,3.643,12,1.995,13,1.419,14,0.048,15,0.535,16,0.041,17,0.041]],["title/modules/SmartNodeHashPackModule.html",[18,1.264,19,1.264]],["body/modules/SmartNodeHashPackModule.html",[1,0.407,3,0.621,4,0.621,5,0.522,14,0.049,15,0.522,16,0.041,17,0.041,19,2.485,20,1.252,21,1.492,22,3.242,23,3.242,24,2.194,25,1.912,26,1.604,27,1.418,28,2.74,29,4.003,30,1.912,31,0.741,32,1.912,33,0.621,34,1.252,35,2.74,36,1.604,37,1.817,38,0.621]],["title/injectables/SmartNodeHashPackService.html",[24,1.116,39,0.363]],["body/injectables/SmartNodeHashPackService.html",[1,0.439,3,0.262,4,0.262,5,0.22,7,0.465,8,0.821,12,1.705,13,1.326,14,0.05,15,0.22,16,0.022,17,0.022,24,1.052,28,3.498,31,0.647,33,0.262,38,0.262,39,0.342,40,0.598,41,1.367,42,2.048,43,3.223,44,3.223,45,4.502,46,2.944,47,1.976,48,2.791,49,3.223,50,0.93,51,2.397,52,2.626,53,3.636,54,2.626,55,3.636,56,3.636,57,3.636,58,3.636,59,2.626,60,1.052,61,1.688,62,1.671,63,2.029,64,1.688,65,1.457,66,1.578,67,1.457,68,2.626,69,2.61,70,2.944,71,1.688,72,2.126,73,1.804,74,2.524,75,1.688,76,2.626,77,1.664,78,1.664,79,3.223,80,1.688,81,1.155,82,1.688,83,1.688,84,1.688,85,1.688,86,2.626,87,2.489,88,3.19,89,2.855,90,3.939,91,1.688,92,1.877,93,2.153,94,1.797,95,1.904,96,1.552,97,1.367,98,2.626,99,1.688,100,1.986,101,1.904,102,1.688,103,1.688,104,1.367,105,3.19,106,3.636,107,3.636,108,1.904,109,1.688,110,1.688,111,2.626,112,1.688,113,1.367,114,1.367,115,1.688,116,1.688,117,0.871,118,1.797,119,1.688,120,1.155,121,0.766,122,0.766,123,1.688,124,1.688,125,0.998,126,1.688,127,1.688,128,1.688,129,1.367,130,1.688,131,1.367,132,1.688,133,1.688,134,1.688,135,3.939,136,1.688,137,1.688,138,1.688,139,2.186,140,2.626,141,4.353,142,3.223,143,1.688,144,2.626,145,3.223,146,1.688,147,1.688,148,2.626,149,1.688,150,2.626,151,1.688,152,1.804,153,2.696,154,2.033,155,1.976,156,2.044,157,1.688,158,1.688,159,3.223,160,2.626,161,1.688,162,1.688,163,1.367,164,1.688,165,1.688,166,2.696,167,2.033,168,1.976,169,1.688,170,1.664,171,1.367,172,1.688,173,3.223,174,2.944,175,1.797,176,2.626,177,1.688,178,2.626,179,1.688,180,1.688,181,0.766,182,1.688,183,2.626,184,2.626,185,1.688,186,1.688,187,1.688,188,1.688,189,1.688,190,1.688,191,1.688,192,1.355,193,0.871,194,2.206,195,0.766,196,1.688,197,1.367,198,2.626,199,1.688,200,1.688,201,1.688,202,1.688,203,1.688]],["title/modules/SmartNodeHederaModule.html",[18,1.264,204,1.437]],["body/modules/SmartNodeHederaModule.html",[1,0.44,3,0.583,4,0.583,5,0.489,14,0.049,15,0.489,16,0.039,17,0.039,19,2.448,20,1.174,21,1.435,25,1.839,26,1.504,27,1.329,30,1.839,31,0.802,32,1.839,33,0.583,34,1.174,36,1.839,37,1.704,38,0.583,204,2.884,205,3.039,206,3.039,207,3.039,208,2.448,209,2.448,210,2.569,211,3.753,212,3.039,213,3.039,214,3.039,215,3.039,216,3.039]],["title/injectables/SmartNodeHederaService.html",[39,0.363,209,1.264]],["body/injectables/SmartNodeHederaService.html",[1,0.412,3,0.237,4,0.237,5,0.199,7,0.42,8,0.758,12,1.929,13,1.29,14,0.05,15,0.199,16,0.021,17,0.021,24,1.6,31,0.582,33,0.237,35,1.043,38,0.237,39,0.316,40,0.54,42,1.209,47,1.37,48,2.63,50,0.858,51,2.313,60,0.971,63,1.839,65,1.742,66,1.742,67,1.742,73,1.742,77,1.774,78,1.774,81,2.353,87,3.206,88,4.183,89,3.262,94,3.141,96,2.217,97,3.234,100,2.041,108,1.783,121,0.692,122,0.692,139,2.294,152,1.678,153,2.734,154,2.062,155,1.813,156,1.813,166,2.734,167,2.062,168,1.813,181,0.692,195,1.703,209,1.1,210,3.206,212,1.234,214,1.234,217,1.234,218,3.037,219,1.963,220,3.017,221,3.017,222,3.437,223,2.424,224,3.017,225,2.424,226,3.017,227,1.524,228,1.678,229,2.353,230,2.424,231,2.424,232,1.524,233,1.524,234,1.524,235,5.252,236,3.017,237,1.963,238,4.589,239,1.524,240,3.994,241,1.524,242,3.017,243,1.524,244,1.524,245,2.424,246,1.524,247,1.524,248,1.524,249,2.424,250,1.524,251,1.659,252,1.524,253,3.017,254,3.017,255,3.037,256,1.524,257,1.043,258,2.424,259,1.524,260,2.424,261,1.963,262,1.524,263,3.751,264,1.524,265,1.043,266,1.524,267,1.524,268,1.234,269,1.524,270,3.017,271,1.524,272,1.783,273,2.424,274,1.659,275,3.234,276,2.424,277,2.424,278,1.659,279,1.432,280,2.424,281,1.524,282,1.524,283,1.524,284,1.524,285,1.524,286,1.524,287,1.524,288,1.524,289,3.751,290,3.751,291,2.93,292,3.751,293,3.751,294,3.751,295,3.751,296,3.751,297,3.751,298,3.751,299,3.751,300,1.234,301,1.524,302,1.524,303,1.524,304,3.437,305,3.437,306,4.766,307,3.017,308,3.437,309,3.437,310,3.437,311,3.017,312,3.017,313,3.994,314,3.437,315,3.017,316,1.524,317,4.346,318,3.437,319,1.524,320,1.524,321,1.524,322,1.524,323,1.524,324,1.524,325,1.524]],["title/modules/SmartNodeNetworkModule.html",[18,1.264,326,1.116]],["body/modules/SmartNodeNetworkModule.html",[1,0.407,3,0.621,4,0.621,5,0.522,14,0.049,15,0.522,16,0.041,17,0.041,20,1.252,21,1.492,25,1.912,26,1.604,27,1.418,30,1.912,31,0.741,32,1.912,33,0.621,34,1.252,36,1.604,37,1.817,38,0.621,326,2.194,327,3.242,328,3.242,329,1.938,330,2.74,331,4.003,332,2.366]],["title/injectables/SmartNodeNetworkService.html",[39,0.363,329,0.986]],["body/injectables/SmartNodeNetworkService.html",[1,0.465,3,0.199,4,0.199,5,0.167,7,0.58,8,0.658,9,4.325,10,4.325,11,3.656,12,1.608,13,1.293,14,0.05,15,0.167,16,0.018,17,0.018,31,0.532,33,0.199,38,0.199,39,0.274,40,0.453,42,1.972,47,1.674,48,2.602,50,0.745,51,2.288,60,1.074,63,1.972,65,1.689,66,1.689,67,1.689,73,1.819,74,2.424,77,1.77,78,1.77,89,2.885,92,2.24,93,2.176,95,0.757,96,1.244,100,1.739,101,1.583,104,1.037,108,2.405,113,1.037,114,1.037,117,0.661,121,0.581,122,0.581,131,3.295,139,1.914,152,1.689,154,1.086,155,1.557,156,1.769,168,1.557,170,1.903,174,1.037,175,0.876,181,0.955,192,1.77,193,0.661,195,0.955,197,1.037,229,2.347,251,2.124,255,2.986,272,1.244,274,1.441,279,1.244,291,2.302,329,0.745,330,3.398,333,1.037,334,2.68,335,2.17,336,2.667,337,2.68,338,2.104,339,3.104,340,3.429,341,3.104,342,2.104,343,2.104,344,2.104,345,2.104,346,2.104,347,1.704,348,2.104,349,1.28,350,1.28,351,3.104,352,4.215,353,3.743,354,4.069,355,2.68,356,1.28,357,2.104,358,1.28,359,1.28,360,1.28,361,1.28,362,1.834,363,2.104,364,1.28,365,3.687,366,2.104,367,1.28,368,2.104,369,1.28,370,2.104,371,1.28,372,2.104,373,1.28,374,2.104,375,1.28,376,1.037,377,2.104,378,1.28,379,2.104,380,2.104,381,4.819,382,3.104,383,2.104,384,2.104,385,3.104,386,2.104,387,2.104,388,3.104,389,3.104,390,3.104,391,3.104,392,2.104,393,2.104,394,2.104,395,2.104,396,2.104,397,2.104,398,2.104,399,2.104,400,2.104,401,2.104,402,3.104,403,3.104,404,3.104,405,3.104,406,3.104,407,3.104,408,3.104,409,3.104,410,2.104,411,2.104,412,2.104,413,2.104,414,1.28,415,1.28,416,2.104,417,1.28,418,1.28,419,1.28,420,1.28,421,2.104,422,1.28,423,1.037,424,1.28,425,1.037,426,1.28,427,2.104,428,1.28,429,1.28,430,0.757,431,0.876,432,1.28,433,1.28,434,2.986,435,1.28,436,1.28,437,2.104,438,1.28,439,1.28,440,1.28,441,1.28,442,1.28,443,1.28,444,2.104,445,1.28,446,1.704,447,1.28,448,1.28,449,1.28,450,1.037,451,0.876,452,1.28,453,1.28,454,1.28,455,1.28,456,1.037,457,1.28,458,1.28,459,1.28,460,1.28,461,1.28,462,1.28,463,1.28,464,1.28,465,2.104,466,0.876,467,1.28,468,1.037,469,1.28,470,1.28,471,1.28,472,2.68,473,1.28,474,1.037,475,1.037,476,1.28,477,1.28,478,1.28,479,1.28,480,1.28]],["title/modules/SmartNodeRestModule.html",[18,1.264,208,1.264]],["body/modules/SmartNodeRestModule.html",[1,0.428,3,0.6,4,0.6,5,0.504,14,0.049,15,0.504,16,0.04,17,0.04,20,1.208,21,1.461,25,1.872,26,1.548,27,1.368,30,1.872,31,0.78,32,1.872,33,0.6,34,1.208,36,1.872,37,1.754,38,0.6,208,2.516,228,2.176,265,2.644,326,2.176,481,3.128,482,3.863,483,3.128,484,2.644,485,3.863,486,2.283,487,2.644]],["title/injectables/SmartNodeRestService.html",[39,0.363,228,1.116]],["body/injectables/SmartNodeRestService.html",[1,0.468,3,0.391,4,0.248,5,0.209,7,0.441,12,1.854,13,1.217,14,0.05,15,0.209,16,0.022,17,0.022,31,0.391,33,0.248,34,0.5,38,0.248,39,0.328,40,0.566,42,0.641,48,2.838,50,0.891,51,2.496,60,1.009,63,1.961,65,1.771,66,1.771,67,1.771,73,1.933,74,2.742,81,1.095,87,3.113,100,1.933,121,0.726,122,0.726,139,2.191,152,1.933,154,2.491,155,2.191,156,2.191,168,2.191,170,2.491,192,2.491,228,1.009,261,2.521,291,3.139,300,3.843,329,1.444,332,0.945,353,3.455,450,3.907,451,3.303,484,3.392,486,0.945,488,1.295,489,3.113,490,2.517,491,3.531,492,3.84,493,3.84,494,3.84,495,3.113,496,3.113,497,3.113,498,3.84,499,3.531,500,3.84,501,1.095,502,1.6,503,2.517,504,1.6,505,2.517,506,1.6,507,2.517,508,1.6,509,1.6,510,1.6,511,1.6,512,2.517,513,1.6,514,2.517,515,1.6,516,2.517,517,1.6,518,1.6,519,1.6,520,3.113,521,3.113,522,3.113,523,3.113,524,3.113,525,3.113,526,1.6,527,3.531,528,1.6,529,1.6,530,1.6,531,3.907,532,1.6,533,3.113,534,1.6,535,1.6,536,1.6,537,4.078,538,1.6,539,1.6,540,1.6,541,1.6,542,1.6,543,1.6,544,1.6,545,1.6,546,1.6,547,1.6]],["title/modules/SmartNodeSdkModule.html",[18,1.264,548,1.437]],["body/modules/SmartNodeSdkModule.html",[1,0.457,3,0.537,4,0.537,5,0.451,14,0.049,15,0.451,16,0.037,17,0.037,19,2.399,20,1.081,21,1.364,25,1.748,26,1.386,27,1.225,30,1.748,31,0.833,32,1.748,33,0.537,34,1.081,36,1.748,37,1.57,38,0.537,204,2.728,208,2.399,213,2.801,215,2.801,326,2.117,487,2.367,548,2.921,549,2.801,550,2.801,551,2.801,552,2.728,553,2.399,554,2.367,555,3.458,556,2.801,557,2.801,558,3.458,559,2.801,560,2.801,561,2.801,562,3.458,563,3.458]],["title/injectables/SmartNodeSdkService.html",[39,0.363,553,1.264]],["body/injectables/SmartNodeSdkService.html",[1,0.462,3,0.274,4,0.274,5,0.23,7,0.486,8,0.85,12,1.174,13,1.17,14,0.05,15,0.23,16,0.023,17,0.023,24,1.878,31,0.709,33,0.274,35,1.208,38,0.274,39,0.354,40,0.625,42,2.184,46,3.015,47,1.69,48,2.637,50,0.962,51,2.127,60,1.089,62,1.878,63,2.027,65,1.611,66,1.611,67,1.611,69,1.429,72,1.429,73,1.917,74,2.358,77,1.711,78,1.711,92,1.711,93,1.711,100,1.878,101,1.958,117,0.911,118,1.86,120,1.208,121,0.801,122,0.801,125,1.043,139,2.272,152,1.773,155,0.801,156,1.69,167,1.711,168,0.801,170,2.075,171,2.201,181,1.234,192,0.911,193,1.403,194,2.269,195,1.505,209,2.127,216,1.429,218,1.429,228,1.878,229,2.269,257,1.208,265,1.208,268,1.429,272,2.376,279,2.376,329,1.617,332,1.043,335,1.429,336,1.86,362,2.269,430,1.043,431,1.86,456,1.429,466,1.208,501,1.208,531,2.201,553,1.234,554,3.497,556,1.429,557,1.429,559,1.429,560,1.429,561,1.429,564,1.429,565,3.314,566,2.684,567,3.314,568,2.718,569,3.723,570,3.723,571,3.015,572,3.723,573,3.723,574,3.723,575,2.718,576,2.718,577,2.718,578,2.718,579,2.718,580,1.765,581,1.765,582,1.765,583,1.765,584,1.765,585,1.765,586,1.765,587,2.718,588,1.765,589,2.269,590,2.718,591,1.765,592,2.718,593,1.765,594,2.718,595,1.765,596,1.765,597,1.765,598,2.718,599,1.765,600,1.765,601,1.765,602,1.765,603,2.718,604,2.718,605,1.765,606,1.765,607,2.201,608,1.765,609,1.765,610,1.765,611,2.718,612,2.718,613,3.015,614,2.718,615,2.718,616,2.684,617,1.765,618,1.765,619,1.765,620,1.429,621,1.765,622,1.765,623,2.201,624,1.765,625,1.765,626,1.765,627,1.429,628,1.429,629,1.765,630,1.765,631,1.765,632,1.765,633,1.765,634,1.765,635,1.765,636,1.765,637,1.765,638,1.765,639,2.269,640,1.765,641,1.429,642,2.548,643,1.765,644,1.765,645,1.765,646,1.765,647,1.429,648,1.765,649,1.429,650,1.765,651,3.723,652,1.429,653,1.765,654,1.765,655,2.684,656,1.765,657,1.765,658,1.765,659,1.765,660,2.718,661,1.765,662,1.765,663,1.765,664,2.718,665,2.718,666,1.765,667,1.429,668,1.86,669,1.208,670,1.208,671,1.429,672,1.429,673,2.201,674,2.718,675,2.201,676,1.765,677,1.765,678,1.765,679,1.765,680,1.765,681,1.765,682,1.765,683,1.765,684,1.765,685,1.765,686,1.765,687,1.765,688,1.765]],["title/injectables/SmartNodeSocket.html",[39,0.363,689,1.646]],["body/injectables/SmartNodeSocket.html",[1,0.459,3,0.547,4,0.547,5,0.46,7,0.971,8,1.381,11,2.414,12,1.708,13,1.216,14,0.049,15,0.46,16,0.038,17,0.038,31,0.686,33,0.547,34,1.103,38,0.547,39,0.576,40,1.249,42,1.932,50,1.564,60,1.77,63,1.932,65,1.413,66,1.413,67,1.413,73,1.413,152,1.413,195,1.601,257,2.414,434,3.576,655,2.855,669,3.563,689,2.61,690,4.093,691,3.46,692,2.855,693,4.416,694,5.055,695,5.055,696,3.526,697,4.822,698,4.416,699,3.526,700,3.526,701,3.526,702,4.822,703,4.416,704,3.526,705,3.526,706,3.526,707,3.526,708,3.526,709,3.526,710,3.526,711,2.855,712,3.526,713,3.526]],["title/modules/SmartNodeSocketsModule.html",[18,1.264,552,1.437]],["body/modules/SmartNodeSocketsModule.html",[1,0.428,3,0.6,4,0.6,5,0.504,14,0.049,15,0.504,16,0.04,17,0.04,20,1.208,21,1.461,25,1.872,26,1.548,27,1.368,30,1.872,31,0.78,32,1.872,33,0.6,34,1.208,36,1.872,37,1.754,38,0.6,62,2.176,120,2.644,326,2.176,486,2.283,487,2.644,552,2.861,714,3.128,715,3.128,716,3.863,717,2.644,718,3.863]],["title/injectables/SmartNodeSocketsService.html",[39,0.363,62,1.116]],["body/injectables/SmartNodeSocketsService.html",[1,0.473,3,0.265,4,0.265,5,0.223,7,0.47,8,0.828,12,1.643,13,1.35,14,0.05,15,0.223,16,0.023,17,0.023,31,0.65,33,0.265,38,0.265,39,0.345,40,0.604,42,2.096,47,2.192,50,0.938,51,2.255,60,1.061,62,1.061,63,2.052,65,1.679,66,1.679,67,1.679,70,2.145,73,1.9,74,2.163,92,1.888,93,1.888,95,1.009,96,1.918,100,2.014,101,1.918,105,2.628,108,2.936,117,0.881,118,1.813,121,0.775,122,0.775,125,1.009,139,1.202,152,1.859,153,1.813,154,1.675,155,1.473,156,1.473,166,1.168,167,1.367,168,1.202,170,1.367,175,1.168,181,0.775,192,0.881,193,1.888,194,2.222,195,1.902,251,2.504,274,1.168,329,1.484,332,1.009,347,2.962,362,2.222,376,1.382,430,1.009,431,1.168,446,1.382,451,1.168,466,1.168,468,1.382,474,1.382,486,1.009,501,1.168,589,2.868,607,1.382,613,3.206,623,2.628,628,1.382,639,1.813,642,1.813,647,1.382,649,1.382,668,2.222,669,2.992,670,1.168,671,2.145,672,1.382,673,3.206,675,1.382,689,2.583,691,1.168,717,3.533,719,1.382,720,3.246,721,3.246,722,3.246,723,3.246,724,3.658,725,3.658,726,3.658,727,3.658,728,2.649,729,2.649,730,2.649,731,2.649,732,2.649,733,2.649,734,1.707,735,1.707,736,1.707,737,4.741,738,1.707,739,2.649,740,3.246,741,1.707,742,4.19,743,2.649,744,1.707,745,2.649,746,1.707,747,2.649,748,1.707,749,2.649,750,1.707,751,1.707,752,1.707,753,1.707,754,2.649,755,1.707,756,1.707,757,1.707,758,1.707,759,1.707,760,1.707,761,1.707,762,1.707,763,3.658,764,1.707,765,2.649,766,1.707,767,1.707,768,1.707,769,1.707,770,3.658,771,1.707,772,1.707,773,2.649,774,1.707,775,1.707,776,3.959,777,3.959,778,1.707,779,1.707,780,1.707,781,2.649,782,3.246,783,1.707,784,1.382,785,1.707,786,1.707,787,1.707,788,1.382,789,1.707,790,1.707,791,1.707,792,1.382,793,1.707,794,1.707,795,1.707,796,1.707,797,1.707,798,1.707,799,3.246,800,3.658,801,1.707,802,1.707,803,1.707,804,1.707,805,1.707,806,1.707,807,1.707,808,1.707,809,1.707,810,1.707,811,1.707,812,1.707,813,1.707,814,1.707,815,1.707,816,1.707,817,1.707,818,1.707,819,1.707,820,1.707,821,1.707,822,1.707]],["title/coverage.html",[823,3.065]],["body/coverage.html",[0,1.948,1,0.466,5,0.492,6,3.057,13,1.04,14,0.048,16,0.039,17,0.039,24,1.512,28,2.584,39,0.713,41,3.057,62,1.512,100,1.512,181,2.539,209,1.714,210,2.584,217,3.057,228,1.512,329,1.337,330,2.584,333,3.057,484,2.584,488,3.057,553,1.714,554,2.584,564,3.057,689,2.23,690,3.057,691,2.584,692,3.057,717,2.584,719,3.057,823,3.057,824,3.774,825,3.774,826,3.774,827,3.774,828,4.606,829,3.774,830,3.774,831,3.774,832,3.774,833,3.774,834,3.73,835,4.606,836,3.057,837,4.606,838,3.057,839,3.774,840,3.774]],["title/dependencies.html",[21,1.046,841,1.889]],["body/dependencies.html",[14,0.049,16,0.042,17,0.042,21,1.294,33,0.642,117,2.135,842,4.137,843,5.608,844,4.137,845,4.137,846,4.137,847,4.866,848,3.941,849,4.137,850,4.137,851,4.137,852,4.137,853,4.137,854,4.137,855,4.137]],["title/index.html",[7,0.643,856,2.333,857,2.333]],["body/index.html",[0,2.203,1,0.446,14,0.048,15,0.304,16,0.029,17,0.029,27,1.183,30,0.933,31,0.606,32,0.933,34,1.578,36,0.933,38,0.361,47,2.199,50,1.6,77,1.724,78,2.017,94,1.594,125,2.522,129,3.164,163,3.164,167,2.017,193,1.202,219,1.886,272,2.522,275,1.886,278,1.594,279,2.522,291,1.376,336,3.219,423,3.164,425,1.886,430,3.026,475,3.164,548,1.724,553,1.774,566,1.886,571,1.886,589,2.674,616,1.886,620,1.886,627,1.886,639,3.392,641,3.164,642,2.287,652,1.886,667,3.164,668,2.287,670,1.594,711,1.886,784,1.886,788,3.164,792,1.886,858,4.268,859,5.121,860,2.329,861,2.329,862,2.329,863,4.268,864,4.268,865,4.703,866,2.329,867,2.329,868,2.329,869,2.329,870,2.329,871,3.341,872,2.329,873,2.329,874,2.329,875,2.329,876,2.329,877,2.329,878,2.329,879,2.329,880,2.329,881,2.329,882,2.329,883,3.341,884,2.329,885,3.341,886,2.329,887,2.329,888,2.329,889,2.329,890,3.907,891,2.329,892,2.329,893,2.329,894,3.341,895,2.329,896,2.329,897,2.329,898,2.329,899,2.329,900,2.329,901,2.329,902,2.329,903,2.329,904,3.341,905,2.329,906,2.329,907,3.341,908,2.329,909,2.329,910,2.329,911,3.907,912,2.329,913,2.329,914,2.329,915,2.329,916,3.341,917,2.329,918,4.703,919,2.329,920,3.907,921,2.329,922,3.907,923,2.329,924,2.329,925,2.329,926,3.341,927,2.329,928,2.329,929,3.341,930,2.329,931,3.341,932,2.329,933,2.329,934,2.329,935,2.329,936,2.329,937,2.329,938,2.329,939,2.329,940,3.341,941,2.329,942,2.329,943,2.329,944,2.329,945,2.329,946,2.329,947,2.329,948,2.329,949,2.329,950,2.329,951,2.329,952,3.907,953,2.329,954,4.268,955,3.907,956,2.329,957,2.329,958,2.329,959,2.329,960,2.329,961,2.329,962,3.341,963,2.329,964,3.341,965,2.329,966,3.341,967,3.341,968,2.329,969,2.329,970,2.329,971,2.329,972,2.329,973,2.329,974,2.329,975,2.329,976,2.329,977,3.341,978,2.329,979,3.907,980,2.329,981,2.329,982,2.329,983,2.329,984,2.329,985,2.329,986,2.329,987,2.329,988,2.329,989,2.329,990,2.329,991,2.329,992,2.329,993,2.329,994,2.329,995,2.329,996,2.329,997,2.329,998,2.329,999,3.907,1000,2.329,1001,2.329,1002,3.341,1003,2.329,1004,2.329,1005,2.329,1006,3.341,1007,2.329,1008,2.329,1009,2.329,1010,2.329,1011,2.329,1012,2.329,1013,2.329,1014,2.329,1015,2.329,1016,2.329,1017,2.329,1018,2.329,1019,2.329,1020,2.329,1021,2.329,1022,2.329,1023,2.329,1024,2.329,1025,2.329,1026,2.329,1027,2.329,1028,2.329,1029,2.329]],["title/modules.html",[20,1.184]],["body/modules.html",[14,0.042,16,0.042,17,0.042,19,1.902,20,1.31,204,2.163,208,1.902,326,1.679,548,2.163,552,2.163,848,4.478,1030,5.53,1031,5.53,1032,5.53]],["title/overview.html",[1033,3.065]],["body/overview.html",[0,1.85,14,0.049,16,0.038,17,0.038,19,2.421,20,1.12,21,1.395,22,2.902,23,2.902,24,1.947,25,1.788,26,1.436,27,1.269,40,1.269,62,1.947,204,2.845,205,2.902,206,2.902,207,2.902,208,2.481,209,2.205,228,1.947,278,2.453,326,2.167,327,2.902,328,2.902,329,1.72,481,2.902,483,2.902,548,2.915,549,2.902,550,2.902,551,2.902,552,2.791,553,2.205,714,2.902,715,2.902,1033,2.902,1034,3.583,1035,3.583]],["title/properties.html",[8,1.046,841,1.889]],["body/properties.html",[8,1.389,14,0.046,16,0.043,17,0.043,1036,4.443,1037,4.443]],["title/miscellaneous/variables.html",[1038,1.889,1039,2.709]],["body/miscellaneous/variables.html",[7,1.181,13,1.369,14,0.046,16,0.043,17,0.043,92,2.214,93,2.214,95,2.535,237,3.473,834,3.473,836,4.025,838,4.025,1038,3.473,1039,3.473,1040,4.97,1041,4.289,1042,4.289]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"interfaces/Node.html":{},"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":181,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{}}}],["0.0.0",{"_index":1037,"title":{},"body":{"properties.html":{}}}],["0.0.1786344",{"_index":389,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.0.1786345",{"_index":393,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.0.1786347",{"_index":396,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.0.1786365",{"_index":399,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.0.1786597",{"_index":379,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.0.1786598",{"_index":383,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.0.1786599",{"_index":386,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.0.3224",{"_index":402,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.0.3243",{"_index":404,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.0.3266",{"_index":406,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.0.3320",{"_index":408,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["0.11.4",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":837,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":830,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":832,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":827,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":829,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":833,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":831,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":828,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":278,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"index.html":{},"overview.html":{}}}],["14.0.0",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":923,"title":{},"body":{"index.html":{}}}],["2.3.0",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["28",{"_index":276,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["3",{"_index":275,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"index.html":{}}}],["302a300506032b6570032100077bfba9f0fb180026f0de51d4e1083d616eff34a8fe62a1c0e34dd975b7f8cf",{"_index":394,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["302a300506032b6570032100233b043e21d5e148f48e2c2da6607a1f5e6fc381781bd0561967743a8291785e",{"_index":384,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["302a300506032b65700321003f54816030c29221e4f228c76415cba0db1ab4c49827d9dbf580abc2f2b29c24",{"_index":380,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["302a300506032b65700321004530757c566a19027a02fc58c9387739661e727e09e1bc92f1ee2fcde530b391",{"_index":407,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["302a300506032b6570032100485e23e18834571e466f96de9f96f228a1f5da860b319f0f0cb2890f938f298d",{"_index":400,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["302a300506032b65700321004e3c29113c911ce6dba13669fda53ed1ab3d89547e23c0b7ab2275fd5dc05766",{"_index":390,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["302a300506032b657003210057a3ffed480e36faf916e032435368f2eb9f951a6b58de1a64829336516fdcbf",{"_index":403,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["302a300506032b6570032100c236c88b0aadccf86cc09c57734401409e301d45018ab179f8463801f486c89a",{"_index":387,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["302a300506032b6570032100c63e283249e90a6971d71e4c8a1f0bc26a7a7f61f8524c7866a1d8ff779a4ffb",{"_index":405,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["302a300506032b6570032100ecb67bdae47babf0d2df87f6b787562357550fac02a5e1ea44b22cc0c1ab2738",{"_index":409,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["302a300506032b6570032100ff792317f5a24278f1a2dddfc9a23670e158ccb9ecd42cdd0ab36e5ad8bc40a6",{"_index":397,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["4",{"_index":924,"title":{},"body":{"index.html":{}}}],["6",{"_index":1034,"title":{},"body":{"overview.html":{}}}],["7",{"_index":1035,"title":{},"body":{"overview.html":{}}}],["7.5.0",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":280,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["_initsockets",{"_index":568,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["_initsockets(hashconnectdata",{"_index":579,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["access",{"_index":997,"title":{},"body":{"index.html":{}}}],["accountid",{"_index":87,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeRestService.html":{}}}],["accountid(nodeaccountid",{"_index":281,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["accountids",{"_index":107,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["accounttosign",{"_index":188,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["active",{"_index":468,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["activenodes",{"_index":376,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["activenodes.length",{"_index":464,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["activenodes[math.floor(math.random",{"_index":463,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["acts",{"_index":902,"title":{},"body":{"index.html":{}}}],["add",{"_index":932,"title":{},"body":{"index.html":{}}}],["addhbartransfer(fees.wallet",{"_index":314,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["addhbartransfer(senderid",{"_index":310,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["addtokentransfer(this.utilities.vehsuite.id",{"_index":317,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["advanced",{"_index":984,"title":{},"body":{"index.html":{}}}],["alternative",{"_index":886,"title":{},"body":{"index.html":{}}}],["angular",{"_index":858,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":33,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":475,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"index.html":{}}}],["apitestnet",{"_index":922,"title":{},"body":{"index.html":{}}}],["app",{"_index":672,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["app.component.ts",{"_index":944,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":934,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":940,"title":{},"body":{"index.html":{}}}],["appmetadata",{"_index":43,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["appmodule",{"_index":943,"title":{},"body":{"index.html":{}}}],["approves",{"_index":990,"title":{},"body":{"index.html":{}}}],["array",{"_index":108,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["array.from(activenodes.values()).map(x",{"_index":816,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["array.from(this.nodesonline).filter(([key",{"_index":812,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["associatetoken",{"_index":219,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"index.html":{}}}],["associatetoken(tokenids",{"_index":231,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["async",{"_index":51,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["async(event",{"_index":803,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["auth",{"_index":193,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["auth.isvalidsignature",{"_index":780,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["auth.value",{"_index":196,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["authenticate",{"_index":668,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["authenticatewallet",{"_index":52,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["authenticatewallet(walletid",{"_index":68,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["authentication",{"_index":642,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["authorizewallet",{"_index":724,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["authresponse",{"_index":194,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["authresponse.success",{"_index":662,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["authsession",{"_index":740,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["authstorage",{"_index":454,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["authstorage.signedpayload.originalpayload.node",{"_index":457,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["avoid",{"_index":1009,"title":{},"body":{"index.html":{}}}],["await",{"_index":139,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["axios",{"_index":421,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["axios.get(`${this.node.url}/${endpoint",{"_index":478,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["axios.post(`${this.node.url}/${endpoint",{"_index":479,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["based",{"_index":871,"title":{},"body":{"index.html":{}}}],["basic",{"_index":910,"title":{},"body":{"index.html":{}}}],["basically",{"_index":904,"title":{},"body":{"index.html":{}}}],["behavior",{"_index":947,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":89,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["bootstrap",{"_index":942,"title":{},"body":{"index.html":{}}}],["break",{"_index":279,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["browse",{"_index":1032,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":848,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["bytearray",{"_index":186,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["call",{"_index":444,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["callapiendpoint",{"_index":337,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["callapiendpoint(type",{"_index":350,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["called",{"_index":884,"title":{},"body":{"index.html":{}}}],["can't",{"_index":469,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["capacitor/storage",{"_index":114,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["case",{"_index":272,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["cases",{"_index":1029,"title":{},"body":{"index.html":{}}}],["catch",{"_index":166,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["catch(error",{"_index":170,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["check",{"_index":627,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["checks",{"_index":989,"title":{},"body":{"index.html":{}}}],["class",{"_index":38,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["clearauthsession",{"_index":53,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["close",{"_index":806,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["cluster_smartnodehashpackmodule",{"_index":22,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"overview.html":{}}}],["cluster_smartnodehashpackmodule_providers",{"_index":23,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"overview.html":{}}}],["cluster_smartnodehederamodule",{"_index":205,"title":{},"body":{"modules/SmartNodeHederaModule.html":{},"overview.html":{}}}],["cluster_smartnodehederamodule_imports",{"_index":206,"title":{},"body":{"modules/SmartNodeHederaModule.html":{},"overview.html":{}}}],["cluster_smartnodehederamodule_providers",{"_index":207,"title":{},"body":{"modules/SmartNodeHederaModule.html":{},"overview.html":{}}}],["cluster_smartnodenetworkmodule",{"_index":327,"title":{},"body":{"modules/SmartNodeNetworkModule.html":{},"overview.html":{}}}],["cluster_smartnodenetworkmodule_providers",{"_index":328,"title":{},"body":{"modules/SmartNodeNetworkModule.html":{},"overview.html":{}}}],["cluster_smartnoderestmodule",{"_index":481,"title":{},"body":{"modules/SmartNodeRestModule.html":{},"overview.html":{}}}],["cluster_smartnoderestmodule_imports",{"_index":482,"title":{},"body":{"modules/SmartNodeRestModule.html":{}}}],["cluster_smartnoderestmodule_providers",{"_index":483,"title":{},"body":{"modules/SmartNodeRestModule.html":{},"overview.html":{}}}],["cluster_smartnodesdkmodule",{"_index":549,"title":{},"body":{"modules/SmartNodeSdkModule.html":{},"overview.html":{}}}],["cluster_smartnodesdkmodule_imports",{"_index":550,"title":{},"body":{"modules/SmartNodeSdkModule.html":{},"overview.html":{}}}],["cluster_smartnodesdkmodule_providers",{"_index":551,"title":{},"body":{"modules/SmartNodeSdkModule.html":{},"overview.html":{}}}],["cluster_smartnodesocketsmodule",{"_index":714,"title":{},"body":{"modules/SmartNodeSocketsModule.html":{},"overview.html":{}}}],["cluster_smartnodesocketsmodule_imports",{"_index":716,"title":{},"body":{"modules/SmartNodeSocketsModule.html":{}}}],["cluster_smartnodesocketsmodule_providers",{"_index":715,"title":{},"body":{"modules/SmartNodeSocketsModule.html":{},"overview.html":{}}}],["code",{"_index":599,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["coming",{"_index":972,"title":{},"body":{"index.html":{}}}],["common",{"_index":1028,"title":{},"body":{"index.html":{}}}],["config",{"_index":354,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["connect",{"_index":54,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["connect(network",{"_index":76,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["connected",{"_index":781,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["connection",{"_index":634,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["connections",{"_index":1018,"title":{},"body":{"index.html":{}}}],["connects",{"_index":789,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["console.error(error",{"_index":171,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["console.log(`network",{"_index":602,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["console.log(message",{"_index":615,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["const",{"_index":145,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["constructor",{"_index":60,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["constructor(node",{"_index":696,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["constructor(smartnodehashpackservice",{"_index":227,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["constructor(smartnodenetworkservice",{"_index":501,"title":{},"body":{"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["constructor(smartnodesocketsservice",{"_index":61,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["content",{"_index":777,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["context",{"_index":836,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["contract",{"_index":887,"title":{},"body":{"index.html":{}}}],["core",{"_index":426,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["correctly",{"_index":604,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["councilnftid",{"_index":303,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["coverage",{"_index":823,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createdaotransaction",{"_index":220,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["createdaotransaction(daotokenid",{"_index":234,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["createnftpooltransaction",{"_index":221,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["createnftpooltransaction(senderid",{"_index":241,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["creating",{"_index":811,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["current",{"_index":819,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["currentnode",{"_index":742,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["currentnode.operator",{"_index":772,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["danger",{"_index":677,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["dao",{"_index":970,"title":{},"body":{"index.html":{}}}],["daodocument",{"_index":236,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["daos",{"_index":522,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["daotokenid",{"_index":240,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["dapp",{"_index":788,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["data",{"_index":451,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["data.image",{"_index":543,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["dataobserver",{"_index":44,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["decentralised",{"_index":885,"title":{},"body":{"index.html":{}}}],["decided",{"_index":869,"title":{},"body":{"index.html":{}}}],["decimal",{"_index":266,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["decimal(fees.create.fixed.hbar).div(hsuiteinfos.price).times(0.1",{"_index":322,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["decimal(fees.fixed.hbar).div(hsuiteinfos.price).times(0.1",{"_index":307,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["decimal.js",{"_index":267,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["declarations",{"_index":939,"title":{},"body":{"index.html":{}}}],["default",{"_index":92,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":63,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":127,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["develop",{"_index":876,"title":{},"body":{"index.html":{}}}],["dex",{"_index":969,"title":{},"body":{"index.html":{}}}],["different",{"_index":628,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["disconnect",{"_index":55,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["discord",{"_index":900,"title":{},"body":{"index.html":{}}}],["docs",{"_index":896,"title":{},"body":{"index.html":{}}}],["document.referrer",{"_index":713,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["documentation",{"_index":824,"title":{},"body":{"coverage.html":{}}}],["doing",{"_index":982,"title":{},"body":{"index.html":{}}}],["don't",{"_index":980,"title":{},"body":{"index.html":{}}}],["down",{"_index":619,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["dynamic",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":905,"title":{},"body":{"index.html":{}}}],["easiest",{"_index":991,"title":{},"body":{"index.html":{}}}],["easy",{"_index":864,"title":{},"body":{"index.html":{}}}],["empty",{"_index":470,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["endpoint",{"_index":352,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["enhanching",{"_index":128,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["entire",{"_index":437,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["error",{"_index":167,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["error(`the",{"_index":467,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["error(error.message",{"_index":649,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["error.message",{"_index":676,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["errors",{"_index":647,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["establish",{"_index":632,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["etc",{"_index":971,"title":{},"body":{"index.html":{}}}],["event",{"_index":589,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["event.data.authresponse.payload",{"_index":661,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["event.data.authresponse.signeddata.serversigningaccount",{"_index":658,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["event.data.wallet",{"_index":660,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["events",{"_index":639,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["eventsobservable",{"_index":565,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["eventsobserver",{"_index":566,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["example",{"_index":920,"title":{},"body":{"index.html":{}}}],["exchange",{"_index":525,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["export",{"_index":15,"title":{},"body":{"interfaces/Node.html":{},"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["exports",{"_index":37,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{}}}],["extends",{"_index":693,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["facilitate",{"_index":1027,"title":{},"body":{"index.html":{}}}],["failed",{"_index":666,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["false",{"_index":96,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["feature",{"_index":965,"title":{},"body":{"index.html":{}}}],["features",{"_index":867,"title":{},"body":{"index.html":{}}}],["fee",{"_index":527,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["feel",{"_index":872,"title":{},"body":{"index.html":{}}}],["fees",{"_index":238,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["fees.create.fixed.hbar",{"_index":324,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["fees.fixed.hbar",{"_index":312,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["fees/info",{"_index":540,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["fetch",{"_index":436,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["fetched",{"_index":605,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["few",{"_index":993,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Node.html":{},"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{}}}],["finally",{"_index":449,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["finance",{"_index":126,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["find",{"_index":916,"title":{},"body":{"index.html":{}}}],["first",{"_index":424,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["follow",{"_index":897,"title":{},"body":{"index.html":{}}}],["following",{"_index":917,"title":{},"body":{"index.html":{}}}],["found",{"_index":913,"title":{},"body":{"index.html":{}}}],["framework",{"_index":877,"title":{},"body":{"index.html":{}}}],["free",{"_index":873,"title":{},"body":{"index.html":{}}}],["function",{"_index":450,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{}}}],["game",{"_index":529,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["gameflipcoin",{"_index":489,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["gameflipcoin(transactionid",{"_index":503,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["generating",{"_index":273,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["generic",{"_index":961,"title":{},"body":{"index.html":{}}}],["getaccountbalance",{"_index":490,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["getaccountbalance(accountid",{"_index":505,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["getaccountinfos",{"_index":491,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["getaccountinfos(accountid",{"_index":507,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["getapiendpoint",{"_index":338,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["getapiendpoint(endpoint",{"_index":357,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["getauthsession",{"_index":56,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["getcurrentnode",{"_index":339,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["geteventsobserver",{"_index":569,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["geteventsobserver()the",{"_index":1000,"title":{},"body":{"index.html":{}}}],["getgametoken",{"_index":492,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["gethashpackservice",{"_index":570,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["gethashpackservice()the",{"_index":1011,"title":{},"body":{"index.html":{}}}],["gethederaservice",{"_index":571,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["gethsuiteholders",{"_index":493,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["gethsuitestaking",{"_index":494,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["getmainsocket",{"_index":725,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["getnetwork",{"_index":340,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["getnetworkservice",{"_index":572,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["getnetworkservice()the",{"_index":1004,"title":{},"body":{"index.html":{}}}],["getnftforholder",{"_index":495,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["getnftforholder(accountid",{"_index":512,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["getnode",{"_index":695,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["getnodeobserver",{"_index":341,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["getnodesonline",{"_index":726,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["getrandomnode",{"_index":342,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["getrandomnode(override",{"_index":363,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["getrandomnodefornetwork",{"_index":222,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["getrestservice",{"_index":573,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["getrestservice()the",{"_index":1015,"title":{},"body":{"index.html":{}}}],["getsigner",{"_index":57,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["getsocketobserver",{"_index":727,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["getsocketsservice",{"_index":574,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["getsocketsservice()the",{"_index":1024,"title":{},"body":{"index.html":{}}}],["getspecificnode",{"_index":343,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["getspecificnode(index",{"_index":366,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["getting",{"_index":856,"title":{"index.html":{}},"body":{}}],["gettokenchaininfos",{"_index":496,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["gettokenchaininfos(tokenid",{"_index":514,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["gettokeninfos",{"_index":497,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["gettokeninfos(tokenid",{"_index":516,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["getutilities",{"_index":498,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["goes",{"_index":618,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["grab",{"_index":445,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["handle",{"_index":962,"title":{},"body":{"index.html":{}}}],["handleauthevent",{"_index":575,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["handleauthevent(event",{"_index":587,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["handleerrors",{"_index":576,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["handleerrors(event",{"_index":590,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["handlegenericevents",{"_index":577,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["handlegenericevents(event",{"_index":592,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["handles",{"_index":1017,"title":{},"body":{"index.html":{}}}],["hashconnect",{"_index":45,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashconnect.auth",{"_index":174,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["hashconnect.data",{"_index":142,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashconnectdata",{"_index":46,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["hashconnectdata.value",{"_index":177,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashconnectresponse",{"_index":189,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashconnecttypes",{"_index":115,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashconnecttypes.appmetadata",{"_index":98,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashgraph",{"_index":888,"title":{},"body":{"index.html":{}}}],["hashgraph/sdk",{"_index":264,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hashpack",{"_index":163,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"index.html":{}}}],["hashpack.module",{"_index":213,"title":{},"body":{"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeSdkModule.html":{}}}],["hashpack.module.ts",{"_index":29,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{}}}],["hashpack.service",{"_index":35,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["hashpack.service.ts",{"_index":41,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"coverage.html":{}}}],["hashpack.service.ts:111",{"_index":85,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:12",{"_index":103,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:13",{"_index":99,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:134",{"_index":91,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:15",{"_index":102,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:16",{"_index":112,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:160",{"_index":75,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:171",{"_index":83,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:18",{"_index":110,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:19",{"_index":109,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:191",{"_index":71,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:23",{"_index":64,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:49",{"_index":84,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:60",{"_index":80,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack.service.ts:83",{"_index":82,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["hashpack/smart",{"_index":212,"title":{},"body":{"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{}}}],["hashpackservice",{"_index":1005,"title":{},"body":{"index.html":{}}}],["hashpackwallet",{"_index":567,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["hashpask",{"_index":1008,"title":{},"body":{"index.html":{}}}],["hbar",{"_index":258,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hbar(fees.create.fixed.hbar",{"_index":323,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hbar.from",{"_index":311,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hbar.from(fees.fixed.hbar",{"_index":315,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hbarunit",{"_index":259,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hbarunit.hbar",{"_index":313,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["headacke",{"_index":1010,"title":{},"body":{"index.html":{}}}],["healthy",{"_index":1022,"title":{},"body":{"index.html":{}}}],["hedera",{"_index":129,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"index.html":{}}}],["hedera.module",{"_index":558,"title":{},"body":{"modules/SmartNodeSdkModule.html":{}}}],["hedera.module.ts",{"_index":211,"title":{},"body":{"modules/SmartNodeHederaModule.html":{}}}],["hedera.service",{"_index":216,"title":{},"body":{"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeSdkService.html":{}}}],["hedera.service.ts",{"_index":217,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"coverage.html":{}}}],["hedera.service.ts:138",{"_index":256,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hedera.service.ts:178",{"_index":248,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hedera.service.ts:20",{"_index":230,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hedera.service.ts:216",{"_index":243,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hedera.service.ts:28",{"_index":250,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hedera.service.ts:32",{"_index":244,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hedera.service.ts:50",{"_index":246,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hedera.service.ts:66",{"_index":232,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hedera.service.ts:92",{"_index":239,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hederaservice",{"_index":1025,"title":{},"body":{"index.html":{}}}],["help",{"_index":994,"title":{},"body":{"index.html":{}}}],["here",{"_index":960,"title":{},"body":{"index.html":{}}}],["hidenft",{"_index":90,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["high",{"_index":978,"title":{},"body":{"index.html":{}}}],["hsuite",{"_index":125,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["hsuite/angular",{"_index":948,"title":{},"body":{"index.html":{}}}],["hsuite/smart",{"_index":929,"title":{},"body":{"index.html":{}}}],["hsuiteinfos",{"_index":304,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["hsuiteinfos.decimals).todecimalplaces(hsuiteinfos.decimals).tonumber",{"_index":309,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["http",{"_index":1013,"title":{},"body":{"index.html":{}}}],["http://localhost:3001",{"_index":410,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["http://localhost:3002",{"_index":411,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["http://localhost:3003",{"_index":412,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["http://localhost:3004",{"_index":413,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["https://mainnet",{"_index":381,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["https://testnet",{"_index":131,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["icon",{"_index":130,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["identical",{"_index":908,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":825,"title":{},"body":{"coverage.html":{}}}],["if(!authresponse",{"_index":654,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["if(activenodes.length",{"_index":462,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["if(auth.value",{"_index":453,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["if(authresponse.success",{"_index":202,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["if(event.type",{"_index":678,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["if(mainsocket",{"_index":629,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["if(node",{"_index":432,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["if(node.operator",{"_index":771,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["if(nodesocket.getnode().operator",{"_index":804,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["if(this.node.url",{"_index":476,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["if(type",{"_index":162,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["image",{"_index":301,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["import",{"_index":31,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["imports",{"_index":36,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{},"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"interfaces/Node.html":{},"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Node.html":{},"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["init",{"_index":728,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["init(currentnode",{"_index":739,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["initauth",{"_index":729,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["initauth(wallet",{"_index":743,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["initdata",{"_index":157,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["initdata.pairingstring",{"_index":160,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["initdata.savedpairings[0]?.accountids",{"_index":161,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["initialized",{"_index":603,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["initializing",{"_index":598,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["initmainsocket",{"_index":730,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["initmainsocket(currentnode",{"_index":745,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["initnodes",{"_index":731,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["initnodes(wallet",{"_index":747,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["inject",{"_index":257,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{}}}],["inject('network",{"_index":268,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["inject('node",{"_index":597,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["inject(object",{"_index":702,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["injectable",{"_index":39,"title":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{}}}],["injectables",{"_index":40,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{},"overview.html":{}}}],["inspiration",{"_index":875,"title":{},"body":{"index.html":{}}}],["install",{"_index":928,"title":{},"body":{"index.html":{}}}],["installation",{"_index":925,"title":{},"body":{"index.html":{}}}],["instance",{"_index":915,"title":{},"body":{"index.html":{}}}],["integrate",{"_index":866,"title":{},"body":{"index.html":{}}}],["interact",{"_index":865,"title":{},"body":{"index.html":{}}}],["interacting",{"_index":967,"title":{},"body":{"index.html":{}}}],["interaction",{"_index":955,"title":{},"body":{"index.html":{}}}],["interactions",{"_index":1007,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Node.html":{}},"body":{"interfaces/Node.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Node.html":{}}}],["interfaces/node.interface",{"_index":420,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["io",{"_index":701,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["itself",{"_index":976,"title":{},"body":{"index.html":{}}}],["json.parse(auth.value",{"_index":197,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["json.parse(hashconnectdata.value",{"_index":179,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["json.stringify(authresponse",{"_index":203,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["json.stringify(this.hashconnectdata",{"_index":143,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["keeping",{"_index":1020,"title":{},"body":{"index.html":{}}}],["key",{"_index":141,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["know",{"_index":890,"title":{},"body":{"index.html":{}}}],["launchpad",{"_index":968,"title":{},"body":{"index.html":{}}}],["launchpads",{"_index":521,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["layer",{"_index":996,"title":{},"body":{"index.html":{}}}],["level",{"_index":979,"title":{},"body":{"index.html":{}}}],["lib/utils/smart",{"_index":757,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["library",{"_index":861,"title":{},"body":{"index.html":{}}}],["limited",{"_index":302,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["links",{"_index":894,"title":{},"body":{"index.html":{}}}],["list",{"_index":446,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["listeners",{"_index":945,"title":{},"body":{"index.html":{}}}],["literal",{"_index":237,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"miscellaneous/variables.html":{}}}],["loadfees",{"_index":499,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["loadfees(fee",{"_index":519,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["loadhashconnectdata",{"_index":58,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["loading",{"_index":792,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["loadtokens",{"_index":500,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["local",{"_index":229,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["lodash",{"_index":118,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["lodash.first(this.hashconnectdata.accountids",{"_index":149,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["lodash.get(authsession.accountids",{"_index":760,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["lodash.get(hashconnectdata.accountids",{"_index":612,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["logic",{"_index":963,"title":{},"body":{"index.html":{}}}],["login",{"_index":959,"title":{},"body":{"index.html":{}}}],["login/logout",{"_index":638,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["login/logout/connection",{"_index":975,"title":{},"body":{"index.html":{}}}],["low",{"_index":1019,"title":{},"body":{"index.html":{}}}],["lower",{"_index":1003,"title":{},"body":{"index.html":{}}}],["main",{"_index":946,"title":{},"body":{"index.html":{}}}],["mainnet",{"_index":77,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["mainsocket",{"_index":623,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["mainsocket.getnode().operator",{"_index":630,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["makebytes",{"_index":223,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["makebytes(transaction",{"_index":245,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["makes",{"_index":880,"title":{},"body":{"index.html":{}}}],["manner",{"_index":903,"title":{},"body":{"index.html":{}}}],["map",{"_index":737,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["mapping",{"_index":815,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["matching",{"_index":17,"title":{},"body":{"interfaces/Node.html":{},"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":277,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["meant",{"_index":862,"title":{},"body":{"index.html":{}}}],["memo",{"_index":242,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["message",{"_index":613,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["messagetypes",{"_index":116,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["messagetypes.transaction",{"_index":185,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["metadata",{"_index":187,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["method",{"_index":673,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["methods",{"_index":50,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["miscellaneous",{"_index":1038,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":674,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["module",{"_index":18,"title":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{}},"body":{}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{},"modules.html":{},"overview.html":{}}}],["monitor",{"_index":617,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["more",{"_index":891,"title":{},"body":{"index.html":{}}}],["multisig",{"_index":523,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["name",{"_index":66,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["namespace",{"_index":697,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["need",{"_index":667,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["network",{"_index":47,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["network's",{"_index":921,"title":{},"body":{"index.html":{}}}],["network.foreach(node",{"_index":797,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["network.module",{"_index":487,"title":{},"body":{"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{}}}],["network.module.ts",{"_index":331,"title":{},"body":{"modules/SmartNodeNetworkModule.html":{}}}],["network.service",{"_index":332,"title":{},"body":{"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["network.service.ts",{"_index":333,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"coverage.html":{}}}],["network.service.ts:108",{"_index":349,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:11",{"_index":418,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:112",{"_index":361,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:116",{"_index":373,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:12",{"_index":417,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:14",{"_index":419,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:142",{"_index":360,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:15",{"_index":415,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:159",{"_index":359,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:163",{"_index":371,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:167",{"_index":364,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:181",{"_index":367,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:185",{"_index":378,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:189",{"_index":375,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:198",{"_index":369,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:209",{"_index":358,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:21",{"_index":414,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network.service.ts:220",{"_index":356,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["network/interfaces/node.interface",{"_index":759,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["network/smart",{"_index":486,"title":{},"body":{"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["networkservice",{"_index":1001,"title":{},"body":{"index.html":{}}}],["new",{"_index":100,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{}}}],["nft_exchange",{"_index":524,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["ngmodule",{"_index":32,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{},"index.html":{}}}],["ngx",{"_index":700,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["node",{"_index":1,"title":{"interfaces/Node.html":{}},"body":{"interfaces/Node.html":{},"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{},"index.html":{}}}],["node.node.operator",{"_index":814,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["node.online",{"_index":813,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["node.operator",{"_index":456,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["node.url",{"_index":703,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["node.url.replace('https",{"_index":704,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["node.url}/${data.image",{"_index":544,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["node/hsuite/holders",{"_index":535,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["node/hsuite/staking",{"_index":536,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["node/network",{"_index":448,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["node/utilities",{"_index":534,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["nodeaccountid",{"_index":270,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["nodeobservable",{"_index":334,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["nodeobserver",{"_index":335,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["nodes",{"_index":336,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["nodesocket",{"_index":773,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["nodesocket.connect",{"_index":808,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["nodesocket.getnode",{"_index":770,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["nodesocket.on(\"connect",{"_index":801,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["nodesocket.on(\"disconnect",{"_index":802,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["nodesonline",{"_index":720,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["nodessockets",{"_index":721,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["notification",{"_index":626,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["now",{"_index":784,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["npm",{"_index":926,"title":{},"body":{"index.html":{}}}],["null",{"_index":195,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["number",{"_index":255,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["object",{"_index":104,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["observable",{"_index":362,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["observehashpackconnection",{"_index":49,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["observer",{"_index":974,"title":{},"body":{"index.html":{}}}],["obtain",{"_index":906,"title":{},"body":{"index.html":{}}}],["offers",{"_index":1026,"title":{},"body":{"index.html":{}}}],["official",{"_index":893,"title":{},"body":{"index.html":{}}}],["one",{"_index":431,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["online",{"_index":800,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["open",{"_index":950,"title":{},"body":{"index.html":{}}}],["operator",{"_index":9,"title":{},"body":{"interfaces/Node.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["optional",{"_index":67,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["options",{"_index":708,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["order",{"_index":670,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["out",{"_index":27,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{},"index.html":{},"overview.html":{}}}],["override",{"_index":365,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["overview",{"_index":1033,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":841,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pairingdata",{"_index":134,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["pairingdata.accountids",{"_index":138,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["pairingdata.topic",{"_index":136,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["pairingstring",{"_index":106,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["parameters",{"_index":65,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["params",{"_index":353,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{}}}],["parsedhashconnectdata",{"_index":178,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["parsedhashconnectdata.accountids.length",{"_index":180,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["payload",{"_index":70,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["picking",{"_index":820,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["please",{"_index":791,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["post",{"_index":351,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["postapiendpoint",{"_index":344,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["postapiendpoint(endpoint",{"_index":368,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["power",{"_index":882,"title":{},"body":{"index.html":{}}}],["previewnet",{"_index":79,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["private",{"_index":42,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["project",{"_index":892,"title":{},"body":{"index.html":{}}}],["projects/.../test.ts",{"_index":1040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/sdk/src/lib/smart",{"_index":554,"title":{},"body":{"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"coverage.html":{}}}],["projects/sdk/src/lib/utils/smart",{"_index":690,"title":{},"body":{"injectables/SmartNodeSocket.html":{},"coverage.html":{}}}],["projects/sdk/src/services/hashpack/smart",{"_index":28,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"coverage.html":{}}}],["projects/sdk/src/services/hedera/smart",{"_index":210,"title":{},"body":{"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"coverage.html":{}}}],["projects/sdk/src/services/network/interfaces/node.interface.ts",{"_index":6,"title":{},"body":{"interfaces/Node.html":{},"coverage.html":{}}}],["projects/sdk/src/services/network/smart",{"_index":330,"title":{},"body":{"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"coverage.html":{}}}],["projects/sdk/src/services/rest/smart",{"_index":484,"title":{},"body":{"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"coverage.html":{}}}],["projects/sdk/src/services/sockets/smart",{"_index":717,"title":{},"body":{"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{}}}],["projects/sdk/src/test.ts",{"_index":834,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":74,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["promise(async",{"_index":153,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["promise(async(resolve",{"_index":192,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"interfaces/Node.html":{},"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{},"properties.html":{}}}],["proposaldocument",{"_index":253,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["proposaltransaction",{"_index":224,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["proposaltransaction(daotokenid",{"_index":247,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["provide",{"_index":863,"title":{},"body":{"index.html":{}}}],["provided",{"_index":909,"title":{},"body":{"index.html":{}}}],["providedin",{"_index":121,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["provider",{"_index":146,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["providers",{"_index":30,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{},"index.html":{}}}],["provides",{"_index":1002,"title":{},"body":{"index.html":{}}}],["providing",{"_index":1023,"title":{},"body":{"index.html":{}}}],["public",{"_index":48,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["publickey",{"_index":10,"title":{},"body":{"interfaces/Node.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["query",{"_index":711,"title":{},"body":{"injectables/SmartNodeSocket.html":{},"index.html":{}}}],["random",{"_index":274,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["re",{"_index":631,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["read",{"_index":1014,"title":{},"body":{"index.html":{}}}],["ready",{"_index":606,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["reasons",{"_index":786,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["receipt",{"_index":294,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["received",{"_index":625,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["referrer",{"_index":712,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["reject",{"_index":155,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["reject(error",{"_index":168,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["rejected",{"_index":958,"title":{},"body":{"index.html":{}}}],["related",{"_index":964,"title":{},"body":{"index.html":{}}}],["release",{"_index":870,"title":{},"body":{"index.html":{}}}],["request",{"_index":951,"title":{},"body":{"index.html":{}}}],["requested",{"_index":986,"title":{},"body":{"index.html":{}}}],["require",{"_index":838,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":1041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":474,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["reset",{"_index":26,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{},"overview.html":{}}}],["resolve",{"_index":154,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["resolve(\"all",{"_index":682,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["resolve(authresponse",{"_index":198,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["resolve(await",{"_index":442,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["resolve(false",{"_index":183,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["resolve(hashconnectresponse",{"_index":191,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["resolve(response",{"_index":472,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["resolve(response.data",{"_index":480,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["resolve(responsedata",{"_index":299,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["resolve(this.hashconnectdata",{"_index":182,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["resolve(this.hashconnectdata.pairingstring",{"_index":165,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["resolve(this.nodessockets",{"_index":810,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["resolve(transaction.tobytes",{"_index":286,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["resolve(true",{"_index":175,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["response",{"_index":291,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"index.html":{}}}],["response.foreach((data",{"_index":542,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["response.success",{"_index":295,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["responsedata",{"_index":293,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["responsedata.receipt",{"_index":296,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["rest.module",{"_index":215,"title":{},"body":{"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeSdkModule.html":{}}}],["rest.module.ts",{"_index":485,"title":{},"body":{"modules/SmartNodeRestModule.html":{}}}],["rest.service",{"_index":265,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeSdkService.html":{}}}],["rest.service.ts",{"_index":488,"title":{},"body":{"injectables/SmartNodeRestService.html":{},"coverage.html":{}}}],["rest.service.ts:100",{"_index":508,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:121",{"_index":506,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:13",{"_index":509,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:143",{"_index":526,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:168",{"_index":528,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:189",{"_index":517,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:210",{"_index":513,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:231",{"_index":515,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:30",{"_index":504,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:52",{"_index":518,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:68",{"_index":510,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:7",{"_index":502,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest.service.ts:84",{"_index":511,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["rest/smart",{"_index":214,"title":{},"body":{"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{}}}],["restservice",{"_index":1012,"title":{},"body":{"index.html":{}}}],["results",{"_index":16,"title":{},"body":{"interfaces/Node.html":{},"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":152,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["returns",{"_index":73,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["returntransaction",{"_index":88,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{}}}],["right",{"_index":868,"title":{},"body":{"index.html":{}}}],["root",{"_index":122,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["run",{"_index":883,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":117,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"dependencies.html":{}}}],["safely",{"_index":671,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["same",{"_index":907,"title":{},"body":{"index.html":{}}}],["sdk",{"_index":859,"title":{},"body":{"index.html":{}}}],["sdk.module",{"_index":938,"title":{},"body":{"index.html":{}}}],["sdk.module.ts",{"_index":555,"title":{},"body":{"modules/SmartNodeSdkModule.html":{}}}],["sdk.service",{"_index":563,"title":{},"body":{"modules/SmartNodeSdkModule.html":{}}}],["sdk.service.ts",{"_index":564,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"coverage.html":{}}}],["sdk.service.ts:14",{"_index":596,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:15",{"_index":595,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:151",{"_index":580,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:16",{"_index":578,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:167",{"_index":584,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:171",{"_index":582,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:175",{"_index":585,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:179",{"_index":586,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:183",{"_index":583,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:86",{"_index":581,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:90",{"_index":591,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:94",{"_index":593,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdk.service.ts:98",{"_index":588,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sdkhow",{"_index":933,"title":{},"body":{"index.html":{}}}],["sdkinstead",{"_index":930,"title":{},"body":{"index.html":{}}}],["secure",{"_index":633,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["security",{"_index":785,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["senderid",{"_index":235,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["sendmessagetosmartnodes",{"_index":732,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sendmessagetosmartnodes(payload",{"_index":749,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sendtransaction",{"_index":59,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["sendtransaction(transaction",{"_index":86,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["serversigningaccount",{"_index":657,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["service",{"_index":620,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["services",{"_index":977,"title":{},"body":{"index.html":{}}}],["services/hashpack/smart",{"_index":556,"title":{},"body":{"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{}}}],["services/hedera/smart",{"_index":557,"title":{},"body":{"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{}}}],["services/network/smart",{"_index":559,"title":{},"body":{"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{}}}],["services/rest/smart",{"_index":560,"title":{},"body":{"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{}}}],["services/sockets/smart",{"_index":561,"title":{},"body":{"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{}}}],["session",{"_index":635,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["setaccountid(accountid",{"_index":288,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["setcurrentnode",{"_index":345,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["setcurrentnode(node",{"_index":370,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["setnetwork",{"_index":346,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["setnetwork(network",{"_index":372,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["setnodeaccountids([this.getrandomnodefornetwork",{"_index":284,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["setnodefromactivenodes",{"_index":347,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["setnodefromactivenodes(activenodes",{"_index":374,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["setting",{"_index":429,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["settokenids(tokenids",{"_index":287,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["settransactionmemo(`${daotokenid",{"_index":320,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["settransactionmemo(`${daotokenid}/${daodocument.limited.councilnftid",{"_index":316,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["settransactionmemo(`${daotokenid}/${proposaldocument.consensus_timestamp}/${proposaldocument.type}/${votedoption",{"_index":319,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["settransactionmemo(memo",{"_index":325,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["setup",{"_index":425,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"index.html":{}}}],["setutilities",{"_index":225,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["setutilities(utilities",{"_index":249,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["shall",{"_index":927,"title":{},"body":{"index.html":{}}}],["show",{"_index":952,"title":{},"body":{"index.html":{}}}],["shufflenode",{"_index":348,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["shufflenode(override",{"_index":377,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["sign",{"_index":987,"title":{},"body":{"index.html":{}}}],["signature",{"_index":69,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["signature.serversigningaccount",{"_index":200,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["signature.signature",{"_index":201,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["signed",{"_index":957,"title":{},"body":{"index.html":{}}}],["signeddata",{"_index":655,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{}}}],["signer",{"_index":150,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["single",{"_index":901,"title":{},"body":{"index.html":{}}}],["smart",{"_index":34,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"index.html":{}}}],["smartnode",{"_index":999,"title":{},"body":{"index.html":{}}}],["smartnodehashpackmodule",{"_index":19,"title":{"modules/SmartNodeHashPackModule.html":{}},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules.html":{},"overview.html":{}}}],["smartnodehashpackservice",{"_index":24,"title":{"injectables/SmartNodeHashPackService.html":{}},"body":{"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeSdkService.html":{},"coverage.html":{},"overview.html":{}}}],["smartnodehederamodule",{"_index":204,"title":{"modules/SmartNodeHederaModule.html":{}},"body":{"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules.html":{},"overview.html":{}}}],["smartnodehederaservice",{"_index":209,"title":{"injectables/SmartNodeHederaService.html":{}},"body":{"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeSdkService.html":{},"coverage.html":{},"overview.html":{}}}],["smartnodenetworkmodule",{"_index":326,"title":{"modules/SmartNodeNetworkModule.html":{}},"body":{"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{},"modules.html":{},"overview.html":{}}}],["smartnodenetworkservice",{"_index":329,"title":{"injectables/SmartNodeNetworkService.html":{}},"body":{"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{},"overview.html":{}}}],["smartnoderestmodule",{"_index":208,"title":{"modules/SmartNodeRestModule.html":{}},"body":{"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules.html":{},"overview.html":{}}}],["smartnoderestservice",{"_index":228,"title":{"injectables/SmartNodeRestService.html":{}},"body":{"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"coverage.html":{},"overview.html":{}}}],["smartnodesdkmodule",{"_index":548,"title":{"modules/SmartNodeSdkModule.html":{}},"body":{"modules/SmartNodeSdkModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["smartnodesdkservice",{"_index":553,"title":{"injectables/SmartNodeSdkService.html":{}},"body":{"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["smartnodesocket",{"_index":689,"title":{"injectables/SmartNodeSocket.html":{}},"body":{"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{}}}],["smartnodesocket(node",{"_index":798,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["smartnodesocketsmodule",{"_index":552,"title":{"modules/SmartNodeSocketsModule.html":{}},"body":{"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{},"modules.html":{},"overview.html":{}}}],["smartnodesocketsservice",{"_index":62,"title":{"injectables/SmartNodeSocketsService.html":{}},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{},"overview.html":{}}}],["sn1.hbarsuite.network",{"_index":382,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["sn1.hbarsuite.network/public/logos/rounded_logo.png",{"_index":132,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["sn2.hbarsuite.network",{"_index":385,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["sn3.hbarsuite.network",{"_index":388,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["sn4.hbarsuite.network",{"_index":391,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["sn5.hbarsuite.network",{"_index":392,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["sn6.hbarsuite.network",{"_index":395,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["sn7.hbarsuite.network",{"_index":398,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["sn8.hbarsuite.network",{"_index":401,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["socials",{"_index":898,"title":{},"body":{"index.html":{}}}],["socket",{"_index":694,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["socket.class",{"_index":758,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["socket.class.ts",{"_index":692,"title":{},"body":{"injectables/SmartNodeSocket.html":{},"coverage.html":{}}}],["socket.class.ts:30",{"_index":699,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["socket.class.ts:6",{"_index":698,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["socket.disconnect",{"_index":795,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["socket/smart",{"_index":691,"title":{},"body":{"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{}}}],["socketobservable",{"_index":722,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["socketobserver",{"_index":723,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets",{"_index":683,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["sockets.module",{"_index":562,"title":{},"body":{"modules/SmartNodeSdkModule.html":{}}}],["sockets.module.ts",{"_index":718,"title":{},"body":{"modules/SmartNodeSocketsModule.html":{}}}],["sockets.service",{"_index":120,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{},"modules/SmartNodeSocketsModule.html":{}}}],["sockets.service.ts",{"_index":719,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{},"coverage.html":{}}}],["sockets.service.ts:12",{"_index":753,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:13",{"_index":752,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:138",{"_index":748,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:15",{"_index":756,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:16",{"_index":755,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:18",{"_index":733,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:188",{"_index":751,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:24",{"_index":741,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:39",{"_index":735,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:43",{"_index":738,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:47",{"_index":736,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:51",{"_index":750,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:55",{"_index":734,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:60",{"_index":746,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets.service.ts:72",{"_index":744,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["sockets/smart",{"_index":119,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["socketservice",{"_index":1016,"title":{},"body":{"index.html":{}}}],["something",{"_index":983,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Node.html":{},"modules/SmartNodeHashPackModule.html":{},"injectables/SmartNodeHashPackService.html":{},"modules/SmartNodeHederaModule.html":{},"injectables/SmartNodeHederaService.html":{},"modules/SmartNodeNetworkModule.html":{},"injectables/SmartNodeNetworkService.html":{},"modules/SmartNodeRestModule.html":{},"injectables/SmartNodeRestService.html":{},"modules/SmartNodeSdkModule.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"modules/SmartNodeSocketsModule.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["spec\\.ts",{"_index":1042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spinner",{"_index":953,"title":{},"body":{"index.html":{}}}],["src/app/services/src/lib/smart",{"_index":937,"title":{},"body":{"index.html":{}}}],["started",{"_index":857,"title":{"index.html":{}},"body":{}}],["statements",{"_index":826,"title":{},"body":{"coverage.html":{}}}],["storage",{"_index":113,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{}}}],["storage.get",{"_index":176,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["storage.get({key",{"_index":452,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["storage.remove",{"_index":173,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["storage.set",{"_index":140,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["string",{"_index":12,"title":{},"body":{"interfaces/Node.html":{},"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["subject",{"_index":101,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["subscribing",{"_index":616,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["success",{"_index":783,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["super",{"_index":707,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["support",{"_index":1030,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1031,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":911,"title":{},"body":{"index.html":{}}}],["switch(event.event",{"_index":644,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["switch(event.method",{"_index":652,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["switch(this.network",{"_index":271,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["switch(type",{"_index":477,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["switches",{"_index":621,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["table",{"_index":840,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":839,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":874,"title":{},"body":{"index.html":{}}}],["technology",{"_index":879,"title":{},"body":{"index.html":{}}}],["testnet",{"_index":78,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["this._initsockets(hashconnectdata",{"_index":614,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.appmetadata",{"_index":124,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.callapiendpoint('get",{"_index":473,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.callapiendpoint('post",{"_index":471,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.dataobserver.asobservable",{"_index":111,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.dataobserver.next(this.hashconnectdata",{"_index":144,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.eventsobservable",{"_index":650,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.eventsobserver.asobservable",{"_index":594,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.eventsobserver.next",{"_index":664,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.eventsobserver.next(event",{"_index":651,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.getapiendpoint('smart",{"_index":447,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.getnetwork",{"_index":440,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.getrandomnode(override",{"_index":461,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.getspecificnode(number(node",{"_index":435,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.handleauthevent(event.content",{"_index":645,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.handleerrors(event.content",{"_index":648,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.handlegenericevents(event.content",{"_index":646,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.hashconnect",{"_index":123,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnect.authenticate",{"_index":199,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnect.clearconnectionsanddata",{"_index":172,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnect.connecttolocalwallet",{"_index":164,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnect.disconnect(this.hashconnectdata.topic",{"_index":169,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnect.getprovider",{"_index":147,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnect.getsigner(provider",{"_index":151,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnect.init(this.appmetadata",{"_index":158,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnect.pairingevent.on(async",{"_index":133,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnect.sendtransaction",{"_index":190,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnectdata",{"_index":159,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnectdata.accountids",{"_index":137,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashconnectdata.topic",{"_index":135,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.hashpackwallet",{"_index":611,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.initauth(wallet",{"_index":762,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.initmainsocket(currentnode",{"_index":774,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.initnodes(wallet",{"_index":761,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.mainsocket",{"_index":763,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.mainsocket.connect",{"_index":768,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.mainsocket.disconnect",{"_index":767,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.mainsocket.emit(topic",{"_index":766,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.mainsocket.fromevent('authenticate').subscribe(async",{"_index":779,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.mainsocket.fromevent('authentication').subscribe(async",{"_index":790,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.mainsocket.fromevent('errors').subscribe(async(message",{"_index":778,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.mainsocket.fromevent('events').subscribe((message",{"_index":775,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.mainsocket.getnode().operator",{"_index":782,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.makebytes(transaction",{"_index":290,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["this.network",{"_index":148,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["this.network[network",{"_index":428,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.node",{"_index":434,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocket.html":{}}}],["this.node).then(async",{"_index":601,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.nodeobservable",{"_index":422,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.nodeobserver.asobservable",{"_index":416,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.nodeobserver.next(this.node",{"_index":465,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.nodes",{"_index":427,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.nodes.find(node",{"_index":455,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.nodes.length",{"_index":459,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.nodes[index",{"_index":460,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.nodes[math.floor(math.random",{"_index":458,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.nodesonline",{"_index":765,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.nodesonline.set(nodesocket.getnode().url",{"_index":799,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.nodessockets",{"_index":796,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.nodessockets.foreach(nodesocket",{"_index":769,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.nodessockets.foreach(socket",{"_index":794,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.nodessockets.length",{"_index":793,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.nodessockets.push(nodesocket",{"_index":809,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.setnetwork(network",{"_index":443,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.setnodefromactivenodes",{"_index":807,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.shufflenode(override",{"_index":433,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["this.smartnodehashpackservice",{"_index":685,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodehashpackservice.authenticatewallet",{"_index":659,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodehashpackservice.clearauthsession",{"_index":679,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodehashpackservice.getauthsession",{"_index":653,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodehashpackservice.loadhashconnectdata",{"_index":610,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodehashpackservice.observehashpackconnection.subscribe(async",{"_index":640,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodehashpackservice.sendtransaction(transbytes",{"_index":292,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["this.smartnodehederaservice",{"_index":688,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodehederaservice.setutilities(utilities",{"_index":609,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodenetworkservice",{"_index":684,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodenetworkservice.getapiendpoint",{"_index":537,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["this.smartnodenetworkservice.getapiendpoint(`games/coin/flip",{"_index":532,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["this.smartnodenetworkservice.getapiendpoint(`games/token",{"_index":530,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["this.smartnodenetworkservice.getapiendpoint(`smart",{"_index":533,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["this.smartnodenetworkservice.getapiendpoint(`tokens/list",{"_index":541,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["this.smartnodenetworkservice.getcurrentnode",{"_index":531,"title":{},"body":{"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodenetworkservice.getnetwork()).data",{"_index":681,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodenetworkservice.getnodeobserver().subscribe(async",{"_index":622,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodenetworkservice.setnetwork(this.network",{"_index":600,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodenetworkservice.setnodefromactivenodes(network",{"_index":822,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.smartnoderestservice",{"_index":686,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnoderestservice.gettokeninfos(this.utilities.hsuite.id)).data",{"_index":305,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["this.smartnoderestservice.getutilities()).data",{"_index":608,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnoderestservice.loadfees('nft_exchange')).data",{"_index":321,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["this.smartnodesdkservice.geteventsobserver().subscribe(async(event",{"_index":949,"title":{},"body":{"index.html":{}}}],["this.smartnodesdkservice.gethashpackservice().observehashpackconnection.subscribe(async(saveddata",{"_index":973,"title":{},"body":{"index.html":{}}}],["this.smartnodesocketsservice",{"_index":687,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodesocketsservice.authorizewallet",{"_index":637,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodesocketsservice.getmainsocket",{"_index":624,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodesocketsservice.getmainsocket().emit('authenticate",{"_index":663,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodesocketsservice.getsocketobserver().subscribe(async(event",{"_index":643,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodesocketsservice.init",{"_index":680,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.smartnodesocketsservice.initauth(this.hashpackwallet",{"_index":636,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["this.socketobservable",{"_index":764,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.socketobserver.asobservable",{"_index":754,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.socketobserver.next",{"_index":776,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["this.utilities",{"_index":269,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["this.utilities.vehsuite.treasury",{"_index":318,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["those",{"_index":918,"title":{},"body":{"index.html":{}}}],["throw",{"_index":466,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["time",{"_index":787,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["times(10",{"_index":308,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["title",{"_index":665,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["tokenassociatetransaction",{"_index":260,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["tokenid",{"_index":300,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeRestService.html":{}}}],["tokenids",{"_index":233,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["tokens",{"_index":520,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["tokens/chain",{"_index":547,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["tokens/info",{"_index":545,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["topic",{"_index":105,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["track",{"_index":1021,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":94,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"index.html":{}}}],["transaction.freeze",{"_index":285,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["transaction.settransactionid(transactionid",{"_index":283,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["transactionhashpack",{"_index":184,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{}}}],["transactionid",{"_index":261,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeRestService.html":{}}}],["transactionid.generate(accountid",{"_index":282,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["transactionreceipt",{"_index":262,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["transactionreceipt.frombytes(response.receipt",{"_index":297,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["transbytes",{"_index":289,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["transfertransaction",{"_index":263,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["transport",{"_index":805,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["transports",{"_index":709,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["trials",{"_index":355,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["triggered",{"_index":998,"title":{},"body":{"index.html":{}}}],["true",{"_index":95,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":156,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["tslib",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["twitter",{"_index":899,"title":{},"body":{"index.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/Node.html":{},"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeRestService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ui",{"_index":954,"title":{},"body":{"index.html":{}}}],["uint8array",{"_index":298,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["uint8array(event.data.authresponse.signeddata.signature",{"_index":656,"title":{},"body":{"injectables/SmartNodeSdkService.html":{}}}],["under",{"_index":914,"title":{},"body":{"index.html":{}}}],["underlying",{"_index":995,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":97,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{}}}],["unless",{"_index":981,"title":{},"body":{"index.html":{}}}],["up",{"_index":821,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["update",{"_index":438,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["updating",{"_index":818,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["url",{"_index":11,"title":{},"body":{"interfaces/Node.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocket.html":{}}}],["urls",{"_index":919,"title":{},"body":{"index.html":{}}}],["use",{"_index":430,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"index.html":{}}}],["used",{"_index":607,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["user",{"_index":956,"title":{},"body":{"index.html":{}}}],["uses",{"_index":881,"title":{},"body":{"index.html":{}}}],["usevalue",{"_index":941,"title":{},"body":{"index.html":{}}}],["utilities",{"_index":218,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["validating",{"_index":985,"title":{},"body":{"index.html":{}}}],["validators",{"_index":988,"title":{},"body":{"index.html":{}}}],["value",{"_index":93,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":835,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1039,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vehsuitereward",{"_index":306,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["version",{"_index":1036,"title":{},"body":{"properties.html":{}}}],["very",{"_index":423,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{},"index.html":{}}}],["void",{"_index":251,"title":{},"body":{"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeNetworkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["votedoption",{"_index":254,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["votetransaction",{"_index":226,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["votetransaction(daotokenid",{"_index":252,"title":{},"body":{"injectables/SmartNodeHederaService.html":{}}}],["wallet",{"_index":669,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocket.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["walletid",{"_index":72,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeSdkService.html":{}}}],["wallets/balance",{"_index":539,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["wallets/info",{"_index":538,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["wallets/nfts",{"_index":546,"title":{},"body":{"injectables/SmartNodeRestService.html":{}}}],["want",{"_index":889,"title":{},"body":{"index.html":{}}}],["warning",{"_index":675,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"injectables/SmartNodeSocketsService.html":{}}}],["way",{"_index":992,"title":{},"body":{"index.html":{}}}],["website",{"_index":895,"title":{},"body":{"index.html":{}}}],["websocket",{"_index":710,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["websockets",{"_index":641,"title":{},"body":{"injectables/SmartNodeSdkService.html":{},"index.html":{}}}],["welcome",{"_index":860,"title":{},"body":{"index.html":{}}}],["well",{"_index":912,"title":{},"body":{"index.html":{}}}],["what's",{"_index":878,"title":{},"body":{"index.html":{}}}],["whitelistednetwork",{"_index":439,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["whitelistednetwork.data",{"_index":441,"title":{},"body":{"injectables/SmartNodeNetworkService.html":{}}}],["wish",{"_index":935,"title":{},"body":{"index.html":{}}}],["work",{"_index":936,"title":{},"body":{"index.html":{}}}],["wrapping",{"_index":1006,"title":{},"body":{"index.html":{}}}],["ws://')}/${namespace",{"_index":706,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["wss://').replace('http",{"_index":705,"title":{},"body":{"injectables/SmartNodeSocket.html":{}}}],["x.node",{"_index":817,"title":{},"body":{"injectables/SmartNodeSocketsService.html":{}}}],["yarn",{"_index":931,"title":{},"body":{"index.html":{}}}],["yes",{"_index":81,"title":{},"body":{"injectables/SmartNodeHashPackService.html":{},"injectables/SmartNodeHederaService.html":{},"injectables/SmartNodeRestService.html":{}}}],["you're",{"_index":966,"title":{},"body":{"index.html":{}}}],["zone.js",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":25,"title":{},"body":{"modules/SmartNodeHashPackModule.html":{},"modules/SmartNodeHederaModule.html":{},"modules/SmartNodeNetworkModule.html":{},"modules/SmartNodeRestModule.html":{},"modules/SmartNodeSdkModule.html":{},"modules/SmartNodeSocketsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Node.html":{"url":"interfaces/Node.html","title":"interface - Node","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Node\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/sdk/src/services/network/interfaces/node.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            operator\n                                        \n                                \n                                \n                                        \n                                            publicKey\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        operator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operator:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publicKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Node {\n  operator: string,\n  publicKey: string,\n  url: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SmartNodeHashPackModule.html":{"url":"modules/SmartNodeHashPackModule.html","title":"module - SmartNodeHashPackModule","body":"\n                   \n\n\n\n\n    Modules\n    SmartNodeHashPackModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SmartNodeHashPackModule\n\n\n\ncluster_SmartNodeHashPackModule_providers\n\n\n\n\nSmartNodeHashPackService\n\nSmartNodeHashPackService\n\n\n\nSmartNodeHashPackModule\n\nSmartNodeHashPackModule\n\nSmartNodeHashPackModule -->\n\nSmartNodeHashPackService->SmartNodeHashPackModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/sdk/src/services/hashpack/smart-node-hashpack.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SmartNodeHashPackService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SmartNodeHashPackService } from './smart-node-hashpack.service';\n\n@NgModule({\n  imports: [],\n  providers: [\n    SmartNodeHashPackService\n  ],\n  exports: [],\n})\nexport class SmartNodeHashPackModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SmartNodeHashPackService.html":{"url":"injectables/SmartNodeHashPackService.html","title":"injectable - SmartNodeHashPackService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SmartNodeHashPackService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                appMetadata\n                            \n                            \n                                    Private\n                                dataObserver\n                            \n                            \n                                    Private\n                                hashconnect\n                            \n                            \n                                    Private\n                                hashconnectData\n                            \n                            \n                                    Private\n                                network\n                            \n                            \n                                    Public\n                                observeHashpackConnection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticateWallet\n                            \n                            \n                                    Public\n                                    Async\n                                clearAuthSession\n                            \n                            \n                                    Public\n                                    Async\n                                connect\n                            \n                            \n                                    Public\n                                    Async\n                                disconnect\n                            \n                            \n                                    Public\n                                    Async\n                                getAuthSession\n                            \n                            \n                                    Public\n                                getSigner\n                            \n                            \n                                    Public\n                                    Async\n                                loadHashconnectData\n                            \n                            \n                                    Public\n                                    Async\n                                sendTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(smartNodeSocketsService: SmartNodeSocketsService)\n                    \n                \n                        \n                            \n                                Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        smartNodeSocketsService\n                                                  \n                                                        \n                                                                        SmartNodeSocketsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        authenticateWallet\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticateWallet(walletId: string, signature: any, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    walletId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signature\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        clearAuthSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearAuthSession()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        connect\n                        \n                    \n                \n            \n            \n                \n                    \n                    connect(network: \"mainnet\" | \"testnet\" | \"previewnet\", type?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    network\n                                    \n                                            \"mainnet\" | \"testnet\" | \"previewnet\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        disconnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    disconnect()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAuthSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthSession()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getSigner\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSigner()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        loadHashconnectData\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadHashconnectData()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendTransaction(transaction: any, accountId: string, returnTransaction: boolean, hideNft: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    transaction\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    returnTransaction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                                \n                                    hideNft\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        appMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HashConnectTypes.AppMetadata\n\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dataObserver\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hashconnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HashConnect\n\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hashconnectData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    topic: '',\n    pairingString: '',\n    accountIds: new Array()\n  }\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        observeHashpackConnection\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.dataObserver.asObservable()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Storage } from '@capacitor/storage';\nimport { HashConnect, HashConnectTypes, MessageTypes } from 'hashconnect';\nimport { Subject } from 'rxjs';\nimport * as lodash from 'lodash';\nimport { SmartNodeSocketsService } from '../sockets/smart-node-sockets.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SmartNodeHashPackService {\n  private hashconnect: HashConnect;\n  private appMetadata: HashConnectTypes.AppMetadata;\n\n  private dataObserver = new Subject();\n  public observeHashpackConnection = this.dataObserver.asObservable();\n\n  private network: string;\n  private hashconnectData = {\n    topic: '',\n    pairingString: '',\n    accountIds: new Array()\n  }\n\n  constructor(\n    private smartNodeSocketsService: SmartNodeSocketsService\n  ) {\n    this.hashconnect = new HashConnect();\n\n    this.appMetadata = {\n      name: \"HSuite Finance\",\n      description: \"Enhanching the Hedera Network\",\n      icon: \"https://testnet-sn1.hbarsuite.network/public/logos/rounded_logo.png\"\n    };\n\n    this.hashconnect.pairingEvent.on(async (pairingData) => {\n      this.hashconnectData.topic = pairingData.topic;\n      this.hashconnectData.accountIds = pairingData.accountIds;\n\n      await Storage.set({\n        key: 'hashconnect.data',\n        value: JSON.stringify(this.hashconnectData),\n      });      \n\n      this.dataObserver.next(this.hashconnectData);\n    });\n  }\n\n  public getSigner(): any {\n    const provider = this.hashconnect.getProvider(\n      this.network, \n      this.hashconnectData.topic,\n      lodash.first(this.hashconnectData.accountIds)\n    );\n\n    const signer = this.hashconnect.getSigner(provider);\n    return signer;\n  }\n\n  public async connect(network: 'mainnet' | 'testnet' | 'previewnet', type?: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        this.network = network;\n        let initData = await this.hashconnect.init(this.appMetadata, network, true);\n\n        this.hashconnectData = {\n          topic: initData.pairingString,\n          pairingString: initData.pairingString,\n          accountIds: initData.savedPairings[0]?.accountIds\n        }\n\n        if(type == 'hashpack') {\n          this.hashconnect.connectToLocalWallet();\n        }\n\n        resolve(this.hashconnectData.pairingString);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  public async disconnect(): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        try {\n          await this.hashconnect.disconnect(this.hashconnectData.topic);          \n        } catch(error) {\n          console.error(error);\n        }\n\n        this.hashconnect.clearConnectionsAndData();\n\n        await Storage.remove({ key: 'hashconnect.data' });\n        await Storage.remove({ key: 'hashconnect.auth' });\n\n        this.hashconnectData = {\n          topic: '',\n          pairingString: '',\n          accountIds: new Array()\n        }\n\n        this.dataObserver.next(this.hashconnectData);\n        resolve(true);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  public async loadHashconnectData(): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let hashconnectData = await Storage.get({ key: 'hashconnect.data' });\n\n        if (hashconnectData.value) {\n          let parsedHashconnectData = JSON.parse(hashconnectData.value);\n\n          if (parsedHashconnectData.accountIds.length > 0) {\n            this.hashconnectData = parsedHashconnectData;\n            resolve(this.hashconnectData);\n          } else {\n            resolve(false);\n          }\n        } else {\n          resolve(false);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  public async sendTransaction(transaction: any, accountId: string, returnTransaction: boolean = true, hideNft: boolean = false) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const transactionHashPack: MessageTypes.Transaction = {\n          topic: this.hashconnectData.topic,\n          byteArray: transaction,\n\n          metadata: {\n            accountToSign: accountId,\n            returnTransaction: returnTransaction,\n            hideNft: hideNft\n          }\n        };\n\n        let hashconnectResponse = await this.hashconnect.sendTransaction(\n          this.hashconnectData.topic,\n          transactionHashPack\n        );\n\n        resolve(hashconnectResponse);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  public async clearAuthSession(): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        await Storage.remove({ key: 'hashconnect.auth' });\n        resolve(true);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  public async getAuthSession(): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let auth = await Storage.get({\n          key: 'hashconnect.auth'\n        });\n\n        let authResponse = null;\n\n        if (auth.value) {\n          authResponse = JSON.parse(auth.value);\n        }\n\n        resolve(authResponse);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  public async authenticateWallet(walletId: string, signature: any, payload: any): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let authResponse = await this.hashconnect.authenticate(\n          this.hashconnectData.topic,\n          walletId,\n          signature.serverSigningAccount,\n          signature.signature,\n          payload);\n\n        if(authResponse.success) {\n          await Storage.set({\n            key: 'hashconnect.auth',\n            value: JSON.stringify(authResponse),\n          });\n        }\n\n        resolve(authResponse);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SmartNodeHederaModule.html":{"url":"modules/SmartNodeHederaModule.html","title":"module - SmartNodeHederaModule","body":"\n                   \n\n\n\n\n    Modules\n    SmartNodeHederaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SmartNodeHederaModule\n\n\n\ncluster_SmartNodeHederaModule_imports\n\n\n\ncluster_SmartNodeHederaModule_providers\n\n\n\n\nSmartNodeHashPackModule\n\nSmartNodeHashPackModule\n\n\n\nSmartNodeHederaModule\n\nSmartNodeHederaModule\n\nSmartNodeHederaModule -->\n\nSmartNodeHashPackModule->SmartNodeHederaModule\n\n\n\n\n\nSmartNodeRestModule\n\nSmartNodeRestModule\n\nSmartNodeHederaModule -->\n\nSmartNodeRestModule->SmartNodeHederaModule\n\n\n\n\n\nSmartNodeHederaService\n\nSmartNodeHederaService\n\nSmartNodeHederaModule -->\n\nSmartNodeHederaService->SmartNodeHederaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/sdk/src/services/hedera/smart-node-hedera.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SmartNodeHederaService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SmartNodeHashPackModule\n                        \n                        \n                            SmartNodeRestModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SmartNodeHashPackModule } from '../hashpack/smart-node-hashpack.module';\nimport { SmartNodeRestModule } from '../rest/smart-node-rest.module';\nimport { SmartNodeHederaService } from './smart-node-hedera.service';\n\n@NgModule({\n  imports: [\n    SmartNodeHashPackModule,\n    SmartNodeRestModule\n  ],\n  providers: [\n    SmartNodeHederaService\n  ],\n  exports: [],\n})\nexport class SmartNodeHederaModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SmartNodeHederaService.html":{"url":"injectables/SmartNodeHederaService.html","title":"injectable - SmartNodeHederaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SmartNodeHederaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/sdk/src/services/hedera/smart-node-hedera.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                utilities\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                associateToken\n                            \n                            \n                                    Public\n                                    Async\n                                createDaoTransaction\n                            \n                            \n                                    Public\n                                    Async\n                                createNftPoolTransaction\n                            \n                            \n                                getRandomNodeForNetwork\n                            \n                            \n                                    Public\n                                    Async\n                                makeBytes\n                            \n                            \n                                    Public\n                                    Async\n                                proposalTransaction\n                            \n                            \n                                setUtilities\n                            \n                            \n                                    Public\n                                    Async\n                                voteTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(smartNodeHashPackService: SmartNodeHashPackService, smartNodeRestService: SmartNodeRestService, network: \"mainnet\" | \"testnet\" | \"local\")\n                    \n                \n                        \n                            \n                                Defined in projects/sdk/src/services/hedera/smart-node-hedera.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        smartNodeHashPackService\n                                                  \n                                                        \n                                                                        SmartNodeHashPackService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        smartNodeRestService\n                                                  \n                                                        \n                                                                        SmartNodeRestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        network\n                                                  \n                                                        \n                                                                    \"mainnet\" | \"testnet\" | \"local\"\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        associateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    associateToken(tokenIds: Array, accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hedera/smart-node-hedera.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenIds\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createDaoTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    createDaoTransaction(daoTokenId: string, senderId: string, daoDocument: literal type, fees: any, returnTransaction?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hedera/smart-node-hedera.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    daoTokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    daoDocument\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fees\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    returnTransaction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createNftPoolTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    createNftPoolTransaction(senderId: string, memo: string, returnTransaction?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hedera/smart-node-hedera.service.ts:216\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    returnTransaction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRandomNodeForNetwork\n                        \n                    \n                \n            \n            \n                \ngetRandomNodeForNetwork()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hedera/smart-node-hedera.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     AccountId\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        makeBytes\n                        \n                    \n                \n            \n            \n                \n                    \n                    makeBytes(transaction: Transaction, accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hedera/smart-node-hedera.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transaction\n                                    \n                                            Transaction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        proposalTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    proposalTransaction(daoTokenId: string, senderId: string, fees: any, returnTransaction?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hedera/smart-node-hedera.service.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    daoTokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fees\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    returnTransaction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUtilities\n                        \n                    \n                \n            \n            \n                \nsetUtilities(utilities: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hedera/smart-node-hedera.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    utilities\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        voteTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteTransaction(daoTokenId: string, proposalDocument: any, votedOption: number, senderId: string, fees: any, returnTransaction?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/hedera/smart-node-hedera.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    daoTokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    proposalDocument\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    votedOption\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fees\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    returnTransaction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        utilities\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/hedera/smart-node-hedera.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@angular/core';\nimport { \n  AccountId, \n  Hbar, \n  HbarUnit, \n  TokenAssociateTransaction, \n  Transaction, \n  TransactionId, \n  TransactionReceipt, \n  TransferTransaction \n} from '@hashgraph/sdk';\nimport { SmartNodeHashPackService } from '../hashpack/smart-node-hashpack.service';\nimport { SmartNodeRestService } from '../rest/smart-node-rest.service';\nimport Decimal from 'decimal.js';\n\n@Injectable({\n  providedIn: 'root'\n})  \nexport class SmartNodeHederaService {\n  utilities: any;\n\n  constructor(\n    private smartNodeHashPackService: SmartNodeHashPackService,\n    private smartNodeRestService: SmartNodeRestService,\n    @Inject('network') private network: 'mainnet' | 'testnet' | 'local'\n  ) {}\n\n  setUtilities(utilities: any): void {\n    this.utilities = utilities;\n  }\n\n  getRandomNodeForNetwork(): AccountId {\n    let nodeAccountId = 0;\n\n    switch(this.network) {\n      case 'mainnet':\n        // generating random number from 3 to 28...\n        nodeAccountId = Math.floor(Math.random() * (28 - 3 + 1) + 3);\n        break;\n      case 'testnet':\n      case 'local':\n        // generating random number from 3 to 9...\n        nodeAccountId = Math.floor(Math.random() * (9 - 3 + 1) + 3);\n        break;\n    }\n\n    return new AccountId(nodeAccountId);\n  }\n\n  public async makeBytes(transaction: Transaction, accountId: string) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let transactionId = TransactionId.generate(accountId);\n\n        transaction.setTransactionId(transactionId)\n        .setNodeAccountIds([this.getRandomNodeForNetwork()]);\n\n        await transaction.freeze();\n        resolve(transaction.toBytes());\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  public async associateToken(tokenIds: Array, accountId: string) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let transaction = await new TokenAssociateTransaction()\n          .setTokenIds(tokenIds)\n          .setAccountId(accountId);\n\n        let transBytes = await this.makeBytes(transaction, accountId);\n        let response: any = await this.smartNodeHashPackService.sendTransaction(transBytes, accountId, false);\n\n        let responseData: any = {\n          response: response,\n          receipt: null\n        }\n\n        if (response.success) {\n          responseData.receipt = TransactionReceipt.fromBytes(response.receipt as Uint8Array);\n        }\n\n        resolve(responseData);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  public async createDaoTransaction(\n    daoTokenId: string,\n    senderId: string,\n    daoDocument: {\n      about: string\n      tokenId: string\n      image: string\n      limited: {\n        councilNftId: string\n      }\n    },   \n    fees: any,\n    returnTransaction?: boolean\n  ) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let hsuiteInfos = (await this.smartNodeRestService.getTokenInfos(this.utilities.hsuite.id)).data;\n        let veHsuiteReward = new Decimal(fees.fixed.hbar).div(hsuiteInfos.price).times(0.1)\n        .times(10 ** hsuiteInfos.decimals).toDecimalPlaces(hsuiteInfos.decimals).toNumber();\n\n        let transaction = new TransferTransaction()\n        .addHbarTransfer(senderId, Hbar.from(-fees.fixed.hbar, HbarUnit.Hbar))\n        .addHbarTransfer(fees.wallet, Hbar.from(fees.fixed.hbar, HbarUnit.Hbar))\n        .setTransactionMemo(`${daoTokenId}/${daoDocument.limited.councilNftId}`)\n        .addTokenTransfer(this.utilities.veHsuite.id, senderId, veHsuiteReward)\n        .addTokenTransfer(this.utilities.veHsuite.id, this.utilities.veHsuite.treasury, -veHsuiteReward);\n\n        let transBytes = await this.makeBytes(transaction, senderId);\n        let response: any = await this.smartNodeHashPackService.sendTransaction(transBytes, senderId, returnTransaction);\n\n        let responseData: any = {\n          response: response,\n          receipt: null\n        }\n\n        if (response.success && returnTransaction === false) {\n          responseData.receipt = TransactionReceipt.fromBytes(response.receipt as Uint8Array);\n        }\n\n        resolve(responseData);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  public async voteTransaction(\n    daoTokenId: string,\n    proposalDocument: any,\n    votedOption: number,\n    senderId: string,\n    fees: any,\n    returnTransaction?: boolean \n  ) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let hsuiteInfos = (await this.smartNodeRestService.getTokenInfos(this.utilities.hsuite.id)).data;\n        let veHsuiteReward = new Decimal(fees.fixed.hbar).div(hsuiteInfos.price).times(0.1)\n        .times(10 ** hsuiteInfos.decimals).toDecimalPlaces(hsuiteInfos.decimals).toNumber();\n\n        let transaction = new TransferTransaction()\n        .addHbarTransfer(senderId, Hbar.from(-fees.fixed.hbar, HbarUnit.Hbar))\n        .addHbarTransfer(fees.wallet, Hbar.from(fees.fixed.hbar, HbarUnit.Hbar))\n        .setTransactionMemo(`${daoTokenId}/${proposalDocument.consensus_timestamp}/${proposalDocument.type}/${votedOption}`)\n        .addTokenTransfer(this.utilities.veHsuite.id, senderId, veHsuiteReward)\n        .addTokenTransfer(this.utilities.veHsuite.id, this.utilities.veHsuite.treasury, -veHsuiteReward);\n\n        let transBytes = await this.makeBytes(transaction, senderId);\n        let response: any = await this.smartNodeHashPackService.sendTransaction(transBytes, senderId, returnTransaction);\n\n        let responseData: any = {\n          response: response,\n          receipt: null\n        }\n\n        if (response.success && returnTransaction === false) {\n          responseData.receipt = TransactionReceipt.fromBytes(response.receipt as Uint8Array);\n        }\n\n        resolve(responseData);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  public async proposalTransaction(\n    daoTokenId: string,\n    senderId: string,\n    fees: any,\n    returnTransaction?: boolean \n  ) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let hsuiteInfos = (await this.smartNodeRestService.getTokenInfos(this.utilities.hsuite.id)).data;\n        let veHsuiteReward = new Decimal(fees.fixed.hbar).div(hsuiteInfos.price).times(0.1)\n        .times(10 ** hsuiteInfos.decimals).toDecimalPlaces(hsuiteInfos.decimals).toNumber();\n\n        let transaction = new TransferTransaction()\n        .addHbarTransfer(senderId, Hbar.from(-fees.fixed.hbar, HbarUnit.Hbar))\n        .addHbarTransfer(fees.wallet, Hbar.from(fees.fixed.hbar, HbarUnit.Hbar))\n        .setTransactionMemo(`${daoTokenId}`)\n        .addTokenTransfer(this.utilities.veHsuite.id, senderId, veHsuiteReward)\n        .addTokenTransfer(this.utilities.veHsuite.id, this.utilities.veHsuite.treasury, -veHsuiteReward);\n\n        let transBytes = await this.makeBytes(transaction, senderId);\n        let response: any = await this.smartNodeHashPackService.sendTransaction(transBytes, senderId, returnTransaction);\n\n        let responseData: any = {\n          response: response,\n          receipt: null\n        }\n\n        if (response.success && returnTransaction === false) {\n          responseData.receipt = TransactionReceipt.fromBytes(response.receipt as Uint8Array);\n        }\n\n        resolve(responseData);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  public async createNftPoolTransaction(\n    senderId: string,\n    memo: string,\n    returnTransaction?: boolean   \n  ) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let fees = (await this.smartNodeRestService.loadFees('nft_exchange')).data;\n        let hsuiteInfos = (await this.smartNodeRestService.getTokenInfos(this.utilities.hsuite.id)).data;\n        let veHsuiteReward = new Decimal(fees.create.fixed.hbar).div(hsuiteInfos.price).times(0.1)\n        .times(10 ** hsuiteInfos.decimals).toDecimalPlaces(hsuiteInfos.decimals).toNumber();\n\n        let transaction = new TransferTransaction()\n        .addHbarTransfer(fees.wallet, new Hbar(fees.create.fixed.hbar))\n        .addHbarTransfer(senderId, new Hbar(-fees.create.fixed.hbar))\n        .addTokenTransfer(this.utilities.veHsuite.id, senderId, veHsuiteReward)\n        .addTokenTransfer(this.utilities.veHsuite.id, this.utilities.veHsuite.treasury, -veHsuiteReward)\n        .setTransactionMemo(memo);\n\n        let transBytes = await this.makeBytes(transaction, senderId);\n        let response: any = await this.smartNodeHashPackService.sendTransaction(transBytes, senderId, returnTransaction);\n\n        let responseData: any = {\n          response: response,\n          receipt: null\n        }\n\n        if (response.success && returnTransaction === false) {\n          responseData.receipt = TransactionReceipt.fromBytes(response.receipt as Uint8Array);\n        }\n\n        resolve(responseData);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SmartNodeNetworkModule.html":{"url":"modules/SmartNodeNetworkModule.html","title":"module - SmartNodeNetworkModule","body":"\n                   \n\n\n\n\n    Modules\n    SmartNodeNetworkModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SmartNodeNetworkModule\n\n\n\ncluster_SmartNodeNetworkModule_providers\n\n\n\n\nSmartNodeNetworkService\n\nSmartNodeNetworkService\n\n\n\nSmartNodeNetworkModule\n\nSmartNodeNetworkModule\n\nSmartNodeNetworkModule -->\n\nSmartNodeNetworkService->SmartNodeNetworkModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/sdk/src/services/network/smart-node-network.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SmartNodeNetworkService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SmartNodeNetworkService } from './smart-node-network.service';\n\n@NgModule({\n  imports: [],\n  providers: [\n    SmartNodeNetworkService\n  ],\n  exports: []\n})\nexport class SmartNodeNetworkModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SmartNodeNetworkService.html":{"url":"injectables/SmartNodeNetworkService.html","title":"injectable - SmartNodeNetworkService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SmartNodeNetworkService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/sdk/src/services/network/smart-node-network.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                network\n                            \n                            \n                                    Private\n                                node\n                            \n                            \n                                    Private\n                                nodeObservable\n                            \n                            \n                                    Private\n                                nodeObserver\n                            \n                            \n                                    Private\n                                nodes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                callApiEndpoint\n                            \n                            \n                                    Async\n                                getApiEndpoint\n                            \n                            \n                                    Public\n                                getCurrentNode\n                            \n                            \n                                    Async\n                                getNetwork\n                            \n                            \n                                getNodeObserver\n                            \n                            \n                                    Public\n                                    Async\n                                getRandomNode\n                            \n                            \n                                    Public\n                                getSpecificNode\n                            \n                            \n                                    Async\n                                postApiEndpoint\n                            \n                            \n                                    Public\n                                setCurrentNode\n                            \n                            \n                                    Public\n                                    Async\n                                setNetwork\n                            \n                            \n                                    Public\n                                setNodeFromActiveNodes\n                            \n                            \n                                    Public\n                                    Async\n                                shuffleNode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in projects/sdk/src/services/network/smart-node-network.service.ts:108\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        callApiEndpoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    callApiEndpoint(type: \"get\" | \"post\", endpoint: string, params: any, config: any, trials: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:220\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                            \"get\" | \"post\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    config\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    trials\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getApiEndpoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    getApiEndpoint(endpoint: string, params: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:209\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCurrentNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCurrentNode()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Node\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNetwork\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNetwork()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeObserver\n                        \n                    \n                \n            \n            \n                \ngetNodeObserver()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getRandomNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRandomNode(override: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    override\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getSpecificNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSpecificNode(index: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:181\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Node\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postApiEndpoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    postApiEndpoint(endpoint: string, params: any, config: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:198\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    config\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setCurrentNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentNode(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        setNetwork\n                        \n                    \n                \n            \n            \n                \n                    \n                    setNetwork(network: \"mainnet\" | \"testnet\" | \"local\", node: string, override: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    network\n                                    \n                                            \"mainnet\" | \"testnet\" | \"local\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    node\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    override\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setNodeFromActiveNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    setNodeFromActiveNodes(activeNodes: Array)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:189\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activeNodes\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        shuffleNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    shuffleNode(override: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/network/smart-node-network.service.ts:185\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    override\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    mainnet: [\n      {\n        \"operator\": \"0.0.1786597\",\n        \"publicKey\": \"302a300506032b65700321003f54816030c29221e4f228c76415cba0db1ab4c49827d9dbf580abc2f2b29c24\",\n        \"url\": \"https://mainnet-sn1.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786598\",\n        \"publicKey\": \"302a300506032b6570032100233b043e21d5e148f48e2c2da6607a1f5e6fc381781bd0561967743a8291785e\",\n        \"url\": \"https://mainnet-sn2.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786599\",\n        \"publicKey\": \"302a300506032b6570032100c236c88b0aadccf86cc09c57734401409e301d45018ab179f8463801f486c89a\",\n        \"url\": \"https://mainnet-sn3.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786344\",\n        \"publicKey\": \"302a300506032b65700321004e3c29113c911ce6dba13669fda53ed1ab3d89547e23c0b7ab2275fd5dc05766\",\n        \"url\": \"https://mainnet-sn4.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786344\",\n        \"publicKey\": \"302a300506032b65700321004e3c29113c911ce6dba13669fda53ed1ab3d89547e23c0b7ab2275fd5dc05766\",\n        \"url\": \"https://mainnet-sn5.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786345\",\n        \"publicKey\": \"302a300506032b6570032100077bfba9f0fb180026f0de51d4e1083d616eff34a8fe62a1c0e34dd975b7f8cf\",\n        \"url\": \"https://mainnet-sn6.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786347\",\n        \"publicKey\": \"302a300506032b6570032100ff792317f5a24278f1a2dddfc9a23670e158ccb9ecd42cdd0ab36e5ad8bc40a6\",\n        \"url\": \"https://mainnet-sn7.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786365\",\n        \"publicKey\": \"302a300506032b6570032100485e23e18834571e466f96de9f96f228a1f5da860b319f0f0cb2890f938f298d\",\n        \"url\": \"https://mainnet-sn8.hbarsuite.network\"\n      }\n    ],\n    testnet: [\n      {\n        \"operator\": \"0.0.3224\",\n        \"publicKey\": \"302a300506032b657003210057a3ffed480e36faf916e032435368f2eb9f951a6b58de1a64829336516fdcbf\",\n        \"url\": \"https://testnet-sn1.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.3243\",\n        \"publicKey\": \"302a300506032b6570032100c63e283249e90a6971d71e4c8a1f0bc26a7a7f61f8524c7866a1d8ff779a4ffb\",\n        \"url\": \"https://testnet-sn2.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.3266\",\n        \"publicKey\": \"302a300506032b65700321004530757c566a19027a02fc58c9387739661e727e09e1bc92f1ee2fcde530b391\",\n        \"url\": \"https://testnet-sn3.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.3320\",\n        \"publicKey\": \"302a300506032b6570032100ecb67bdae47babf0d2df87f6b787562357550fac02a5e1ea44b22cc0c1ab2738\",\n        \"url\": \"https://testnet-sn4.hbarsuite.network\"\n      }\n    ],\n    local: [\n      {\n        \"operator\": \"0.0.3224\",\n        \"publicKey\": \"302a300506032b657003210057a3ffed480e36faf916e032435368f2eb9f951a6b58de1a64829336516fdcbf\",\n        \"url\": \"http://localhost:3001\"\n      },\n      {\n        \"operator\": \"0.0.3243\",\n        \"publicKey\": \"302a300506032b6570032100c63e283249e90a6971d71e4c8a1f0bc26a7a7f61f8524c7866a1d8ff779a4ffb\",\n        \"url\": \"http://localhost:3002\"\n      },\n      {\n        \"operator\": \"0.0.3266\",\n        \"publicKey\": \"302a300506032b65700321004530757c566a19027a02fc58c9387739661e727e09e1bc92f1ee2fcde530b391\",\n        \"url\": \"http://localhost:3003\"\n      },\n      {\n        \"operator\": \"0.0.3320\",\n        \"publicKey\": \"302a300506032b6570032100ecb67bdae47babf0d2df87f6b787562357550fac02a5e1ea44b22cc0c1ab2738\",\n        \"url\": \"http://localhost:3004\"\n      }   \n    ]\n  }\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/network/smart-node-network.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        node\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Node\n\n                    \n                \n                \n                    \n                        Default value : {\n    operator: '',\n    publicKey: '',\n    url: ''\n  }\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/network/smart-node-network.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodeObservable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.nodeObserver.asObservable()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/network/smart-node-network.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodeObserver\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/network/smart-node-network.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : new  Array()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/network/smart-node-network.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Node } from './interfaces/node.interface';\nimport { Observable, Subject } from 'rxjs';\nimport { Storage } from '@capacitor/storage';\nimport axios from 'axios';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SmartNodeNetworkService {\n  private nodeObserver = new Subject();\n  private nodeObservable = this.nodeObserver.asObservable();\n\n  private nodes: Array = new  Array();\n  private node: Node = {\n    operator: '',\n    publicKey: '',\n    url: ''\n  };\n\n  private network = {\n    mainnet: [\n      {\n        \"operator\": \"0.0.1786597\",\n        \"publicKey\": \"302a300506032b65700321003f54816030c29221e4f228c76415cba0db1ab4c49827d9dbf580abc2f2b29c24\",\n        \"url\": \"https://mainnet-sn1.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786598\",\n        \"publicKey\": \"302a300506032b6570032100233b043e21d5e148f48e2c2da6607a1f5e6fc381781bd0561967743a8291785e\",\n        \"url\": \"https://mainnet-sn2.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786599\",\n        \"publicKey\": \"302a300506032b6570032100c236c88b0aadccf86cc09c57734401409e301d45018ab179f8463801f486c89a\",\n        \"url\": \"https://mainnet-sn3.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786344\",\n        \"publicKey\": \"302a300506032b65700321004e3c29113c911ce6dba13669fda53ed1ab3d89547e23c0b7ab2275fd5dc05766\",\n        \"url\": \"https://mainnet-sn4.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786344\",\n        \"publicKey\": \"302a300506032b65700321004e3c29113c911ce6dba13669fda53ed1ab3d89547e23c0b7ab2275fd5dc05766\",\n        \"url\": \"https://mainnet-sn5.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786345\",\n        \"publicKey\": \"302a300506032b6570032100077bfba9f0fb180026f0de51d4e1083d616eff34a8fe62a1c0e34dd975b7f8cf\",\n        \"url\": \"https://mainnet-sn6.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786347\",\n        \"publicKey\": \"302a300506032b6570032100ff792317f5a24278f1a2dddfc9a23670e158ccb9ecd42cdd0ab36e5ad8bc40a6\",\n        \"url\": \"https://mainnet-sn7.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.1786365\",\n        \"publicKey\": \"302a300506032b6570032100485e23e18834571e466f96de9f96f228a1f5da860b319f0f0cb2890f938f298d\",\n        \"url\": \"https://mainnet-sn8.hbarsuite.network\"\n      }\n    ],\n    testnet: [\n      {\n        \"operator\": \"0.0.3224\",\n        \"publicKey\": \"302a300506032b657003210057a3ffed480e36faf916e032435368f2eb9f951a6b58de1a64829336516fdcbf\",\n        \"url\": \"https://testnet-sn1.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.3243\",\n        \"publicKey\": \"302a300506032b6570032100c63e283249e90a6971d71e4c8a1f0bc26a7a7f61f8524c7866a1d8ff779a4ffb\",\n        \"url\": \"https://testnet-sn2.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.3266\",\n        \"publicKey\": \"302a300506032b65700321004530757c566a19027a02fc58c9387739661e727e09e1bc92f1ee2fcde530b391\",\n        \"url\": \"https://testnet-sn3.hbarsuite.network\"\n      },\n      {\n        \"operator\": \"0.0.3320\",\n        \"publicKey\": \"302a300506032b6570032100ecb67bdae47babf0d2df87f6b787562357550fac02a5e1ea44b22cc0c1ab2738\",\n        \"url\": \"https://testnet-sn4.hbarsuite.network\"\n      }\n    ],\n    local: [\n      {\n        \"operator\": \"0.0.3224\",\n        \"publicKey\": \"302a300506032b657003210057a3ffed480e36faf916e032435368f2eb9f951a6b58de1a64829336516fdcbf\",\n        \"url\": \"http://localhost:3001\"\n      },\n      {\n        \"operator\": \"0.0.3243\",\n        \"publicKey\": \"302a300506032b6570032100c63e283249e90a6971d71e4c8a1f0bc26a7a7f61f8524c7866a1d8ff779a4ffb\",\n        \"url\": \"http://localhost:3002\"\n      },\n      {\n        \"operator\": \"0.0.3266\",\n        \"publicKey\": \"302a300506032b65700321004530757c566a19027a02fc58c9387739661e727e09e1bc92f1ee2fcde530b391\",\n        \"url\": \"http://localhost:3003\"\n      },\n      {\n        \"operator\": \"0.0.3320\",\n        \"publicKey\": \"302a300506032b6570032100ecb67bdae47babf0d2df87f6b787562357550fac02a5e1ea44b22cc0c1ab2738\",\n        \"url\": \"http://localhost:3004\"\n      }   \n    ]\n  };\n\n  constructor() {}\n\n  getNodeObserver(): Observable {\n    return this.nodeObservable;\n  }\n\n  public async setNetwork(network: 'mainnet' | 'testnet' | 'local', node: string, override: boolean = false): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        // as very first, we setup the core network...\n        this.nodes = this.network[network];\n        // setting a random node to use as default one...\n        if(node == 'random') {\n          await this.shuffleNode(override);\n        } else {\n          this.node = this.getSpecificNode(Number(node));\n        }\n        \n        // then we fetch the entire network of nodes, and we update our nodes array...\n        try {\n          let whitelistedNetwork = await this.getNetwork();\n          this.nodes = whitelistedNetwork.data;          \n          resolve(true);\n        } catch(error) {\n          resolve(await this.setNetwork(network, node, true));\n        }\n      } catch(error) {\n        reject(error);\n      }\n    })\n  }\n\n  async getNetwork(): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        // then we call the endpoint to grab the entire list of nodes...\n        let response = await this.getApiEndpoint('smart-node/network');\n        // finally, we can resolve it...\n        resolve({\n          function: 'getNetwork',\n          node: this.node,\n          data: response\n        });\n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  public getCurrentNode(): Node {\n    return this.node;\n  }\n\n  public setCurrentNode(node: Node): void {\n    this.node = node;\n  }\n\n  public async getRandomNode(override: boolean): Promise {\n    let auth = await Storage.get({key: 'hashconnect.auth'});\n    let node = null;\n\n    if(auth.value && !override) {\n      let authStorage = JSON.parse(auth.value);\n      node = this.nodes.find(node => node.operator == authStorage.signedPayload.originalPayload.node);\n    } else {\n      node = this.nodes[Math.floor(Math.random() * this.nodes.length)];\n    }\n\n    return node;\n  }\n\n  public getSpecificNode(index: number): Node {\n    return this.nodes[index];\n  }\n\n  public async shuffleNode(override: boolean): Promise {\n    this.node = await this.getRandomNode(override);\n  }\n\n  public setNodeFromActiveNodes(activeNodes: Array): void {\n    if(activeNodes.length) {\n      this.node = activeNodes[Math.floor(Math.random() * activeNodes.length)];\n      this.nodeObserver.next(this.node);\n    } else {\n      throw new Error(`the list of active nodes can't be empty`);\n    }\n  }\n\n  async postApiEndpoint(endpoint: string, params: any = {}, config: any = {}): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.callApiEndpoint('post', endpoint, params, config);\n        resolve(response);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async getApiEndpoint(endpoint: string, params: any = {}): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.callApiEndpoint('get', endpoint, params);\n        resolve(response);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  private async callApiEndpoint(\n    type: 'get' | 'post',\n    endpoint: string, \n    params: any = {}, \n    config: any = {}, \n    trials: number = 0\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        // try to call the required api endpoint...\n        let response = null;\n\n        if(this.node.url != '') {\n          switch(type) {\n            case 'get':\n              response = await axios.get(`${this.node.url}/${endpoint}`, params);\n              break;\n            case 'post':\n              response = await axios.post(`${this.node.url}/${endpoint}`, params, config);\n              break;\n          }\n  \n          this.nodeObserver.next(this.node);\n          resolve(response.data);          \n        } else {\n          resolve(response);\n        }\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SmartNodeRestModule.html":{"url":"modules/SmartNodeRestModule.html","title":"module - SmartNodeRestModule","body":"\n                   \n\n\n\n\n    Modules\n    SmartNodeRestModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SmartNodeRestModule\n\n\n\ncluster_SmartNodeRestModule_imports\n\n\n\ncluster_SmartNodeRestModule_providers\n\n\n\n\nSmartNodeNetworkModule\n\nSmartNodeNetworkModule\n\n\n\nSmartNodeRestModule\n\nSmartNodeRestModule\n\nSmartNodeRestModule -->\n\nSmartNodeNetworkModule->SmartNodeRestModule\n\n\n\n\n\nSmartNodeRestService\n\nSmartNodeRestService\n\nSmartNodeRestModule -->\n\nSmartNodeRestService->SmartNodeRestModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/sdk/src/services/rest/smart-node-rest.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SmartNodeRestService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SmartNodeNetworkModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SmartNodeNetworkModule } from '../network/smart-node-network.module';\nimport { SmartNodeRestService } from './smart-node-rest.service';\n\n@NgModule({\n  imports: [\n    SmartNodeNetworkModule\n  ],\n  providers: [\n    SmartNodeRestService\n  ],\n  exports: [],\n})\nexport class SmartNodeRestModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SmartNodeRestService.html":{"url":"injectables/SmartNodeRestService.html","title":"injectable - SmartNodeRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SmartNodeRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/sdk/src/services/rest/smart-node-rest.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                gameFlipCoin\n                            \n                            \n                                    Public\n                                    Async\n                                getAccountBalance\n                            \n                            \n                                    Public\n                                    Async\n                                getAccountInfos\n                            \n                            \n                                    Public\n                                    Async\n                                getGameToken\n                            \n                            \n                                    Public\n                                    Async\n                                getHsuiteHolders\n                            \n                            \n                                    Public\n                                    Async\n                                getHsuiteStaking\n                            \n                            \n                                    Public\n                                    Async\n                                getNftForHolder\n                            \n                            \n                                    Public\n                                    Async\n                                getTokenChainInfos\n                            \n                            \n                                    Public\n                                    Async\n                                getTokenInfos\n                            \n                            \n                                    Public\n                                    Async\n                                getUtilities\n                            \n                            \n                                    Public\n                                    Async\n                                loadFees\n                            \n                            \n                                    Public\n                                    Async\n                                loadTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(smartNodeNetworkService: SmartNodeNetworkService)\n                    \n                \n                        \n                            \n                                Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        smartNodeNetworkService\n                                                  \n                                                        \n                                                                        SmartNodeNetworkService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        gameFlipCoin\n                        \n                    \n                \n            \n            \n                \n                    \n                    gameFlipCoin(transactionId: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAccountBalance\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAccountBalance(accountId: string, tokenId?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAccountInfos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAccountInfos(accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getGameToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getGameToken()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getHsuiteHolders\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHsuiteHolders()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getHsuiteStaking\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHsuiteStaking()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getNftForHolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNftForHolder(accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:210\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getTokenChainInfos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokenChainInfos(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:231\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getTokenInfos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokenInfos(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:189\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getUtilities\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUtilities()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        loadFees\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadFees(fee: \"tokens\" | \"launchpads\" | \"daos\" | \"multisig\" | \"nft_exchange\" | \"exchange\")\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fee\n                                    \n                                            \"tokens\" | \"launchpads\" | \"daos\" | \"multisig\" | \"nft_exchange\" | \"exchange\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        loadTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadTokens()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/rest/smart-node-rest.service.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { SmartNodeNetworkService } from '../network/smart-node-network.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SmartNodeRestService {\n  constructor(\n    private smartNodeNetworkService: SmartNodeNetworkService\n  ) {}\n\n  // GAME\n  public async getGameToken(): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(`games/token`);\n        let node = this.smartNodeNetworkService.getCurrentNode();\n\n        resolve({\n          function: 'getGameToken',\n          node: node,\n          data: response\n        });\n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  public async gameFlipCoin(transactionId: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(`games/coin/flip`, \n        { params: { \n          transactionId: transactionId\n        } });\n        \n        let node = this.smartNodeNetworkService.getCurrentNode();\n\n        resolve({\n          function: 'gameFlipCoin',\n          node: node,\n          data: response\n        });\n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  // SMART NODE\n  public async getUtilities(): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(`smart-node/utilities`);\n\n        resolve({\n          function: 'getUtilities',\n          node: this.smartNodeNetworkService.getCurrentNode(),\n          data: response\n        });\n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  public async getHsuiteHolders(): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(`smart-node/hsuite/holders`);\n\n        resolve({\n          function: 'getHsuiteHolders',\n          node: this.smartNodeNetworkService.getCurrentNode(),\n          data: response\n        });\n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  public async getHsuiteStaking(): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(`smart-node/hsuite/staking`);\n\n        resolve({\n          function: 'getHsuiteStaking',\n          node: this.smartNodeNetworkService.getCurrentNode(),\n          data: response\n        });\n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  public async getAccountInfos(accountId: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(\n          `wallets/info`,\n          { params: {\n            accountId: accountId\n          } }\n        );\n\n        resolve({\n          function: 'getAccountInfos',\n          node: this.smartNodeNetworkService.getCurrentNode(),\n          data: response\n        });\n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  public async getAccountBalance(accountId: string, tokenId?: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(\n          `wallets/balance`,\n          { params: {\n            accountId: accountId,\n            tokenId: tokenId\n          } } \n        );\n\n        resolve({\n          function: 'getAccountInfos',\n          node: this.smartNodeNetworkService.getCurrentNode(),\n          data: response\n        });\n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  public async loadFees(\n    fee: 'tokens' | 'launchpads' | 'daos' | 'multisig' | 'nft_exchange' | 'exchange'\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(\n          `fees/info`,\n          { params: {\n            fee: fee\n          } }\n        );\n\n        let node = this.smartNodeNetworkService.getCurrentNode();\n\n        resolve({\n          function: 'loadFees',\n          node: node,\n          data: response\n        });\n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  public async loadTokens(): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(`tokens/list`);\n        let node = this.smartNodeNetworkService.getCurrentNode();\n\n        response.forEach((data: any) => {\n          data.image = `${node.url}/${data.image}`\n        });\n\n        resolve({\n          function: 'loadTokens',\n          node: node,\n          data: response\n        });\n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  public async getTokenInfos(tokenId: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(\n          `tokens/info`,\n          { params: {\n            tokenId: tokenId\n          } }          \n        );\n\n        resolve({\n          function: 'getTokenInfos',\n          node: this.smartNodeNetworkService.getCurrentNode(),\n          data: response\n        });\n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  public async getNftForHolder(accountId: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(\n          `wallets/nfts`,\n          { params: {\n            accountId: accountId\n          } }          \n        );\n\n        resolve({\n          function: 'getNftForHolder',\n          node: this.smartNodeNetworkService.getCurrentNode(),\n          data: response\n        });\n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  public async getTokenChainInfos(tokenId: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.smartNodeNetworkService.getApiEndpoint(\n          `tokens/chain-info`,\n          { params: {\n            tokenId: tokenId\n          } }          \n        );\n\n        resolve({\n          function: 'getTokenChainInfos',\n          node: this.smartNodeNetworkService.getCurrentNode(),\n          data: response\n        });\n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SmartNodeSdkModule.html":{"url":"modules/SmartNodeSdkModule.html","title":"module - SmartNodeSdkModule","body":"\n                   \n\n\n\n\n    Modules\n    SmartNodeSdkModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SmartNodeSdkModule\n\n\n\ncluster_SmartNodeSdkModule_imports\n\n\n\ncluster_SmartNodeSdkModule_providers\n\n\n\n\nSmartNodeHashPackModule\n\nSmartNodeHashPackModule\n\n\n\nSmartNodeSdkModule\n\nSmartNodeSdkModule\n\nSmartNodeSdkModule -->\n\nSmartNodeHashPackModule->SmartNodeSdkModule\n\n\n\n\n\nSmartNodeHederaModule\n\nSmartNodeHederaModule\n\nSmartNodeSdkModule -->\n\nSmartNodeHederaModule->SmartNodeSdkModule\n\n\n\n\n\nSmartNodeNetworkModule\n\nSmartNodeNetworkModule\n\nSmartNodeSdkModule -->\n\nSmartNodeNetworkModule->SmartNodeSdkModule\n\n\n\n\n\nSmartNodeRestModule\n\nSmartNodeRestModule\n\nSmartNodeSdkModule -->\n\nSmartNodeRestModule->SmartNodeSdkModule\n\n\n\n\n\nSmartNodeSocketsModule\n\nSmartNodeSocketsModule\n\nSmartNodeSdkModule -->\n\nSmartNodeSocketsModule->SmartNodeSdkModule\n\n\n\n\n\nSmartNodeSdkService\n\nSmartNodeSdkService\n\nSmartNodeSdkModule -->\n\nSmartNodeSdkService->SmartNodeSdkModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/sdk/src/lib/smart-node-sdk.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SmartNodeSdkService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SmartNodeHashPackModule\n                        \n                        \n                            SmartNodeHederaModule\n                        \n                        \n                            SmartNodeNetworkModule\n                        \n                        \n                            SmartNodeRestModule\n                        \n                        \n                            SmartNodeSocketsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SmartNodeHashPackModule } from '../services/hashpack/smart-node-hashpack.module';\nimport { SmartNodeHederaModule } from '../services/hedera/smart-node-hedera.module';\nimport { SmartNodeNetworkModule } from '../services/network/smart-node-network.module';\nimport { SmartNodeRestModule } from '../services/rest/smart-node-rest.module';\nimport { SmartNodeSocketsModule } from '../services/sockets/smart-node-sockets.module';\nimport { SmartNodeSdkService } from './smart-node-sdk.service';\n\n@NgModule({\n  imports: [\n    SmartNodeRestModule,\n    SmartNodeNetworkModule,\n    SmartNodeSocketsModule,\n    SmartNodeHashPackModule,\n    SmartNodeHederaModule\n  ],\n  providers: [\n    SmartNodeSdkService\n  ],\n  exports: []\n})\nexport class SmartNodeSdkModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SmartNodeSdkService.html":{"url":"injectables/SmartNodeSdkService.html","title":"injectable - SmartNodeSdkService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SmartNodeSdkService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/sdk/src/lib/smart-node-sdk.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                eventsObservable\n                            \n                            \n                                    Private\n                                eventsObserver\n                            \n                            \n                                    Private\n                                hashpackWallet\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _initSockets\n                            \n                            \n                                getEventsObserver\n                            \n                            \n                                    Public\n                                getHashPackService\n                            \n                            \n                                    Public\n                                getHederaService\n                            \n                            \n                                    Public\n                                getNetworkService\n                            \n                            \n                                    Public\n                                getRestService\n                            \n                            \n                                    Public\n                                getSocketsService\n                            \n                            \n                                    Private\n                                    Async\n                                handleAuthEvent\n                            \n                            \n                                    Private\n                                    Async\n                                handleErrors\n                            \n                            \n                                    Private\n                                    Async\n                                handleGenericEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(smartNodeNetworkService: SmartNodeNetworkService, smartNodeRestService: SmartNodeRestService, smartNodeSocketsService: SmartNodeSocketsService, smartNodeHashPackService: SmartNodeHashPackService, smartNodeHederaService: SmartNodeHederaService, network: \"mainnet\" | \"testnet\" | \"local\", node: string)\n                    \n                \n                        \n                            \n                                Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        smartNodeNetworkService\n                                                  \n                                                        \n                                                                        SmartNodeNetworkService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        smartNodeRestService\n                                                  \n                                                        \n                                                                        SmartNodeRestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        smartNodeSocketsService\n                                                  \n                                                        \n                                                                        SmartNodeSocketsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        smartNodeHashPackService\n                                                  \n                                                        \n                                                                        SmartNodeHashPackService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        smartNodeHederaService\n                                                  \n                                                        \n                                                                        SmartNodeHederaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        network\n                                                  \n                                                        \n                                                                    \"mainnet\" | \"testnet\" | \"local\"\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        node\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _initSockets\n                        \n                    \n                \n            \n            \n                \n                    \n                    _initSockets(hashconnectData: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hashconnectData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEventsObserver\n                        \n                    \n                \n            \n            \n                \ngetEventsObserver()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getHashPackService\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHashPackService()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SmartNodeHashPackService\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getHederaService\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHederaService()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:183\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SmartNodeHederaService\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getNetworkService\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNetworkService()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SmartNodeNetworkService\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getRestService\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRestService()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SmartNodeRestService\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getSocketsService\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSocketsService()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:179\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SmartNodeSocketsService\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        handleAuthEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleAuthEvent(event: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        handleErrors\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleErrors(event: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        handleGenericEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleGenericEvents(event: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        eventsObservable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.eventsObserver.asObservable()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        eventsObserver\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hashpackWallet\n                        \n                    \n                \n            \n                \n                    \n                        Type :     null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/lib/smart-node-sdk.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { SmartNodeHashPackService } from '../services/hashpack/smart-node-hashpack.service';\nimport { SmartNodeHederaService } from '../services/hedera/smart-node-hedera.service';\nimport { SmartNodeNetworkService } from '../services/network/smart-node-network.service';\nimport { SmartNodeRestService } from '../services/rest/smart-node-rest.service';\nimport { SmartNodeSocketsService } from '../services/sockets/smart-node-sockets.service';\nimport * as lodash from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SmartNodeSdkService {\n  private eventsObserver = new Subject();\n  private eventsObservable = this.eventsObserver.asObservable();\n  private hashpackWallet = null;\n  \n  constructor(\n    private smartNodeNetworkService: SmartNodeNetworkService,\n    private smartNodeRestService: SmartNodeRestService,\n    private smartNodeSocketsService: SmartNodeSocketsService,\n    private smartNodeHashPackService: SmartNodeHashPackService,\n    private smartNodeHederaService: SmartNodeHederaService,\n    @Inject('network') private network: 'mainnet' | 'testnet' | 'local',\n    @Inject('node') private node: string\n  ) {\n    // initializing the HSuite Network from the code-nodes...\n    this.smartNodeNetworkService.setNetwork(this.network, this.node).then(async() => {\n      console.log(`network has been initialized correctly, all new nodes have been fetched and ready to be used.`);\n\n      try {\n        let utilities = (await this.smartNodeRestService.getUtilities()).data;\n        this.smartNodeHederaService.setUtilities(utilities);\n        \n        let hashconnectData = await this.smartNodeHashPackService.loadHashconnectData();\n        this.hashpackWallet = lodash.get(hashconnectData.accountIds, 0);\n\n        let message = await this._initSockets(hashconnectData);\n        console.log(message);\n        \n        // subscribing to the nodeObserver, to monitor if a node goes down, and the service switches to a new one...\n        this.smartNodeNetworkService.getNodeObserver().subscribe(async (node) => {\n          let mainSocket = this.smartNodeSocketsService.getMainSocket();\n\n          // if we received a notification, we check if the new node is different than the one used with the mainSocket...\n          if(mainSocket && mainSocket.getNode().operator != node.operator) {\n            // and we re-establish a secure connection by initializing an new auth session...\n            await this.smartNodeSocketsService.initAuth(this.hashpackWallet, this.smartNodeNetworkService.getCurrentNode());\n            await this.smartNodeSocketsService.authorizeWallet();\n          }\n        });          \n      } catch(error) {\n        console.error(error);\n      }\n\n      // subscribing to login/logout events...\n      this.smartNodeHashPackService.observeHashpackConnection.subscribe(async (hashconnectData) => {\n        try {\n          let message = await this._initSockets(hashconnectData);\n          this.hashpackWallet = lodash.get(hashconnectData.accountIds, 0);\n          console.log(message);\n        } catch(error) {\n          console.error(error);\n        }\n      });\n\n      // subscribing to websockets authentication events...\n      this.smartNodeSocketsService.getSocketObserver().subscribe(async(event) => {\n        switch(event.event) {\n          case 'auth':\n            await this.handleAuthEvent(event.content);\n            break;\n          case 'events':\n            await this.handleGenericEvents(event.content);\n            break;\n          case 'errors':\n            await this.handleErrors(event.content);     \n            break;       \n        }\n      });\n    }).catch(error => {\n      throw new Error(error.message);\n    });\n  }\n\n  getEventsObserver(): Observable {\n    return this.eventsObservable;\n  }\n\n  private async handleErrors(event: any): Promise {\n    this.eventsObserver.next(event);\n  }\n\n  private async handleGenericEvents(event: any): Promise {\n    this.eventsObserver.next(event);\n  }\n\n  private async handleAuthEvent(event: any): Promise {\n    switch(event.method) {\n      case 'authentication':\n        try {\n          let authResponse = await this.smartNodeHashPackService.getAuthSession();\n\n          if(!authResponse) {\n            this.eventsObserver.next(event);\n\n            let signedData = {\n              signature: new Uint8Array(event.data.authResponse.signedData.signature),\n              serverSigningAccount: event.data.authResponse.signedData.serverSigningAccount\n            };\n\n            authResponse = await this.smartNodeHashPackService.authenticateWallet(\n              event.data.wallet,\n              signedData,\n              event.data.authResponse.payload\n            );             \n          }\n\n          if (authResponse.success) {\n            this.smartNodeSocketsService.getMainSocket().emit('authenticate', {\n              signedData: authResponse,\n              walletId: event.data.wallet\n            });\n          } else {\n            this.eventsObserver.next({\n              title: 'Authentication Failed',\n              message: 'You need to authenticate your wallet in order to safely use the app.',\n              method: 'error',\n              mode: 'warning'\n            });\n          }\n        } catch(error: any) {\n          this.eventsObserver.next({\n            title: 'Authentication Error',\n            message: error.message,\n            method: 'error',\n            mode: 'danger'\n          });\n        }\n        break;\n      case 'authenticate':\n        if(event.type == 'warning') {\n          this.smartNodeHashPackService.clearAuthSession();\n        }\n\n        this.eventsObserver.next(event); \n      break;\n    }    \n  }\n\n  private _initSockets(hashconnectData: any): Promise {\n   return new Promise(async(resolve, reject) => {\n    try {\n      await this.smartNodeSocketsService.init(\n        this.smartNodeNetworkService.getCurrentNode(),\n        hashconnectData,\n        (await this.smartNodeNetworkService.getNetwork()).data\n      );\n      \n      resolve(\"all sockets have been initialized correctly.\");\n    } catch(error) {\n      reject(error);\n    }     \n   })\n  }\n\n  public getNetworkService(): SmartNodeNetworkService {\n    return this.smartNodeNetworkService;\n  }\n\n  public getHashPackService(): SmartNodeHashPackService {\n    return this.smartNodeHashPackService;\n  }\n  \n  public getRestService(): SmartNodeRestService {\n    return this.smartNodeRestService;\n  }\n\n  public getSocketsService(): SmartNodeSocketsService {\n    return this.smartNodeSocketsService;\n  }\n\n  public getHederaService(): SmartNodeHederaService {\n    return this.smartNodeHederaService;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SmartNodeSocket.html":{"url":"injectables/SmartNodeSocket.html","title":"injectable - SmartNodeSocket","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SmartNodeSocket\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/sdk/src/lib/utils/smart-socket/smart-socket.class.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Socket\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                node\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getNode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(node: any, wallet: any, namespace: string)\n                    \n                \n                        \n                            \n                                Defined in projects/sdk/src/lib/utils/smart-socket/smart-socket.class.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        node\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        wallet\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getNode\n                        \n                    \n                \n            \n            \n                \ngetNode()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/lib/utils/smart-socket/smart-socket.class.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        node\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/lib/utils/smart-socket/smart-socket.class.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@angular/core\";\nimport { Socket } from 'ngx-socket-io';\n\n@Injectable()\nexport class SmartNodeSocket extends Socket {\n  private node: any;\n\n  constructor(\n    @Inject(Object) node: any, \n    @Inject(Object) wallet: any,\n    @Inject(Object) namespace: string = 'smart-node'\n  ) {\n    node.url = `${node.url.replace('https://', 'wss://').replace('http://', 'ws://')}/${namespace}`;\n\n    super({\n      url: node.url,\n      options: {\n        transports: [\"websocket\"],\n        query: {\n          wallet: wallet,\n          signedData: null,\n          referrer: document.referrer\n        }\n      }\n    });\n\n    this.node = node;\n  }\n\n  getNode(): any {\n    return this.node;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SmartNodeSocketsModule.html":{"url":"modules/SmartNodeSocketsModule.html","title":"module - SmartNodeSocketsModule","body":"\n                   \n\n\n\n\n    Modules\n    SmartNodeSocketsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SmartNodeSocketsModule\n\n\n\ncluster_SmartNodeSocketsModule_providers\n\n\n\ncluster_SmartNodeSocketsModule_imports\n\n\n\n\nSmartNodeNetworkModule\n\nSmartNodeNetworkModule\n\n\n\nSmartNodeSocketsModule\n\nSmartNodeSocketsModule\n\nSmartNodeSocketsModule -->\n\nSmartNodeNetworkModule->SmartNodeSocketsModule\n\n\n\n\n\nSmartNodeSocketsService\n\nSmartNodeSocketsService\n\nSmartNodeSocketsModule -->\n\nSmartNodeSocketsService->SmartNodeSocketsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/sdk/src/services/sockets/smart-node-sockets.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SmartNodeSocketsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SmartNodeNetworkModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SmartNodeNetworkModule } from '../network/smart-node-network.module';\nimport { SmartNodeSocketsService } from './smart-node-sockets.service';\n\n@NgModule({\n  imports: [\n    SmartNodeNetworkModule\n  ],\n  providers: [\n    SmartNodeSocketsService\n  ],\n  exports: []\n})\nexport class SmartNodeSocketsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SmartNodeSocketsService.html":{"url":"injectables/SmartNodeSocketsService.html","title":"injectable - SmartNodeSocketsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SmartNodeSocketsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/sdk/src/services/sockets/smart-node-sockets.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                mainSocket\n                            \n                            \n                                    Private\n                                nodesOnline\n                            \n                            \n                                    Private\n                                nodesSockets\n                            \n                            \n                                    Private\n                                socketObservable\n                            \n                            \n                                    Private\n                                socketObserver\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authorizeWallet\n                            \n                            \n                                getMainSocket\n                            \n                            \n                                getNodesOnline\n                            \n                            \n                                getSocketObserver\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                    Async\n                                initAuth\n                            \n                            \n                                initMainSocket\n                            \n                            \n                                    Async\n                                initNodes\n                            \n                            \n                                    Async\n                                sendMessageToSmartNodes\n                            \n                            \n                                    Private\n                                setNodeFromActiveNodes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(smartNodeNetworkService: SmartNodeNetworkService)\n                    \n                \n                        \n                            \n                                Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        smartNodeNetworkService\n                                                  \n                                                        \n                                                                        SmartNodeNetworkService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authorizeWallet\n                        \n                    \n                \n            \n            \n                \nauthorizeWallet()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMainSocket\n                        \n                    \n                \n            \n            \n                \ngetMainSocket()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SmartNodeSocket\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodesOnline\n                        \n                    \n                \n            \n            \n                \ngetNodesOnline()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Map\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSocketObserver\n                        \n                    \n                \n            \n            \n                \ngetSocketObserver()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                    \n                    init(currentNode: Node, authSession: any, network: Array)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentNode\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    authSession\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    network\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        initAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    initAuth(wallet: string | null, currentNode: Node)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    wallet\n                                    \n                                            string | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentNode\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initMainSocket\n                        \n                    \n                \n            \n            \n                \ninitMainSocket(currentNode: Node)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentNode\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SmartNodeSocket\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        initNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    initNodes(wallet: string | null, network: Array)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    wallet\n                                    \n                                            string | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    network\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMessageToSmartNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessageToSmartNodes(payload: any, topic: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topic\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        setNodeFromActiveNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    setNodeFromActiveNodes()\n                \n            \n\n\n            \n                \n                    Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:188\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mainSocket\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SmartNodeSocket\n\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodesOnline\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodesSockets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : new Array()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        socketObservable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.socketObserver.asObservable()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        socketObserver\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in projects/sdk/src/services/sockets/smart-node-sockets.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { SmartNodeSocket } from '../../lib/utils/smart-socket/smart-socket.class';\nimport { Node } from '../network/interfaces/node.interface';\nimport * as lodash from 'lodash';\nimport { SmartNodeNetworkService } from '../network/smart-node-network.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SmartNodeSocketsService {\n  private nodesSockets: Array = new Array();\n  private nodesOnline: Map = new Map();\n  \n  private socketObserver = new Subject();\n  private socketObservable = this.socketObserver.asObservable();\n\n  private mainSocket: SmartNodeSocket;\n\n  constructor(\n    private smartNodeNetworkService: SmartNodeNetworkService\n  ) {}\n\n  async init(currentNode: Node, authSession: any, network: Array): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let wallet = lodash.get(authSession.accountIds, 0);\n        \n        await this.initNodes(wallet, network);\n        await this.initAuth(wallet, currentNode);\n       \n        resolve();\n      } catch(error) {\n        reject(error);\n      }\n    });   \n  }\n\n  getMainSocket(): SmartNodeSocket {\n    return this.mainSocket;\n  }\n\n  getSocketObserver(): Observable {\n    return this.socketObservable;\n  }\n\n  getNodesOnline(): Map {\n    return this.nodesOnline;\n  }\n\n  async sendMessageToSmartNodes(payload: any, topic: string) {\n    this.mainSocket.emit(topic, payload);\n  }\n\n  authorizeWallet(): void {\n    this.mainSocket.disconnect();\n    this.mainSocket.connect();\n  }\n\n  initMainSocket(currentNode: Node): SmartNodeSocket {\n    this.nodesSockets.forEach(nodeSocket => {\n      let node = nodeSocket.getNode();\n\n      if(node.operator == currentNode.operator) {\n        this.mainSocket = nodeSocket;\n      }\n    });\n\n    return this.mainSocket;\n  }\n  \n  async initAuth(wallet: string | null, currentNode: Node): Promise {\n    return new Promise(async (resolve, reject) => {\n      this.mainSocket = this.initMainSocket(currentNode);\n\n      this.mainSocket.fromEvent('events').subscribe((message: any) => {\n        this.socketObserver.next({\n          event: 'events',\n          content: {\n            method: 'events',\n            ...message\n          }\n        });\n      });\n\n      this.mainSocket.fromEvent('errors').subscribe(async(message: any) => {\n        this.socketObserver.next({\n          event: 'errors',\n          content: {\n            method: 'error',\n            ...message\n          }\n        });\n      });\n\n      this.mainSocket.fromEvent('authenticate').subscribe(async (auth: any) => {\n        if (auth.isValidSignature) {\n          this.socketObserver.next({\n            event: 'auth',\n            content: {\n              message: `You are safely connected to the node ${this.mainSocket.getNode().operator} on Hsuite Network`,\n              method: 'authenticate',\n              type: 'success'\n            }\n          });\n        } else {\n          this.socketObserver.next({\n            event: 'auth',\n            content: {\n              message: `You are now connected to node ${this.mainSocket.getNode().operator} \n              For security reasons, authentication will be required every time the DAPP connects to a different node of the network.`,\n              method: 'authenticate',\n              type: 'warning'\n            }\n          });\n        }\n      });\n\n      this.mainSocket.fromEvent('authentication').subscribe(async (authResponse: any) => {\n        this.socketObserver.next({\n          event: 'auth',\n          content: {\n            message: 'Please authenticate your wallet in order to safely use the app...',\n            method: 'authentication',\n            type: 'loading',\n            data: {\n              authResponse: authResponse,\n              wallet: wallet\n            }\n          }\n        });\n      });\n\n      resolve(true);\n    });\n  }\n\n  async initNodes(wallet: string | null, network: Array): Promise> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (this.nodesSockets.length) {\n          this.nodesSockets.forEach(socket => {\n            socket.disconnect();\n          });\n        }\n\n        this.nodesSockets = new Array();\n        this.nodesOnline = new Map();\n        \n        network.forEach(node => {\n          let nodeSocket = new SmartNodeSocket(node, wallet);\n\n          this.nodesOnline.set(nodeSocket.getNode().url, {\n            node: nodeSocket.getNode(),\n            online: false\n          });\n\n          nodeSocket.on(\"connect\", async() => {\n            this.nodesOnline.set(nodeSocket.getNode().url, {\n              node: nodeSocket.getNode(),\n              online: true\n            });\n          });\n\n          nodeSocket.on(\"disconnect\", async(event) => {\n            this.nodesOnline.set(nodeSocket.getNode().url, {\n              node: nodeSocket.getNode(),\n              online: false\n            });\n\n            if(nodeSocket.getNode().operator == this.mainSocket.getNode().operator\n            && event == 'transport close') {\n              this.setNodeFromActiveNodes();\n            }\n          });\n\n          nodeSocket.connect();\n          this.nodesSockets.push(nodeSocket);\n        });\n\n        resolve(this.nodesSockets);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  private setNodeFromActiveNodes(): void {\n    try {\n      // creating a Map of active node of the network...\n      let activeNodes = new Map(\n        Array.from(this.nodesOnline).filter(([key, node]) => {\n          if (node.online) {\n            return node.node.operator;\n          }\n      \n          return false;\n        })\n      );\n\n      // mapping the Map into Array...\n      let network: Array = Array.from(activeNodes.values()).map(x => x.node);\n\n      // updating the current used node, picking up a random one from the online list...\n      this.smartNodeNetworkService.setNodeFromActiveNodes(network);\n    } catch(error) {\n      throw new Error(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                projects/sdk/src/lib/smart-node-sdk.service.ts\n            \n            injectable\n            SmartNodeSdkService\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                projects/sdk/src/lib/utils/smart-socket/smart-socket.class.ts\n            \n            injectable\n            SmartNodeSocket\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                projects/sdk/src/services/hashpack/smart-node-hashpack.service.ts\n            \n            injectable\n            SmartNodeHashPackService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                projects/sdk/src/services/hedera/smart-node-hedera.service.ts\n            \n            injectable\n            SmartNodeHederaService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                projects/sdk/src/services/network/interfaces/node.interface.ts\n            \n            interface\n            Node\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                projects/sdk/src/services/network/smart-node-network.service.ts\n            \n            injectable\n            SmartNodeNetworkService\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                projects/sdk/src/services/rest/smart-node-rest.service.ts\n            \n            injectable\n            SmartNodeRestService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                projects/sdk/src/services/sockets/smart-node-sockets.service.ts\n            \n            injectable\n            SmartNodeSocketsService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                projects/sdk/src/test.ts\n            \n            variable\n            context\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/sdk/src/test.ts\n            \n            variable\n            require\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^14.0.0\n        \n            @angular/common : ^14.0.0\n        \n            @angular/compiler : ^14.0.0\n        \n            @angular/core : ^14.0.0\n        \n            @angular/forms : ^14.0.0\n        \n            @angular/platform-browser : ^14.0.0\n        \n            @angular/platform-browser-dynamic : ^14.0.0\n        \n            @angular/router : ^14.0.0\n        \n            rxjs : ~7.5.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nHSuite - Smart Node - Angular SDK\nWelcome to Hsuite Angular SDK!\nThis library is meant to provide an easy-to-use interface to interact with our Smart Node Network, and to integrate our features into your own DAPP.\nRight now we decided to release just an Angular-SDK because our DAPP is Angular based, but feel free to take this as an inspiration to develop the SDK into any other framework you like.\nWhat's Hsuite?\nHsuite is an Hedera based technology, it makes uses of the power of Hedera to run the so called \"Smart Nodes\", which are a decentralised alternative to Smart Contract for Hedera Hashgraph.\nIf you want to know more about the project, check out the official links:\nWebsite |\nDocs\nfollow us on socials:\nTwitter |\nDiscord\nEvery single node of the network acts in a decentralised manner, so you can basically query each node and obtain the same identical response.\nWe provided also very basic swagger interface as well, which can be found under /api of every node, so for instance you will find the swagger for testnet nodes by following those links (those urls are just an example, you will find the same /api swagger interface on any of our network's nodes):\nTestnet - Smart Node 1 - APITestnet - Smart Node 2 - APITestnet - Smart Node 3 - APITestnet - Smart Node 4 - API\nInstallation\nIf you use npm, you shall run:\nnpm install @hsuite/smart-node-sdkinstead, if you use yarn:\nyarn add @hsuite/smart-node-sdkHow to Use the SDK\nInto your app.module.ts you should import our SDK and also provide the network you wish to work with, either 'testnet' | 'mainnet'.\nimport { SmartNodeSdkModule } from 'src/app/services/src/lib/smart-node-sdk.module';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    SmartNodeSdkModule\n  ],\n  providers: [\n    { provide: 'network', useValue: 'mainnet'}\n  ],\n  bootstrap: [AppComponent]\n})\n\nexport class AppModule { }Then, you can use the SDK in your app.component.ts to setup the events listeners and the main behavior, like in this example:\nimport { SmartNodeSdkService } from '@hsuite/angular-sdk';\n\n// subscribing to webSockets authentication events...\nthis.smartNodeSdkService.getEventsObserver().subscribe(async(event) => {\n  switch(event.method) {\n    case 'authentication':\n      // this event will open an authenticate request on hashpack, you can\n      // use this event to show a loading spinner, or any other UI interaction...\n      break;\n    case 'authenticate':\n      // this event will let you know if the user signed the auth on hashpack,\n      // or either rejected it, so you can do your UI login in here...\n      break;\n    case 'events':\n      // those are generic events, so you can handle all your UI logic related to\n      // any of the feature you're interacting with (launchpad, dex, dao, etc)\n      break;\n    case 'error':\n      // those events will show you any error coming from your interaction with smart nodes\n      // you can use those events to show those error in your UI...\n      break;\n  }    \n});  \n\nthis.smartNodeSdkService.getHashPackService().observeHashpackConnection.subscribe(async(savedData) => {\n  // this observer will let your DAPP know any login/logout/connection events related to hashpack itself...\n});Services\nYou can interact with the SDK on a very high level, you don't need to interact with the websockets \nor the network services unless you're doing something very advanced.\nNodes will be validating the requested transaction, and sign it if all the validators checks approves it.\nSmartNodeSdkService\nThe easiest way to use this SDK is to interact only with the SmartNodeSdkService.\nThere are few methods to help you out interacting with the all underlying layer.\nThe EventsObserver will provide you an easy access to all events triggered by the SmartNode Network.\ngetEventsObserver()The NetworkService provides all the methods you might need in order to interact with the SmartNode Network on a lower level.\ngetNetworkService()The HashPackService is basically wrapping all the interactions with HashPask into an easy-to-use service, so to avoid any headacke. \ngetHashPackService()The RestService provides all the methods you need to interact with the SmartNode HTTP GET Methods (read-only)\ngetRestService()The SocketService handles all the websockets connections on a low level, keeping track of healthy nodes and providing an easy-to-handle interface.\ngetSocketsService()The HederaService offers some methods (like AssociateToken for example), to facilitate some interaction by wrapping the most common use cases.\ngetHederaService()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        SmartNodeHashPackModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SmartNodeHederaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SmartNodeNetworkModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SmartNodeRestModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SmartNodeSdkModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SmartNodeSocketsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SmartNodeHashPackModule\n\n\n\ncluster_SmartNodeHashPackModule_providers\n\n\n\ncluster_SmartNodeHederaModule\n\n\n\ncluster_SmartNodeHederaModule_imports\n\n\n\ncluster_SmartNodeHederaModule_providers\n\n\n\ncluster_SmartNodeNetworkModule\n\n\n\ncluster_SmartNodeNetworkModule_providers\n\n\n\ncluster_SmartNodeRestModule\n\n\n\ncluster_SmartNodeRestModule_providers\n\n\n\ncluster_SmartNodeSdkModule\n\n\n\ncluster_SmartNodeSdkModule_imports\n\n\n\ncluster_SmartNodeSdkModule_providers\n\n\n\ncluster_SmartNodeSocketsModule\n\n\n\ncluster_SmartNodeSocketsModule_providers\n\n\n\n\nSmartNodeHashPackService\n\nSmartNodeHashPackService\n\n\n\nSmartNodeHashPackModule\n\nSmartNodeHashPackModule\n\nSmartNodeHashPackModule -->\n\nSmartNodeHashPackService->SmartNodeHashPackModule\n\n\n\n\n\nSmartNodeHederaModule\n\nSmartNodeHederaModule\n\nSmartNodeHederaModule -->\n\nSmartNodeHashPackModule->SmartNodeHederaModule\n\n\n\n\n\nSmartNodeSdkModule\n\nSmartNodeSdkModule\n\nSmartNodeSdkModule -->\n\nSmartNodeHashPackModule->SmartNodeSdkModule\n\n\n\n\n\nSmartNodeRestModule\n\nSmartNodeRestModule\n\nSmartNodeHederaModule -->\n\nSmartNodeRestModule->SmartNodeHederaModule\n\n\n\nSmartNodeSdkModule -->\n\nSmartNodeRestModule->SmartNodeSdkModule\n\n\n\nSmartNodeSdkModule -->\n\nSmartNodeHederaModule->SmartNodeSdkModule\n\n\n\n\n\nSmartNodeHederaService\n\nSmartNodeHederaService\n\nSmartNodeHederaModule -->\n\nSmartNodeHederaService->SmartNodeHederaModule\n\n\n\n\n\nSmartNodeNetworkService\n\nSmartNodeNetworkService\n\n\n\nSmartNodeNetworkModule\n\nSmartNodeNetworkModule\n\nSmartNodeNetworkModule -->\n\nSmartNodeNetworkService->SmartNodeNetworkModule\n\n\n\nSmartNodeRestModule -->\n\nSmartNodeNetworkModule->SmartNodeRestModule\n\n\n\n\n\nSmartNodeSocketsModule\n\nSmartNodeSocketsModule\n\nSmartNodeSocketsModule -->\n\nSmartNodeNetworkModule->SmartNodeSocketsModule\n\n\n\nSmartNodeSdkModule -->\n\nSmartNodeNetworkModule->SmartNodeSdkModule\n\n\n\n\n\nSmartNodeRestService\n\nSmartNodeRestService\n\nSmartNodeRestModule -->\n\nSmartNodeRestService->SmartNodeRestModule\n\n\n\nSmartNodeSdkModule -->\n\nSmartNodeSocketsModule->SmartNodeSdkModule\n\n\n\n\n\nSmartNodeSdkService\n\nSmartNodeSdkService\n\nSmartNodeSdkModule -->\n\nSmartNodeSdkService->SmartNodeSdkModule\n\n\n\n\n\nSmartNodeSocketsService\n\nSmartNodeSocketsService\n\nSmartNodeSocketsModule -->\n\nSmartNodeSocketsService->SmartNodeSocketsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            context   (projects/.../test.ts)\n                        \n                        \n                            require   (projects/.../test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/sdk/src/test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require.context('./', true, /\\.spec\\.ts$/)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        require\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
